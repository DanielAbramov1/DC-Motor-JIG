
Beed_DC_Motor_JIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000608  0800c018  0800c018  0001c018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c620  0800c620  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800c620  0800c620  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c620  0800c620  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c620  0800c620  0001c620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c624  0800c624  0001c624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd0  20000078  0800c6a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e48  0800c6a0  00020e48  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017400  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003324  00000000  00000000  000374a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  0003ba88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cee9  00000000  00000000  0003cbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000189e7  00000000  00000000  00059ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ea39  00000000  00000000  000724b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110ee9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005648  00000000  00000000  00110f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bffc 	.word	0x0800bffc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	0800bffc 	.word	0x0800bffc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f839 	bl	80014b4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff89 	bl	8001364 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f82b 	bl	80014b4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f821 	bl	80014b4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffb1 	bl	80013e8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ffa7 	bl	80013e8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f89f 	bl	80005f4 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f82b 	bl	800051c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f891 	bl	80005f4 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f887 	bl	80005f4 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f837 	bl	8000568 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f82d 	bl	8000568 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__eqsf2>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	0042      	lsls	r2, r0, #1
 8000520:	0245      	lsls	r5, r0, #9
 8000522:	024e      	lsls	r6, r1, #9
 8000524:	004c      	lsls	r4, r1, #1
 8000526:	0fc3      	lsrs	r3, r0, #31
 8000528:	0a6d      	lsrs	r5, r5, #9
 800052a:	2001      	movs	r0, #1
 800052c:	0e12      	lsrs	r2, r2, #24
 800052e:	0a76      	lsrs	r6, r6, #9
 8000530:	0e24      	lsrs	r4, r4, #24
 8000532:	0fc9      	lsrs	r1, r1, #31
 8000534:	2aff      	cmp	r2, #255	; 0xff
 8000536:	d006      	beq.n	8000546 <__eqsf2+0x2a>
 8000538:	2cff      	cmp	r4, #255	; 0xff
 800053a:	d003      	beq.n	8000544 <__eqsf2+0x28>
 800053c:	42a2      	cmp	r2, r4
 800053e:	d101      	bne.n	8000544 <__eqsf2+0x28>
 8000540:	42b5      	cmp	r5, r6
 8000542:	d006      	beq.n	8000552 <__eqsf2+0x36>
 8000544:	bd70      	pop	{r4, r5, r6, pc}
 8000546:	2d00      	cmp	r5, #0
 8000548:	d1fc      	bne.n	8000544 <__eqsf2+0x28>
 800054a:	2cff      	cmp	r4, #255	; 0xff
 800054c:	d1fa      	bne.n	8000544 <__eqsf2+0x28>
 800054e:	2e00      	cmp	r6, #0
 8000550:	d1f8      	bne.n	8000544 <__eqsf2+0x28>
 8000552:	428b      	cmp	r3, r1
 8000554:	d006      	beq.n	8000564 <__eqsf2+0x48>
 8000556:	2001      	movs	r0, #1
 8000558:	2a00      	cmp	r2, #0
 800055a:	d1f3      	bne.n	8000544 <__eqsf2+0x28>
 800055c:	0028      	movs	r0, r5
 800055e:	1e43      	subs	r3, r0, #1
 8000560:	4198      	sbcs	r0, r3
 8000562:	e7ef      	b.n	8000544 <__eqsf2+0x28>
 8000564:	2000      	movs	r0, #0
 8000566:	e7ed      	b.n	8000544 <__eqsf2+0x28>

08000568 <__gesf2>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	0042      	lsls	r2, r0, #1
 800056c:	0245      	lsls	r5, r0, #9
 800056e:	024e      	lsls	r6, r1, #9
 8000570:	004c      	lsls	r4, r1, #1
 8000572:	0fc3      	lsrs	r3, r0, #31
 8000574:	0a6d      	lsrs	r5, r5, #9
 8000576:	0e12      	lsrs	r2, r2, #24
 8000578:	0a76      	lsrs	r6, r6, #9
 800057a:	0e24      	lsrs	r4, r4, #24
 800057c:	0fc8      	lsrs	r0, r1, #31
 800057e:	2aff      	cmp	r2, #255	; 0xff
 8000580:	d01b      	beq.n	80005ba <__gesf2+0x52>
 8000582:	2cff      	cmp	r4, #255	; 0xff
 8000584:	d00e      	beq.n	80005a4 <__gesf2+0x3c>
 8000586:	2a00      	cmp	r2, #0
 8000588:	d11b      	bne.n	80005c2 <__gesf2+0x5a>
 800058a:	2c00      	cmp	r4, #0
 800058c:	d101      	bne.n	8000592 <__gesf2+0x2a>
 800058e:	2e00      	cmp	r6, #0
 8000590:	d01c      	beq.n	80005cc <__gesf2+0x64>
 8000592:	2d00      	cmp	r5, #0
 8000594:	d00c      	beq.n	80005b0 <__gesf2+0x48>
 8000596:	4283      	cmp	r3, r0
 8000598:	d01c      	beq.n	80005d4 <__gesf2+0x6c>
 800059a:	2102      	movs	r1, #2
 800059c:	1e58      	subs	r0, r3, #1
 800059e:	4008      	ands	r0, r1
 80005a0:	3801      	subs	r0, #1
 80005a2:	bd70      	pop	{r4, r5, r6, pc}
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d122      	bne.n	80005ee <__gesf2+0x86>
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d1f4      	bne.n	8000596 <__gesf2+0x2e>
 80005ac:	2d00      	cmp	r5, #0
 80005ae:	d1f2      	bne.n	8000596 <__gesf2+0x2e>
 80005b0:	2800      	cmp	r0, #0
 80005b2:	d1f6      	bne.n	80005a2 <__gesf2+0x3a>
 80005b4:	2001      	movs	r0, #1
 80005b6:	4240      	negs	r0, r0
 80005b8:	e7f3      	b.n	80005a2 <__gesf2+0x3a>
 80005ba:	2d00      	cmp	r5, #0
 80005bc:	d117      	bne.n	80005ee <__gesf2+0x86>
 80005be:	2cff      	cmp	r4, #255	; 0xff
 80005c0:	d0f0      	beq.n	80005a4 <__gesf2+0x3c>
 80005c2:	2c00      	cmp	r4, #0
 80005c4:	d1e7      	bne.n	8000596 <__gesf2+0x2e>
 80005c6:	2e00      	cmp	r6, #0
 80005c8:	d1e5      	bne.n	8000596 <__gesf2+0x2e>
 80005ca:	e7e6      	b.n	800059a <__gesf2+0x32>
 80005cc:	2000      	movs	r0, #0
 80005ce:	2d00      	cmp	r5, #0
 80005d0:	d0e7      	beq.n	80005a2 <__gesf2+0x3a>
 80005d2:	e7e2      	b.n	800059a <__gesf2+0x32>
 80005d4:	42a2      	cmp	r2, r4
 80005d6:	dc05      	bgt.n	80005e4 <__gesf2+0x7c>
 80005d8:	dbea      	blt.n	80005b0 <__gesf2+0x48>
 80005da:	42b5      	cmp	r5, r6
 80005dc:	d802      	bhi.n	80005e4 <__gesf2+0x7c>
 80005de:	d3e7      	bcc.n	80005b0 <__gesf2+0x48>
 80005e0:	2000      	movs	r0, #0
 80005e2:	e7de      	b.n	80005a2 <__gesf2+0x3a>
 80005e4:	4243      	negs	r3, r0
 80005e6:	4158      	adcs	r0, r3
 80005e8:	0040      	lsls	r0, r0, #1
 80005ea:	3801      	subs	r0, #1
 80005ec:	e7d9      	b.n	80005a2 <__gesf2+0x3a>
 80005ee:	2002      	movs	r0, #2
 80005f0:	4240      	negs	r0, r0
 80005f2:	e7d6      	b.n	80005a2 <__gesf2+0x3a>

080005f4 <__lesf2>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	0042      	lsls	r2, r0, #1
 80005f8:	0245      	lsls	r5, r0, #9
 80005fa:	024e      	lsls	r6, r1, #9
 80005fc:	004c      	lsls	r4, r1, #1
 80005fe:	0fc3      	lsrs	r3, r0, #31
 8000600:	0a6d      	lsrs	r5, r5, #9
 8000602:	0e12      	lsrs	r2, r2, #24
 8000604:	0a76      	lsrs	r6, r6, #9
 8000606:	0e24      	lsrs	r4, r4, #24
 8000608:	0fc8      	lsrs	r0, r1, #31
 800060a:	2aff      	cmp	r2, #255	; 0xff
 800060c:	d00b      	beq.n	8000626 <__lesf2+0x32>
 800060e:	2cff      	cmp	r4, #255	; 0xff
 8000610:	d00d      	beq.n	800062e <__lesf2+0x3a>
 8000612:	2a00      	cmp	r2, #0
 8000614:	d11f      	bne.n	8000656 <__lesf2+0x62>
 8000616:	2c00      	cmp	r4, #0
 8000618:	d116      	bne.n	8000648 <__lesf2+0x54>
 800061a:	2e00      	cmp	r6, #0
 800061c:	d114      	bne.n	8000648 <__lesf2+0x54>
 800061e:	2000      	movs	r0, #0
 8000620:	2d00      	cmp	r5, #0
 8000622:	d010      	beq.n	8000646 <__lesf2+0x52>
 8000624:	e009      	b.n	800063a <__lesf2+0x46>
 8000626:	2d00      	cmp	r5, #0
 8000628:	d10c      	bne.n	8000644 <__lesf2+0x50>
 800062a:	2cff      	cmp	r4, #255	; 0xff
 800062c:	d113      	bne.n	8000656 <__lesf2+0x62>
 800062e:	2e00      	cmp	r6, #0
 8000630:	d108      	bne.n	8000644 <__lesf2+0x50>
 8000632:	2a00      	cmp	r2, #0
 8000634:	d008      	beq.n	8000648 <__lesf2+0x54>
 8000636:	4283      	cmp	r3, r0
 8000638:	d012      	beq.n	8000660 <__lesf2+0x6c>
 800063a:	2102      	movs	r1, #2
 800063c:	1e58      	subs	r0, r3, #1
 800063e:	4008      	ands	r0, r1
 8000640:	3801      	subs	r0, #1
 8000642:	e000      	b.n	8000646 <__lesf2+0x52>
 8000644:	2002      	movs	r0, #2
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	2d00      	cmp	r5, #0
 800064a:	d1f4      	bne.n	8000636 <__lesf2+0x42>
 800064c:	2800      	cmp	r0, #0
 800064e:	d1fa      	bne.n	8000646 <__lesf2+0x52>
 8000650:	2001      	movs	r0, #1
 8000652:	4240      	negs	r0, r0
 8000654:	e7f7      	b.n	8000646 <__lesf2+0x52>
 8000656:	2c00      	cmp	r4, #0
 8000658:	d1ed      	bne.n	8000636 <__lesf2+0x42>
 800065a:	2e00      	cmp	r6, #0
 800065c:	d1eb      	bne.n	8000636 <__lesf2+0x42>
 800065e:	e7ec      	b.n	800063a <__lesf2+0x46>
 8000660:	42a2      	cmp	r2, r4
 8000662:	dc05      	bgt.n	8000670 <__lesf2+0x7c>
 8000664:	dbf2      	blt.n	800064c <__lesf2+0x58>
 8000666:	42b5      	cmp	r5, r6
 8000668:	d802      	bhi.n	8000670 <__lesf2+0x7c>
 800066a:	d3ef      	bcc.n	800064c <__lesf2+0x58>
 800066c:	2000      	movs	r0, #0
 800066e:	e7ea      	b.n	8000646 <__lesf2+0x52>
 8000670:	4243      	negs	r3, r0
 8000672:	4158      	adcs	r0, r3
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	3801      	subs	r0, #1
 8000678:	e7e5      	b.n	8000646 <__lesf2+0x52>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_ui2f>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	1e05      	subs	r5, r0, #0
 8000680:	d00e      	beq.n	80006a0 <__aeabi_ui2f+0x24>
 8000682:	f001 fed5 	bl	8002430 <__clzsi2>
 8000686:	239e      	movs	r3, #158	; 0x9e
 8000688:	0004      	movs	r4, r0
 800068a:	1a1b      	subs	r3, r3, r0
 800068c:	2b96      	cmp	r3, #150	; 0x96
 800068e:	dc0c      	bgt.n	80006aa <__aeabi_ui2f+0x2e>
 8000690:	2808      	cmp	r0, #8
 8000692:	dd01      	ble.n	8000698 <__aeabi_ui2f+0x1c>
 8000694:	3c08      	subs	r4, #8
 8000696:	40a5      	lsls	r5, r4
 8000698:	026d      	lsls	r5, r5, #9
 800069a:	0a6d      	lsrs	r5, r5, #9
 800069c:	b2d8      	uxtb	r0, r3
 800069e:	e001      	b.n	80006a4 <__aeabi_ui2f+0x28>
 80006a0:	2000      	movs	r0, #0
 80006a2:	2500      	movs	r5, #0
 80006a4:	05c0      	lsls	r0, r0, #23
 80006a6:	4328      	orrs	r0, r5
 80006a8:	bd70      	pop	{r4, r5, r6, pc}
 80006aa:	2b99      	cmp	r3, #153	; 0x99
 80006ac:	dd09      	ble.n	80006c2 <__aeabi_ui2f+0x46>
 80006ae:	0002      	movs	r2, r0
 80006b0:	0029      	movs	r1, r5
 80006b2:	321b      	adds	r2, #27
 80006b4:	4091      	lsls	r1, r2
 80006b6:	1e4a      	subs	r2, r1, #1
 80006b8:	4191      	sbcs	r1, r2
 80006ba:	2205      	movs	r2, #5
 80006bc:	1a12      	subs	r2, r2, r0
 80006be:	40d5      	lsrs	r5, r2
 80006c0:	430d      	orrs	r5, r1
 80006c2:	2c05      	cmp	r4, #5
 80006c4:	dc12      	bgt.n	80006ec <__aeabi_ui2f+0x70>
 80006c6:	0029      	movs	r1, r5
 80006c8:	4e0c      	ldr	r6, [pc, #48]	; (80006fc <__aeabi_ui2f+0x80>)
 80006ca:	4031      	ands	r1, r6
 80006cc:	076a      	lsls	r2, r5, #29
 80006ce:	d009      	beq.n	80006e4 <__aeabi_ui2f+0x68>
 80006d0:	200f      	movs	r0, #15
 80006d2:	4028      	ands	r0, r5
 80006d4:	2804      	cmp	r0, #4
 80006d6:	d005      	beq.n	80006e4 <__aeabi_ui2f+0x68>
 80006d8:	3104      	adds	r1, #4
 80006da:	014a      	lsls	r2, r1, #5
 80006dc:	d502      	bpl.n	80006e4 <__aeabi_ui2f+0x68>
 80006de:	239f      	movs	r3, #159	; 0x9f
 80006e0:	4031      	ands	r1, r6
 80006e2:	1b1b      	subs	r3, r3, r4
 80006e4:	0189      	lsls	r1, r1, #6
 80006e6:	0a4d      	lsrs	r5, r1, #9
 80006e8:	b2d8      	uxtb	r0, r3
 80006ea:	e7db      	b.n	80006a4 <__aeabi_ui2f+0x28>
 80006ec:	1f62      	subs	r2, r4, #5
 80006ee:	4095      	lsls	r5, r2
 80006f0:	0029      	movs	r1, r5
 80006f2:	4e02      	ldr	r6, [pc, #8]	; (80006fc <__aeabi_ui2f+0x80>)
 80006f4:	4031      	ands	r1, r6
 80006f6:	076a      	lsls	r2, r5, #29
 80006f8:	d0f4      	beq.n	80006e4 <__aeabi_ui2f+0x68>
 80006fa:	e7e9      	b.n	80006d0 <__aeabi_ui2f+0x54>
 80006fc:	fbffffff 	.word	0xfbffffff

08000700 <__aeabi_dadd>:
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000702:	464f      	mov	r7, r9
 8000704:	4646      	mov	r6, r8
 8000706:	46d6      	mov	lr, sl
 8000708:	000d      	movs	r5, r1
 800070a:	0004      	movs	r4, r0
 800070c:	b5c0      	push	{r6, r7, lr}
 800070e:	001f      	movs	r7, r3
 8000710:	0011      	movs	r1, r2
 8000712:	0328      	lsls	r0, r5, #12
 8000714:	0f62      	lsrs	r2, r4, #29
 8000716:	0a40      	lsrs	r0, r0, #9
 8000718:	4310      	orrs	r0, r2
 800071a:	007a      	lsls	r2, r7, #1
 800071c:	0d52      	lsrs	r2, r2, #21
 800071e:	00e3      	lsls	r3, r4, #3
 8000720:	033c      	lsls	r4, r7, #12
 8000722:	4691      	mov	r9, r2
 8000724:	0a64      	lsrs	r4, r4, #9
 8000726:	0ffa      	lsrs	r2, r7, #31
 8000728:	0f4f      	lsrs	r7, r1, #29
 800072a:	006e      	lsls	r6, r5, #1
 800072c:	4327      	orrs	r7, r4
 800072e:	4692      	mov	sl, r2
 8000730:	46b8      	mov	r8, r7
 8000732:	0d76      	lsrs	r6, r6, #21
 8000734:	0fed      	lsrs	r5, r5, #31
 8000736:	00c9      	lsls	r1, r1, #3
 8000738:	4295      	cmp	r5, r2
 800073a:	d100      	bne.n	800073e <__aeabi_dadd+0x3e>
 800073c:	e099      	b.n	8000872 <__aeabi_dadd+0x172>
 800073e:	464c      	mov	r4, r9
 8000740:	1b34      	subs	r4, r6, r4
 8000742:	46a4      	mov	ip, r4
 8000744:	2c00      	cmp	r4, #0
 8000746:	dc00      	bgt.n	800074a <__aeabi_dadd+0x4a>
 8000748:	e07c      	b.n	8000844 <__aeabi_dadd+0x144>
 800074a:	464a      	mov	r2, r9
 800074c:	2a00      	cmp	r2, #0
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x52>
 8000750:	e0b8      	b.n	80008c4 <__aeabi_dadd+0x1c4>
 8000752:	4ac5      	ldr	r2, [pc, #788]	; (8000a68 <__aeabi_dadd+0x368>)
 8000754:	4296      	cmp	r6, r2
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x5a>
 8000758:	e11c      	b.n	8000994 <__aeabi_dadd+0x294>
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	003c      	movs	r4, r7
 800075e:	0412      	lsls	r2, r2, #16
 8000760:	4314      	orrs	r4, r2
 8000762:	46a0      	mov	r8, r4
 8000764:	4662      	mov	r2, ip
 8000766:	2a38      	cmp	r2, #56	; 0x38
 8000768:	dd00      	ble.n	800076c <__aeabi_dadd+0x6c>
 800076a:	e161      	b.n	8000a30 <__aeabi_dadd+0x330>
 800076c:	2a1f      	cmp	r2, #31
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0x72>
 8000770:	e1cc      	b.n	8000b0c <__aeabi_dadd+0x40c>
 8000772:	4664      	mov	r4, ip
 8000774:	2220      	movs	r2, #32
 8000776:	1b12      	subs	r2, r2, r4
 8000778:	4644      	mov	r4, r8
 800077a:	4094      	lsls	r4, r2
 800077c:	000f      	movs	r7, r1
 800077e:	46a1      	mov	r9, r4
 8000780:	4664      	mov	r4, ip
 8000782:	4091      	lsls	r1, r2
 8000784:	40e7      	lsrs	r7, r4
 8000786:	464c      	mov	r4, r9
 8000788:	1e4a      	subs	r2, r1, #1
 800078a:	4191      	sbcs	r1, r2
 800078c:	433c      	orrs	r4, r7
 800078e:	4642      	mov	r2, r8
 8000790:	4321      	orrs	r1, r4
 8000792:	4664      	mov	r4, ip
 8000794:	40e2      	lsrs	r2, r4
 8000796:	1a80      	subs	r0, r0, r2
 8000798:	1a5c      	subs	r4, r3, r1
 800079a:	42a3      	cmp	r3, r4
 800079c:	419b      	sbcs	r3, r3
 800079e:	425f      	negs	r7, r3
 80007a0:	1bc7      	subs	r7, r0, r7
 80007a2:	023b      	lsls	r3, r7, #8
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_dadd+0xa8>
 80007a6:	e0d0      	b.n	800094a <__aeabi_dadd+0x24a>
 80007a8:	027f      	lsls	r7, r7, #9
 80007aa:	0a7f      	lsrs	r7, r7, #9
 80007ac:	2f00      	cmp	r7, #0
 80007ae:	d100      	bne.n	80007b2 <__aeabi_dadd+0xb2>
 80007b0:	e0ff      	b.n	80009b2 <__aeabi_dadd+0x2b2>
 80007b2:	0038      	movs	r0, r7
 80007b4:	f001 fe3c 	bl	8002430 <__clzsi2>
 80007b8:	0001      	movs	r1, r0
 80007ba:	3908      	subs	r1, #8
 80007bc:	2320      	movs	r3, #32
 80007be:	0022      	movs	r2, r4
 80007c0:	1a5b      	subs	r3, r3, r1
 80007c2:	408f      	lsls	r7, r1
 80007c4:	40da      	lsrs	r2, r3
 80007c6:	408c      	lsls	r4, r1
 80007c8:	4317      	orrs	r7, r2
 80007ca:	42b1      	cmp	r1, r6
 80007cc:	da00      	bge.n	80007d0 <__aeabi_dadd+0xd0>
 80007ce:	e0ff      	b.n	80009d0 <__aeabi_dadd+0x2d0>
 80007d0:	1b89      	subs	r1, r1, r6
 80007d2:	1c4b      	adds	r3, r1, #1
 80007d4:	2b1f      	cmp	r3, #31
 80007d6:	dd00      	ble.n	80007da <__aeabi_dadd+0xda>
 80007d8:	e0a8      	b.n	800092c <__aeabi_dadd+0x22c>
 80007da:	2220      	movs	r2, #32
 80007dc:	0039      	movs	r1, r7
 80007de:	1ad2      	subs	r2, r2, r3
 80007e0:	0020      	movs	r0, r4
 80007e2:	4094      	lsls	r4, r2
 80007e4:	4091      	lsls	r1, r2
 80007e6:	40d8      	lsrs	r0, r3
 80007e8:	1e62      	subs	r2, r4, #1
 80007ea:	4194      	sbcs	r4, r2
 80007ec:	40df      	lsrs	r7, r3
 80007ee:	2600      	movs	r6, #0
 80007f0:	4301      	orrs	r1, r0
 80007f2:	430c      	orrs	r4, r1
 80007f4:	0763      	lsls	r3, r4, #29
 80007f6:	d009      	beq.n	800080c <__aeabi_dadd+0x10c>
 80007f8:	230f      	movs	r3, #15
 80007fa:	4023      	ands	r3, r4
 80007fc:	2b04      	cmp	r3, #4
 80007fe:	d005      	beq.n	800080c <__aeabi_dadd+0x10c>
 8000800:	1d23      	adds	r3, r4, #4
 8000802:	42a3      	cmp	r3, r4
 8000804:	41a4      	sbcs	r4, r4
 8000806:	4264      	negs	r4, r4
 8000808:	193f      	adds	r7, r7, r4
 800080a:	001c      	movs	r4, r3
 800080c:	023b      	lsls	r3, r7, #8
 800080e:	d400      	bmi.n	8000812 <__aeabi_dadd+0x112>
 8000810:	e09e      	b.n	8000950 <__aeabi_dadd+0x250>
 8000812:	4b95      	ldr	r3, [pc, #596]	; (8000a68 <__aeabi_dadd+0x368>)
 8000814:	3601      	adds	r6, #1
 8000816:	429e      	cmp	r6, r3
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x11c>
 800081a:	e0b7      	b.n	800098c <__aeabi_dadd+0x28c>
 800081c:	4a93      	ldr	r2, [pc, #588]	; (8000a6c <__aeabi_dadd+0x36c>)
 800081e:	08e4      	lsrs	r4, r4, #3
 8000820:	4017      	ands	r7, r2
 8000822:	077b      	lsls	r3, r7, #29
 8000824:	0571      	lsls	r1, r6, #21
 8000826:	027f      	lsls	r7, r7, #9
 8000828:	4323      	orrs	r3, r4
 800082a:	0b3f      	lsrs	r7, r7, #12
 800082c:	0d4a      	lsrs	r2, r1, #21
 800082e:	0512      	lsls	r2, r2, #20
 8000830:	433a      	orrs	r2, r7
 8000832:	07ed      	lsls	r5, r5, #31
 8000834:	432a      	orrs	r2, r5
 8000836:	0018      	movs	r0, r3
 8000838:	0011      	movs	r1, r2
 800083a:	bce0      	pop	{r5, r6, r7}
 800083c:	46ba      	mov	sl, r7
 800083e:	46b1      	mov	r9, r6
 8000840:	46a8      	mov	r8, r5
 8000842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000844:	2c00      	cmp	r4, #0
 8000846:	d04b      	beq.n	80008e0 <__aeabi_dadd+0x1e0>
 8000848:	464c      	mov	r4, r9
 800084a:	1ba4      	subs	r4, r4, r6
 800084c:	46a4      	mov	ip, r4
 800084e:	2e00      	cmp	r6, #0
 8000850:	d000      	beq.n	8000854 <__aeabi_dadd+0x154>
 8000852:	e123      	b.n	8000a9c <__aeabi_dadd+0x39c>
 8000854:	0004      	movs	r4, r0
 8000856:	431c      	orrs	r4, r3
 8000858:	d100      	bne.n	800085c <__aeabi_dadd+0x15c>
 800085a:	e1af      	b.n	8000bbc <__aeabi_dadd+0x4bc>
 800085c:	4662      	mov	r2, ip
 800085e:	1e54      	subs	r4, r2, #1
 8000860:	2a01      	cmp	r2, #1
 8000862:	d100      	bne.n	8000866 <__aeabi_dadd+0x166>
 8000864:	e215      	b.n	8000c92 <__aeabi_dadd+0x592>
 8000866:	4d80      	ldr	r5, [pc, #512]	; (8000a68 <__aeabi_dadd+0x368>)
 8000868:	45ac      	cmp	ip, r5
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x16e>
 800086c:	e1c8      	b.n	8000c00 <__aeabi_dadd+0x500>
 800086e:	46a4      	mov	ip, r4
 8000870:	e11b      	b.n	8000aaa <__aeabi_dadd+0x3aa>
 8000872:	464a      	mov	r2, r9
 8000874:	1ab2      	subs	r2, r6, r2
 8000876:	4694      	mov	ip, r2
 8000878:	2a00      	cmp	r2, #0
 800087a:	dc00      	bgt.n	800087e <__aeabi_dadd+0x17e>
 800087c:	e0ac      	b.n	80009d8 <__aeabi_dadd+0x2d8>
 800087e:	464a      	mov	r2, r9
 8000880:	2a00      	cmp	r2, #0
 8000882:	d043      	beq.n	800090c <__aeabi_dadd+0x20c>
 8000884:	4a78      	ldr	r2, [pc, #480]	; (8000a68 <__aeabi_dadd+0x368>)
 8000886:	4296      	cmp	r6, r2
 8000888:	d100      	bne.n	800088c <__aeabi_dadd+0x18c>
 800088a:	e1af      	b.n	8000bec <__aeabi_dadd+0x4ec>
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	003c      	movs	r4, r7
 8000890:	0412      	lsls	r2, r2, #16
 8000892:	4314      	orrs	r4, r2
 8000894:	46a0      	mov	r8, r4
 8000896:	4662      	mov	r2, ip
 8000898:	2a38      	cmp	r2, #56	; 0x38
 800089a:	dc67      	bgt.n	800096c <__aeabi_dadd+0x26c>
 800089c:	2a1f      	cmp	r2, #31
 800089e:	dc00      	bgt.n	80008a2 <__aeabi_dadd+0x1a2>
 80008a0:	e15f      	b.n	8000b62 <__aeabi_dadd+0x462>
 80008a2:	4647      	mov	r7, r8
 80008a4:	3a20      	subs	r2, #32
 80008a6:	40d7      	lsrs	r7, r2
 80008a8:	4662      	mov	r2, ip
 80008aa:	2a20      	cmp	r2, #32
 80008ac:	d005      	beq.n	80008ba <__aeabi_dadd+0x1ba>
 80008ae:	4664      	mov	r4, ip
 80008b0:	2240      	movs	r2, #64	; 0x40
 80008b2:	1b12      	subs	r2, r2, r4
 80008b4:	4644      	mov	r4, r8
 80008b6:	4094      	lsls	r4, r2
 80008b8:	4321      	orrs	r1, r4
 80008ba:	1e4a      	subs	r2, r1, #1
 80008bc:	4191      	sbcs	r1, r2
 80008be:	000c      	movs	r4, r1
 80008c0:	433c      	orrs	r4, r7
 80008c2:	e057      	b.n	8000974 <__aeabi_dadd+0x274>
 80008c4:	003a      	movs	r2, r7
 80008c6:	430a      	orrs	r2, r1
 80008c8:	d100      	bne.n	80008cc <__aeabi_dadd+0x1cc>
 80008ca:	e105      	b.n	8000ad8 <__aeabi_dadd+0x3d8>
 80008cc:	0022      	movs	r2, r4
 80008ce:	3a01      	subs	r2, #1
 80008d0:	2c01      	cmp	r4, #1
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1d6>
 80008d4:	e182      	b.n	8000bdc <__aeabi_dadd+0x4dc>
 80008d6:	4c64      	ldr	r4, [pc, #400]	; (8000a68 <__aeabi_dadd+0x368>)
 80008d8:	45a4      	cmp	ip, r4
 80008da:	d05b      	beq.n	8000994 <__aeabi_dadd+0x294>
 80008dc:	4694      	mov	ip, r2
 80008de:	e741      	b.n	8000764 <__aeabi_dadd+0x64>
 80008e0:	4c63      	ldr	r4, [pc, #396]	; (8000a70 <__aeabi_dadd+0x370>)
 80008e2:	1c77      	adds	r7, r6, #1
 80008e4:	4227      	tst	r7, r4
 80008e6:	d000      	beq.n	80008ea <__aeabi_dadd+0x1ea>
 80008e8:	e0c4      	b.n	8000a74 <__aeabi_dadd+0x374>
 80008ea:	0004      	movs	r4, r0
 80008ec:	431c      	orrs	r4, r3
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	d000      	beq.n	80008f4 <__aeabi_dadd+0x1f4>
 80008f2:	e169      	b.n	8000bc8 <__aeabi_dadd+0x4c8>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x1fa>
 80008f8:	e1bf      	b.n	8000c7a <__aeabi_dadd+0x57a>
 80008fa:	4644      	mov	r4, r8
 80008fc:	430c      	orrs	r4, r1
 80008fe:	d000      	beq.n	8000902 <__aeabi_dadd+0x202>
 8000900:	e1d0      	b.n	8000ca4 <__aeabi_dadd+0x5a4>
 8000902:	0742      	lsls	r2, r0, #29
 8000904:	08db      	lsrs	r3, r3, #3
 8000906:	4313      	orrs	r3, r2
 8000908:	08c0      	lsrs	r0, r0, #3
 800090a:	e029      	b.n	8000960 <__aeabi_dadd+0x260>
 800090c:	003a      	movs	r2, r7
 800090e:	430a      	orrs	r2, r1
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x214>
 8000912:	e170      	b.n	8000bf6 <__aeabi_dadd+0x4f6>
 8000914:	4662      	mov	r2, ip
 8000916:	4664      	mov	r4, ip
 8000918:	3a01      	subs	r2, #1
 800091a:	2c01      	cmp	r4, #1
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x220>
 800091e:	e0e0      	b.n	8000ae2 <__aeabi_dadd+0x3e2>
 8000920:	4c51      	ldr	r4, [pc, #324]	; (8000a68 <__aeabi_dadd+0x368>)
 8000922:	45a4      	cmp	ip, r4
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x228>
 8000926:	e161      	b.n	8000bec <__aeabi_dadd+0x4ec>
 8000928:	4694      	mov	ip, r2
 800092a:	e7b4      	b.n	8000896 <__aeabi_dadd+0x196>
 800092c:	003a      	movs	r2, r7
 800092e:	391f      	subs	r1, #31
 8000930:	40ca      	lsrs	r2, r1
 8000932:	0011      	movs	r1, r2
 8000934:	2b20      	cmp	r3, #32
 8000936:	d003      	beq.n	8000940 <__aeabi_dadd+0x240>
 8000938:	2240      	movs	r2, #64	; 0x40
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	409f      	lsls	r7, r3
 800093e:	433c      	orrs	r4, r7
 8000940:	1e63      	subs	r3, r4, #1
 8000942:	419c      	sbcs	r4, r3
 8000944:	2700      	movs	r7, #0
 8000946:	2600      	movs	r6, #0
 8000948:	430c      	orrs	r4, r1
 800094a:	0763      	lsls	r3, r4, #29
 800094c:	d000      	beq.n	8000950 <__aeabi_dadd+0x250>
 800094e:	e753      	b.n	80007f8 <__aeabi_dadd+0xf8>
 8000950:	46b4      	mov	ip, r6
 8000952:	08e4      	lsrs	r4, r4, #3
 8000954:	077b      	lsls	r3, r7, #29
 8000956:	4323      	orrs	r3, r4
 8000958:	08f8      	lsrs	r0, r7, #3
 800095a:	4a43      	ldr	r2, [pc, #268]	; (8000a68 <__aeabi_dadd+0x368>)
 800095c:	4594      	cmp	ip, r2
 800095e:	d01d      	beq.n	800099c <__aeabi_dadd+0x29c>
 8000960:	4662      	mov	r2, ip
 8000962:	0307      	lsls	r7, r0, #12
 8000964:	0552      	lsls	r2, r2, #21
 8000966:	0b3f      	lsrs	r7, r7, #12
 8000968:	0d52      	lsrs	r2, r2, #21
 800096a:	e760      	b.n	800082e <__aeabi_dadd+0x12e>
 800096c:	4644      	mov	r4, r8
 800096e:	430c      	orrs	r4, r1
 8000970:	1e62      	subs	r2, r4, #1
 8000972:	4194      	sbcs	r4, r2
 8000974:	18e4      	adds	r4, r4, r3
 8000976:	429c      	cmp	r4, r3
 8000978:	419b      	sbcs	r3, r3
 800097a:	425f      	negs	r7, r3
 800097c:	183f      	adds	r7, r7, r0
 800097e:	023b      	lsls	r3, r7, #8
 8000980:	d5e3      	bpl.n	800094a <__aeabi_dadd+0x24a>
 8000982:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <__aeabi_dadd+0x368>)
 8000984:	3601      	adds	r6, #1
 8000986:	429e      	cmp	r6, r3
 8000988:	d000      	beq.n	800098c <__aeabi_dadd+0x28c>
 800098a:	e0b5      	b.n	8000af8 <__aeabi_dadd+0x3f8>
 800098c:	0032      	movs	r2, r6
 800098e:	2700      	movs	r7, #0
 8000990:	2300      	movs	r3, #0
 8000992:	e74c      	b.n	800082e <__aeabi_dadd+0x12e>
 8000994:	0742      	lsls	r2, r0, #29
 8000996:	08db      	lsrs	r3, r3, #3
 8000998:	4313      	orrs	r3, r2
 800099a:	08c0      	lsrs	r0, r0, #3
 800099c:	001a      	movs	r2, r3
 800099e:	4302      	orrs	r2, r0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_dadd+0x2a4>
 80009a2:	e1e1      	b.n	8000d68 <__aeabi_dadd+0x668>
 80009a4:	2780      	movs	r7, #128	; 0x80
 80009a6:	033f      	lsls	r7, r7, #12
 80009a8:	4307      	orrs	r7, r0
 80009aa:	033f      	lsls	r7, r7, #12
 80009ac:	4a2e      	ldr	r2, [pc, #184]	; (8000a68 <__aeabi_dadd+0x368>)
 80009ae:	0b3f      	lsrs	r7, r7, #12
 80009b0:	e73d      	b.n	800082e <__aeabi_dadd+0x12e>
 80009b2:	0020      	movs	r0, r4
 80009b4:	f001 fd3c 	bl	8002430 <__clzsi2>
 80009b8:	0001      	movs	r1, r0
 80009ba:	3118      	adds	r1, #24
 80009bc:	291f      	cmp	r1, #31
 80009be:	dc00      	bgt.n	80009c2 <__aeabi_dadd+0x2c2>
 80009c0:	e6fc      	b.n	80007bc <__aeabi_dadd+0xbc>
 80009c2:	3808      	subs	r0, #8
 80009c4:	4084      	lsls	r4, r0
 80009c6:	0027      	movs	r7, r4
 80009c8:	2400      	movs	r4, #0
 80009ca:	42b1      	cmp	r1, r6
 80009cc:	db00      	blt.n	80009d0 <__aeabi_dadd+0x2d0>
 80009ce:	e6ff      	b.n	80007d0 <__aeabi_dadd+0xd0>
 80009d0:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <__aeabi_dadd+0x36c>)
 80009d2:	1a76      	subs	r6, r6, r1
 80009d4:	4017      	ands	r7, r2
 80009d6:	e70d      	b.n	80007f4 <__aeabi_dadd+0xf4>
 80009d8:	2a00      	cmp	r2, #0
 80009da:	d02f      	beq.n	8000a3c <__aeabi_dadd+0x33c>
 80009dc:	464a      	mov	r2, r9
 80009de:	1b92      	subs	r2, r2, r6
 80009e0:	4694      	mov	ip, r2
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d100      	bne.n	80009e8 <__aeabi_dadd+0x2e8>
 80009e6:	e0ad      	b.n	8000b44 <__aeabi_dadd+0x444>
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <__aeabi_dadd+0x368>)
 80009ea:	4591      	cmp	r9, r2
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x2f0>
 80009ee:	e10f      	b.n	8000c10 <__aeabi_dadd+0x510>
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	0412      	lsls	r2, r2, #16
 80009f4:	4310      	orrs	r0, r2
 80009f6:	4662      	mov	r2, ip
 80009f8:	2a38      	cmp	r2, #56	; 0x38
 80009fa:	dd00      	ble.n	80009fe <__aeabi_dadd+0x2fe>
 80009fc:	e10f      	b.n	8000c1e <__aeabi_dadd+0x51e>
 80009fe:	2a1f      	cmp	r2, #31
 8000a00:	dd00      	ble.n	8000a04 <__aeabi_dadd+0x304>
 8000a02:	e180      	b.n	8000d06 <__aeabi_dadd+0x606>
 8000a04:	4664      	mov	r4, ip
 8000a06:	2220      	movs	r2, #32
 8000a08:	001e      	movs	r6, r3
 8000a0a:	1b12      	subs	r2, r2, r4
 8000a0c:	4667      	mov	r7, ip
 8000a0e:	0004      	movs	r4, r0
 8000a10:	4093      	lsls	r3, r2
 8000a12:	4094      	lsls	r4, r2
 8000a14:	40fe      	lsrs	r6, r7
 8000a16:	1e5a      	subs	r2, r3, #1
 8000a18:	4193      	sbcs	r3, r2
 8000a1a:	40f8      	lsrs	r0, r7
 8000a1c:	4334      	orrs	r4, r6
 8000a1e:	431c      	orrs	r4, r3
 8000a20:	4480      	add	r8, r0
 8000a22:	1864      	adds	r4, r4, r1
 8000a24:	428c      	cmp	r4, r1
 8000a26:	41bf      	sbcs	r7, r7
 8000a28:	427f      	negs	r7, r7
 8000a2a:	464e      	mov	r6, r9
 8000a2c:	4447      	add	r7, r8
 8000a2e:	e7a6      	b.n	800097e <__aeabi_dadd+0x27e>
 8000a30:	4642      	mov	r2, r8
 8000a32:	430a      	orrs	r2, r1
 8000a34:	0011      	movs	r1, r2
 8000a36:	1e4a      	subs	r2, r1, #1
 8000a38:	4191      	sbcs	r1, r2
 8000a3a:	e6ad      	b.n	8000798 <__aeabi_dadd+0x98>
 8000a3c:	4c0c      	ldr	r4, [pc, #48]	; (8000a70 <__aeabi_dadd+0x370>)
 8000a3e:	1c72      	adds	r2, r6, #1
 8000a40:	4222      	tst	r2, r4
 8000a42:	d000      	beq.n	8000a46 <__aeabi_dadd+0x346>
 8000a44:	e0a1      	b.n	8000b8a <__aeabi_dadd+0x48a>
 8000a46:	0002      	movs	r2, r0
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d000      	beq.n	8000a50 <__aeabi_dadd+0x350>
 8000a4e:	e0fa      	b.n	8000c46 <__aeabi_dadd+0x546>
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	d100      	bne.n	8000a56 <__aeabi_dadd+0x356>
 8000a54:	e145      	b.n	8000ce2 <__aeabi_dadd+0x5e2>
 8000a56:	003a      	movs	r2, r7
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	d000      	beq.n	8000a5e <__aeabi_dadd+0x35e>
 8000a5c:	e146      	b.n	8000cec <__aeabi_dadd+0x5ec>
 8000a5e:	0742      	lsls	r2, r0, #29
 8000a60:	08db      	lsrs	r3, r3, #3
 8000a62:	4313      	orrs	r3, r2
 8000a64:	08c0      	lsrs	r0, r0, #3
 8000a66:	e77b      	b.n	8000960 <__aeabi_dadd+0x260>
 8000a68:	000007ff 	.word	0x000007ff
 8000a6c:	ff7fffff 	.word	0xff7fffff
 8000a70:	000007fe 	.word	0x000007fe
 8000a74:	4647      	mov	r7, r8
 8000a76:	1a5c      	subs	r4, r3, r1
 8000a78:	1bc2      	subs	r2, r0, r7
 8000a7a:	42a3      	cmp	r3, r4
 8000a7c:	41bf      	sbcs	r7, r7
 8000a7e:	427f      	negs	r7, r7
 8000a80:	46b9      	mov	r9, r7
 8000a82:	0017      	movs	r7, r2
 8000a84:	464a      	mov	r2, r9
 8000a86:	1abf      	subs	r7, r7, r2
 8000a88:	023a      	lsls	r2, r7, #8
 8000a8a:	d500      	bpl.n	8000a8e <__aeabi_dadd+0x38e>
 8000a8c:	e08d      	b.n	8000baa <__aeabi_dadd+0x4aa>
 8000a8e:	0023      	movs	r3, r4
 8000a90:	433b      	orrs	r3, r7
 8000a92:	d000      	beq.n	8000a96 <__aeabi_dadd+0x396>
 8000a94:	e68a      	b.n	80007ac <__aeabi_dadd+0xac>
 8000a96:	2000      	movs	r0, #0
 8000a98:	2500      	movs	r5, #0
 8000a9a:	e761      	b.n	8000960 <__aeabi_dadd+0x260>
 8000a9c:	4cb4      	ldr	r4, [pc, #720]	; (8000d70 <__aeabi_dadd+0x670>)
 8000a9e:	45a1      	cmp	r9, r4
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dadd+0x3a4>
 8000aa2:	e0ad      	b.n	8000c00 <__aeabi_dadd+0x500>
 8000aa4:	2480      	movs	r4, #128	; 0x80
 8000aa6:	0424      	lsls	r4, r4, #16
 8000aa8:	4320      	orrs	r0, r4
 8000aaa:	4664      	mov	r4, ip
 8000aac:	2c38      	cmp	r4, #56	; 0x38
 8000aae:	dc3d      	bgt.n	8000b2c <__aeabi_dadd+0x42c>
 8000ab0:	4662      	mov	r2, ip
 8000ab2:	2c1f      	cmp	r4, #31
 8000ab4:	dd00      	ble.n	8000ab8 <__aeabi_dadd+0x3b8>
 8000ab6:	e0b7      	b.n	8000c28 <__aeabi_dadd+0x528>
 8000ab8:	2520      	movs	r5, #32
 8000aba:	001e      	movs	r6, r3
 8000abc:	1b2d      	subs	r5, r5, r4
 8000abe:	0004      	movs	r4, r0
 8000ac0:	40ab      	lsls	r3, r5
 8000ac2:	40ac      	lsls	r4, r5
 8000ac4:	40d6      	lsrs	r6, r2
 8000ac6:	40d0      	lsrs	r0, r2
 8000ac8:	4642      	mov	r2, r8
 8000aca:	1e5d      	subs	r5, r3, #1
 8000acc:	41ab      	sbcs	r3, r5
 8000ace:	4334      	orrs	r4, r6
 8000ad0:	1a12      	subs	r2, r2, r0
 8000ad2:	4690      	mov	r8, r2
 8000ad4:	4323      	orrs	r3, r4
 8000ad6:	e02c      	b.n	8000b32 <__aeabi_dadd+0x432>
 8000ad8:	0742      	lsls	r2, r0, #29
 8000ada:	08db      	lsrs	r3, r3, #3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	08c0      	lsrs	r0, r0, #3
 8000ae0:	e73b      	b.n	800095a <__aeabi_dadd+0x25a>
 8000ae2:	185c      	adds	r4, r3, r1
 8000ae4:	429c      	cmp	r4, r3
 8000ae6:	419b      	sbcs	r3, r3
 8000ae8:	4440      	add	r0, r8
 8000aea:	425b      	negs	r3, r3
 8000aec:	18c7      	adds	r7, r0, r3
 8000aee:	2601      	movs	r6, #1
 8000af0:	023b      	lsls	r3, r7, #8
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_dadd+0x3f6>
 8000af4:	e729      	b.n	800094a <__aeabi_dadd+0x24a>
 8000af6:	2602      	movs	r6, #2
 8000af8:	4a9e      	ldr	r2, [pc, #632]	; (8000d74 <__aeabi_dadd+0x674>)
 8000afa:	0863      	lsrs	r3, r4, #1
 8000afc:	4017      	ands	r7, r2
 8000afe:	2201      	movs	r2, #1
 8000b00:	4014      	ands	r4, r2
 8000b02:	431c      	orrs	r4, r3
 8000b04:	07fb      	lsls	r3, r7, #31
 8000b06:	431c      	orrs	r4, r3
 8000b08:	087f      	lsrs	r7, r7, #1
 8000b0a:	e673      	b.n	80007f4 <__aeabi_dadd+0xf4>
 8000b0c:	4644      	mov	r4, r8
 8000b0e:	3a20      	subs	r2, #32
 8000b10:	40d4      	lsrs	r4, r2
 8000b12:	4662      	mov	r2, ip
 8000b14:	2a20      	cmp	r2, #32
 8000b16:	d005      	beq.n	8000b24 <__aeabi_dadd+0x424>
 8000b18:	4667      	mov	r7, ip
 8000b1a:	2240      	movs	r2, #64	; 0x40
 8000b1c:	1bd2      	subs	r2, r2, r7
 8000b1e:	4647      	mov	r7, r8
 8000b20:	4097      	lsls	r7, r2
 8000b22:	4339      	orrs	r1, r7
 8000b24:	1e4a      	subs	r2, r1, #1
 8000b26:	4191      	sbcs	r1, r2
 8000b28:	4321      	orrs	r1, r4
 8000b2a:	e635      	b.n	8000798 <__aeabi_dadd+0x98>
 8000b2c:	4303      	orrs	r3, r0
 8000b2e:	1e58      	subs	r0, r3, #1
 8000b30:	4183      	sbcs	r3, r0
 8000b32:	1acc      	subs	r4, r1, r3
 8000b34:	42a1      	cmp	r1, r4
 8000b36:	41bf      	sbcs	r7, r7
 8000b38:	4643      	mov	r3, r8
 8000b3a:	427f      	negs	r7, r7
 8000b3c:	4655      	mov	r5, sl
 8000b3e:	464e      	mov	r6, r9
 8000b40:	1bdf      	subs	r7, r3, r7
 8000b42:	e62e      	b.n	80007a2 <__aeabi_dadd+0xa2>
 8000b44:	0002      	movs	r2, r0
 8000b46:	431a      	orrs	r2, r3
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x44c>
 8000b4a:	e0bd      	b.n	8000cc8 <__aeabi_dadd+0x5c8>
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	4664      	mov	r4, ip
 8000b50:	3a01      	subs	r2, #1
 8000b52:	2c01      	cmp	r4, #1
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dadd+0x458>
 8000b56:	e0e5      	b.n	8000d24 <__aeabi_dadd+0x624>
 8000b58:	4c85      	ldr	r4, [pc, #532]	; (8000d70 <__aeabi_dadd+0x670>)
 8000b5a:	45a4      	cmp	ip, r4
 8000b5c:	d058      	beq.n	8000c10 <__aeabi_dadd+0x510>
 8000b5e:	4694      	mov	ip, r2
 8000b60:	e749      	b.n	80009f6 <__aeabi_dadd+0x2f6>
 8000b62:	4664      	mov	r4, ip
 8000b64:	2220      	movs	r2, #32
 8000b66:	1b12      	subs	r2, r2, r4
 8000b68:	4644      	mov	r4, r8
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	000f      	movs	r7, r1
 8000b6e:	46a1      	mov	r9, r4
 8000b70:	4664      	mov	r4, ip
 8000b72:	4091      	lsls	r1, r2
 8000b74:	40e7      	lsrs	r7, r4
 8000b76:	464c      	mov	r4, r9
 8000b78:	1e4a      	subs	r2, r1, #1
 8000b7a:	4191      	sbcs	r1, r2
 8000b7c:	433c      	orrs	r4, r7
 8000b7e:	4642      	mov	r2, r8
 8000b80:	430c      	orrs	r4, r1
 8000b82:	4661      	mov	r1, ip
 8000b84:	40ca      	lsrs	r2, r1
 8000b86:	1880      	adds	r0, r0, r2
 8000b88:	e6f4      	b.n	8000974 <__aeabi_dadd+0x274>
 8000b8a:	4c79      	ldr	r4, [pc, #484]	; (8000d70 <__aeabi_dadd+0x670>)
 8000b8c:	42a2      	cmp	r2, r4
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_dadd+0x492>
 8000b90:	e6fd      	b.n	800098e <__aeabi_dadd+0x28e>
 8000b92:	1859      	adds	r1, r3, r1
 8000b94:	4299      	cmp	r1, r3
 8000b96:	419b      	sbcs	r3, r3
 8000b98:	4440      	add	r0, r8
 8000b9a:	425f      	negs	r7, r3
 8000b9c:	19c7      	adds	r7, r0, r7
 8000b9e:	07fc      	lsls	r4, r7, #31
 8000ba0:	0849      	lsrs	r1, r1, #1
 8000ba2:	0016      	movs	r6, r2
 8000ba4:	430c      	orrs	r4, r1
 8000ba6:	087f      	lsrs	r7, r7, #1
 8000ba8:	e6cf      	b.n	800094a <__aeabi_dadd+0x24a>
 8000baa:	1acc      	subs	r4, r1, r3
 8000bac:	42a1      	cmp	r1, r4
 8000bae:	41bf      	sbcs	r7, r7
 8000bb0:	4643      	mov	r3, r8
 8000bb2:	427f      	negs	r7, r7
 8000bb4:	1a18      	subs	r0, r3, r0
 8000bb6:	4655      	mov	r5, sl
 8000bb8:	1bc7      	subs	r7, r0, r7
 8000bba:	e5f7      	b.n	80007ac <__aeabi_dadd+0xac>
 8000bbc:	08c9      	lsrs	r1, r1, #3
 8000bbe:	077b      	lsls	r3, r7, #29
 8000bc0:	4655      	mov	r5, sl
 8000bc2:	430b      	orrs	r3, r1
 8000bc4:	08f8      	lsrs	r0, r7, #3
 8000bc6:	e6c8      	b.n	800095a <__aeabi_dadd+0x25a>
 8000bc8:	2c00      	cmp	r4, #0
 8000bca:	d000      	beq.n	8000bce <__aeabi_dadd+0x4ce>
 8000bcc:	e081      	b.n	8000cd2 <__aeabi_dadd+0x5d2>
 8000bce:	4643      	mov	r3, r8
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	d115      	bne.n	8000c00 <__aeabi_dadd+0x500>
 8000bd4:	2080      	movs	r0, #128	; 0x80
 8000bd6:	2500      	movs	r5, #0
 8000bd8:	0300      	lsls	r0, r0, #12
 8000bda:	e6e3      	b.n	80009a4 <__aeabi_dadd+0x2a4>
 8000bdc:	1a5c      	subs	r4, r3, r1
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	419b      	sbcs	r3, r3
 8000be2:	1bc7      	subs	r7, r0, r7
 8000be4:	425b      	negs	r3, r3
 8000be6:	2601      	movs	r6, #1
 8000be8:	1aff      	subs	r7, r7, r3
 8000bea:	e5da      	b.n	80007a2 <__aeabi_dadd+0xa2>
 8000bec:	0742      	lsls	r2, r0, #29
 8000bee:	08db      	lsrs	r3, r3, #3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	08c0      	lsrs	r0, r0, #3
 8000bf4:	e6d2      	b.n	800099c <__aeabi_dadd+0x29c>
 8000bf6:	0742      	lsls	r2, r0, #29
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	08c0      	lsrs	r0, r0, #3
 8000bfe:	e6ac      	b.n	800095a <__aeabi_dadd+0x25a>
 8000c00:	4643      	mov	r3, r8
 8000c02:	4642      	mov	r2, r8
 8000c04:	08c9      	lsrs	r1, r1, #3
 8000c06:	075b      	lsls	r3, r3, #29
 8000c08:	4655      	mov	r5, sl
 8000c0a:	430b      	orrs	r3, r1
 8000c0c:	08d0      	lsrs	r0, r2, #3
 8000c0e:	e6c5      	b.n	800099c <__aeabi_dadd+0x29c>
 8000c10:	4643      	mov	r3, r8
 8000c12:	4642      	mov	r2, r8
 8000c14:	075b      	lsls	r3, r3, #29
 8000c16:	08c9      	lsrs	r1, r1, #3
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	08d0      	lsrs	r0, r2, #3
 8000c1c:	e6be      	b.n	800099c <__aeabi_dadd+0x29c>
 8000c1e:	4303      	orrs	r3, r0
 8000c20:	001c      	movs	r4, r3
 8000c22:	1e63      	subs	r3, r4, #1
 8000c24:	419c      	sbcs	r4, r3
 8000c26:	e6fc      	b.n	8000a22 <__aeabi_dadd+0x322>
 8000c28:	0002      	movs	r2, r0
 8000c2a:	3c20      	subs	r4, #32
 8000c2c:	40e2      	lsrs	r2, r4
 8000c2e:	0014      	movs	r4, r2
 8000c30:	4662      	mov	r2, ip
 8000c32:	2a20      	cmp	r2, #32
 8000c34:	d003      	beq.n	8000c3e <__aeabi_dadd+0x53e>
 8000c36:	2540      	movs	r5, #64	; 0x40
 8000c38:	1aad      	subs	r5, r5, r2
 8000c3a:	40a8      	lsls	r0, r5
 8000c3c:	4303      	orrs	r3, r0
 8000c3e:	1e58      	subs	r0, r3, #1
 8000c40:	4183      	sbcs	r3, r0
 8000c42:	4323      	orrs	r3, r4
 8000c44:	e775      	b.n	8000b32 <__aeabi_dadd+0x432>
 8000c46:	2a00      	cmp	r2, #0
 8000c48:	d0e2      	beq.n	8000c10 <__aeabi_dadd+0x510>
 8000c4a:	003a      	movs	r2, r7
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	d0cd      	beq.n	8000bec <__aeabi_dadd+0x4ec>
 8000c50:	0742      	lsls	r2, r0, #29
 8000c52:	08db      	lsrs	r3, r3, #3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	2280      	movs	r2, #128	; 0x80
 8000c58:	08c0      	lsrs	r0, r0, #3
 8000c5a:	0312      	lsls	r2, r2, #12
 8000c5c:	4210      	tst	r0, r2
 8000c5e:	d006      	beq.n	8000c6e <__aeabi_dadd+0x56e>
 8000c60:	08fc      	lsrs	r4, r7, #3
 8000c62:	4214      	tst	r4, r2
 8000c64:	d103      	bne.n	8000c6e <__aeabi_dadd+0x56e>
 8000c66:	0020      	movs	r0, r4
 8000c68:	08cb      	lsrs	r3, r1, #3
 8000c6a:	077a      	lsls	r2, r7, #29
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	0f5a      	lsrs	r2, r3, #29
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	0752      	lsls	r2, r2, #29
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	e690      	b.n	800099c <__aeabi_dadd+0x29c>
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	430b      	orrs	r3, r1
 8000c7e:	d100      	bne.n	8000c82 <__aeabi_dadd+0x582>
 8000c80:	e709      	b.n	8000a96 <__aeabi_dadd+0x396>
 8000c82:	4643      	mov	r3, r8
 8000c84:	4642      	mov	r2, r8
 8000c86:	08c9      	lsrs	r1, r1, #3
 8000c88:	075b      	lsls	r3, r3, #29
 8000c8a:	4655      	mov	r5, sl
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	08d0      	lsrs	r0, r2, #3
 8000c90:	e666      	b.n	8000960 <__aeabi_dadd+0x260>
 8000c92:	1acc      	subs	r4, r1, r3
 8000c94:	42a1      	cmp	r1, r4
 8000c96:	4189      	sbcs	r1, r1
 8000c98:	1a3f      	subs	r7, r7, r0
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	4655      	mov	r5, sl
 8000c9e:	2601      	movs	r6, #1
 8000ca0:	1a7f      	subs	r7, r7, r1
 8000ca2:	e57e      	b.n	80007a2 <__aeabi_dadd+0xa2>
 8000ca4:	4642      	mov	r2, r8
 8000ca6:	1a5c      	subs	r4, r3, r1
 8000ca8:	1a87      	subs	r7, r0, r2
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	4192      	sbcs	r2, r2
 8000cae:	4252      	negs	r2, r2
 8000cb0:	1abf      	subs	r7, r7, r2
 8000cb2:	023a      	lsls	r2, r7, #8
 8000cb4:	d53d      	bpl.n	8000d32 <__aeabi_dadd+0x632>
 8000cb6:	1acc      	subs	r4, r1, r3
 8000cb8:	42a1      	cmp	r1, r4
 8000cba:	4189      	sbcs	r1, r1
 8000cbc:	4643      	mov	r3, r8
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	1a1f      	subs	r7, r3, r0
 8000cc2:	4655      	mov	r5, sl
 8000cc4:	1a7f      	subs	r7, r7, r1
 8000cc6:	e595      	b.n	80007f4 <__aeabi_dadd+0xf4>
 8000cc8:	077b      	lsls	r3, r7, #29
 8000cca:	08c9      	lsrs	r1, r1, #3
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	08f8      	lsrs	r0, r7, #3
 8000cd0:	e643      	b.n	800095a <__aeabi_dadd+0x25a>
 8000cd2:	4644      	mov	r4, r8
 8000cd4:	08db      	lsrs	r3, r3, #3
 8000cd6:	430c      	orrs	r4, r1
 8000cd8:	d130      	bne.n	8000d3c <__aeabi_dadd+0x63c>
 8000cda:	0742      	lsls	r2, r0, #29
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	08c0      	lsrs	r0, r0, #3
 8000ce0:	e65c      	b.n	800099c <__aeabi_dadd+0x29c>
 8000ce2:	077b      	lsls	r3, r7, #29
 8000ce4:	08c9      	lsrs	r1, r1, #3
 8000ce6:	430b      	orrs	r3, r1
 8000ce8:	08f8      	lsrs	r0, r7, #3
 8000cea:	e639      	b.n	8000960 <__aeabi_dadd+0x260>
 8000cec:	185c      	adds	r4, r3, r1
 8000cee:	429c      	cmp	r4, r3
 8000cf0:	419b      	sbcs	r3, r3
 8000cf2:	4440      	add	r0, r8
 8000cf4:	425b      	negs	r3, r3
 8000cf6:	18c7      	adds	r7, r0, r3
 8000cf8:	023b      	lsls	r3, r7, #8
 8000cfa:	d400      	bmi.n	8000cfe <__aeabi_dadd+0x5fe>
 8000cfc:	e625      	b.n	800094a <__aeabi_dadd+0x24a>
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <__aeabi_dadd+0x674>)
 8000d00:	2601      	movs	r6, #1
 8000d02:	401f      	ands	r7, r3
 8000d04:	e621      	b.n	800094a <__aeabi_dadd+0x24a>
 8000d06:	0004      	movs	r4, r0
 8000d08:	3a20      	subs	r2, #32
 8000d0a:	40d4      	lsrs	r4, r2
 8000d0c:	4662      	mov	r2, ip
 8000d0e:	2a20      	cmp	r2, #32
 8000d10:	d004      	beq.n	8000d1c <__aeabi_dadd+0x61c>
 8000d12:	2240      	movs	r2, #64	; 0x40
 8000d14:	4666      	mov	r6, ip
 8000d16:	1b92      	subs	r2, r2, r6
 8000d18:	4090      	lsls	r0, r2
 8000d1a:	4303      	orrs	r3, r0
 8000d1c:	1e5a      	subs	r2, r3, #1
 8000d1e:	4193      	sbcs	r3, r2
 8000d20:	431c      	orrs	r4, r3
 8000d22:	e67e      	b.n	8000a22 <__aeabi_dadd+0x322>
 8000d24:	185c      	adds	r4, r3, r1
 8000d26:	428c      	cmp	r4, r1
 8000d28:	4189      	sbcs	r1, r1
 8000d2a:	4440      	add	r0, r8
 8000d2c:	4249      	negs	r1, r1
 8000d2e:	1847      	adds	r7, r0, r1
 8000d30:	e6dd      	b.n	8000aee <__aeabi_dadd+0x3ee>
 8000d32:	0023      	movs	r3, r4
 8000d34:	433b      	orrs	r3, r7
 8000d36:	d100      	bne.n	8000d3a <__aeabi_dadd+0x63a>
 8000d38:	e6ad      	b.n	8000a96 <__aeabi_dadd+0x396>
 8000d3a:	e606      	b.n	800094a <__aeabi_dadd+0x24a>
 8000d3c:	0744      	lsls	r4, r0, #29
 8000d3e:	4323      	orrs	r3, r4
 8000d40:	2480      	movs	r4, #128	; 0x80
 8000d42:	08c0      	lsrs	r0, r0, #3
 8000d44:	0324      	lsls	r4, r4, #12
 8000d46:	4220      	tst	r0, r4
 8000d48:	d008      	beq.n	8000d5c <__aeabi_dadd+0x65c>
 8000d4a:	4642      	mov	r2, r8
 8000d4c:	08d6      	lsrs	r6, r2, #3
 8000d4e:	4226      	tst	r6, r4
 8000d50:	d104      	bne.n	8000d5c <__aeabi_dadd+0x65c>
 8000d52:	4655      	mov	r5, sl
 8000d54:	0030      	movs	r0, r6
 8000d56:	08cb      	lsrs	r3, r1, #3
 8000d58:	0751      	lsls	r1, r2, #29
 8000d5a:	430b      	orrs	r3, r1
 8000d5c:	0f5a      	lsrs	r2, r3, #29
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	08db      	lsrs	r3, r3, #3
 8000d62:	0752      	lsls	r2, r2, #29
 8000d64:	4313      	orrs	r3, r2
 8000d66:	e619      	b.n	800099c <__aeabi_dadd+0x29c>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	4a01      	ldr	r2, [pc, #4]	; (8000d70 <__aeabi_dadd+0x670>)
 8000d6c:	001f      	movs	r7, r3
 8000d6e:	e55e      	b.n	800082e <__aeabi_dadd+0x12e>
 8000d70:	000007ff 	.word	0x000007ff
 8000d74:	ff7fffff 	.word	0xff7fffff

08000d78 <__aeabi_ddiv>:
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	4657      	mov	r7, sl
 8000d7c:	464e      	mov	r6, r9
 8000d7e:	4645      	mov	r5, r8
 8000d80:	46de      	mov	lr, fp
 8000d82:	b5e0      	push	{r5, r6, r7, lr}
 8000d84:	4681      	mov	r9, r0
 8000d86:	0005      	movs	r5, r0
 8000d88:	030c      	lsls	r4, r1, #12
 8000d8a:	0048      	lsls	r0, r1, #1
 8000d8c:	4692      	mov	sl, r2
 8000d8e:	001f      	movs	r7, r3
 8000d90:	b085      	sub	sp, #20
 8000d92:	0b24      	lsrs	r4, r4, #12
 8000d94:	0d40      	lsrs	r0, r0, #21
 8000d96:	0fce      	lsrs	r6, r1, #31
 8000d98:	2800      	cmp	r0, #0
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_ddiv+0x26>
 8000d9c:	e156      	b.n	800104c <__aeabi_ddiv+0x2d4>
 8000d9e:	4bd4      	ldr	r3, [pc, #848]	; (80010f0 <__aeabi_ddiv+0x378>)
 8000da0:	4298      	cmp	r0, r3
 8000da2:	d100      	bne.n	8000da6 <__aeabi_ddiv+0x2e>
 8000da4:	e172      	b.n	800108c <__aeabi_ddiv+0x314>
 8000da6:	0f6b      	lsrs	r3, r5, #29
 8000da8:	00e4      	lsls	r4, r4, #3
 8000daa:	431c      	orrs	r4, r3
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	041b      	lsls	r3, r3, #16
 8000db0:	4323      	orrs	r3, r4
 8000db2:	4698      	mov	r8, r3
 8000db4:	4bcf      	ldr	r3, [pc, #828]	; (80010f4 <__aeabi_ddiv+0x37c>)
 8000db6:	00ed      	lsls	r5, r5, #3
 8000db8:	469b      	mov	fp, r3
 8000dba:	2300      	movs	r3, #0
 8000dbc:	4699      	mov	r9, r3
 8000dbe:	4483      	add	fp, r0
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	033c      	lsls	r4, r7, #12
 8000dc4:	007b      	lsls	r3, r7, #1
 8000dc6:	4650      	mov	r0, sl
 8000dc8:	0b24      	lsrs	r4, r4, #12
 8000dca:	0d5b      	lsrs	r3, r3, #21
 8000dcc:	0fff      	lsrs	r7, r7, #31
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_ddiv+0x5c>
 8000dd2:	e11f      	b.n	8001014 <__aeabi_ddiv+0x29c>
 8000dd4:	4ac6      	ldr	r2, [pc, #792]	; (80010f0 <__aeabi_ddiv+0x378>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_ddiv+0x64>
 8000dda:	e162      	b.n	80010a2 <__aeabi_ddiv+0x32a>
 8000ddc:	49c5      	ldr	r1, [pc, #788]	; (80010f4 <__aeabi_ddiv+0x37c>)
 8000dde:	0f42      	lsrs	r2, r0, #29
 8000de0:	468c      	mov	ip, r1
 8000de2:	00e4      	lsls	r4, r4, #3
 8000de4:	4659      	mov	r1, fp
 8000de6:	4314      	orrs	r4, r2
 8000de8:	2280      	movs	r2, #128	; 0x80
 8000dea:	4463      	add	r3, ip
 8000dec:	0412      	lsls	r2, r2, #16
 8000dee:	1acb      	subs	r3, r1, r3
 8000df0:	4314      	orrs	r4, r2
 8000df2:	469b      	mov	fp, r3
 8000df4:	00c2      	lsls	r2, r0, #3
 8000df6:	2000      	movs	r0, #0
 8000df8:	0033      	movs	r3, r6
 8000dfa:	407b      	eors	r3, r7
 8000dfc:	469a      	mov	sl, r3
 8000dfe:	464b      	mov	r3, r9
 8000e00:	2b0f      	cmp	r3, #15
 8000e02:	d827      	bhi.n	8000e54 <__aeabi_ddiv+0xdc>
 8000e04:	49bc      	ldr	r1, [pc, #752]	; (80010f8 <__aeabi_ddiv+0x380>)
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	58cb      	ldr	r3, [r1, r3]
 8000e0a:	469f      	mov	pc, r3
 8000e0c:	46b2      	mov	sl, r6
 8000e0e:	9b00      	ldr	r3, [sp, #0]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d016      	beq.n	8000e42 <__aeabi_ddiv+0xca>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d100      	bne.n	8000e1a <__aeabi_ddiv+0xa2>
 8000e18:	e28e      	b.n	8001338 <__aeabi_ddiv+0x5c0>
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d000      	beq.n	8000e20 <__aeabi_ddiv+0xa8>
 8000e1e:	e0d9      	b.n	8000fd4 <__aeabi_ddiv+0x25c>
 8000e20:	2300      	movs	r3, #0
 8000e22:	2400      	movs	r4, #0
 8000e24:	2500      	movs	r5, #0
 8000e26:	4652      	mov	r2, sl
 8000e28:	051b      	lsls	r3, r3, #20
 8000e2a:	4323      	orrs	r3, r4
 8000e2c:	07d2      	lsls	r2, r2, #31
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	0028      	movs	r0, r5
 8000e32:	0019      	movs	r1, r3
 8000e34:	b005      	add	sp, #20
 8000e36:	bcf0      	pop	{r4, r5, r6, r7}
 8000e38:	46bb      	mov	fp, r7
 8000e3a:	46b2      	mov	sl, r6
 8000e3c:	46a9      	mov	r9, r5
 8000e3e:	46a0      	mov	r8, r4
 8000e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e42:	2400      	movs	r4, #0
 8000e44:	2500      	movs	r5, #0
 8000e46:	4baa      	ldr	r3, [pc, #680]	; (80010f0 <__aeabi_ddiv+0x378>)
 8000e48:	e7ed      	b.n	8000e26 <__aeabi_ddiv+0xae>
 8000e4a:	46ba      	mov	sl, r7
 8000e4c:	46a0      	mov	r8, r4
 8000e4e:	0015      	movs	r5, r2
 8000e50:	9000      	str	r0, [sp, #0]
 8000e52:	e7dc      	b.n	8000e0e <__aeabi_ddiv+0x96>
 8000e54:	4544      	cmp	r4, r8
 8000e56:	d200      	bcs.n	8000e5a <__aeabi_ddiv+0xe2>
 8000e58:	e1c7      	b.n	80011ea <__aeabi_ddiv+0x472>
 8000e5a:	d100      	bne.n	8000e5e <__aeabi_ddiv+0xe6>
 8000e5c:	e1c2      	b.n	80011e4 <__aeabi_ddiv+0x46c>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	425b      	negs	r3, r3
 8000e62:	469c      	mov	ip, r3
 8000e64:	002e      	movs	r6, r5
 8000e66:	4640      	mov	r0, r8
 8000e68:	2500      	movs	r5, #0
 8000e6a:	44e3      	add	fp, ip
 8000e6c:	0223      	lsls	r3, r4, #8
 8000e6e:	0e14      	lsrs	r4, r2, #24
 8000e70:	431c      	orrs	r4, r3
 8000e72:	0c1b      	lsrs	r3, r3, #16
 8000e74:	4699      	mov	r9, r3
 8000e76:	0423      	lsls	r3, r4, #16
 8000e78:	0c1f      	lsrs	r7, r3, #16
 8000e7a:	0212      	lsls	r2, r2, #8
 8000e7c:	4649      	mov	r1, r9
 8000e7e:	9200      	str	r2, [sp, #0]
 8000e80:	9701      	str	r7, [sp, #4]
 8000e82:	f7ff f9e3 	bl	800024c <__aeabi_uidivmod>
 8000e86:	0002      	movs	r2, r0
 8000e88:	437a      	muls	r2, r7
 8000e8a:	040b      	lsls	r3, r1, #16
 8000e8c:	0c31      	lsrs	r1, r6, #16
 8000e8e:	4680      	mov	r8, r0
 8000e90:	4319      	orrs	r1, r3
 8000e92:	428a      	cmp	r2, r1
 8000e94:	d907      	bls.n	8000ea6 <__aeabi_ddiv+0x12e>
 8000e96:	2301      	movs	r3, #1
 8000e98:	425b      	negs	r3, r3
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	1909      	adds	r1, r1, r4
 8000e9e:	44e0      	add	r8, ip
 8000ea0:	428c      	cmp	r4, r1
 8000ea2:	d800      	bhi.n	8000ea6 <__aeabi_ddiv+0x12e>
 8000ea4:	e207      	b.n	80012b6 <__aeabi_ddiv+0x53e>
 8000ea6:	1a88      	subs	r0, r1, r2
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	f7ff f9cf 	bl	800024c <__aeabi_uidivmod>
 8000eae:	0409      	lsls	r1, r1, #16
 8000eb0:	468c      	mov	ip, r1
 8000eb2:	0431      	lsls	r1, r6, #16
 8000eb4:	4666      	mov	r6, ip
 8000eb6:	9a01      	ldr	r2, [sp, #4]
 8000eb8:	0c09      	lsrs	r1, r1, #16
 8000eba:	4342      	muls	r2, r0
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	4331      	orrs	r1, r6
 8000ec0:	428a      	cmp	r2, r1
 8000ec2:	d904      	bls.n	8000ece <__aeabi_ddiv+0x156>
 8000ec4:	1909      	adds	r1, r1, r4
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	428c      	cmp	r4, r1
 8000eca:	d800      	bhi.n	8000ece <__aeabi_ddiv+0x156>
 8000ecc:	e1ed      	b.n	80012aa <__aeabi_ddiv+0x532>
 8000ece:	1a88      	subs	r0, r1, r2
 8000ed0:	4642      	mov	r2, r8
 8000ed2:	0412      	lsls	r2, r2, #16
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	4690      	mov	r8, r2
 8000ed8:	4641      	mov	r1, r8
 8000eda:	9b00      	ldr	r3, [sp, #0]
 8000edc:	040e      	lsls	r6, r1, #16
 8000ede:	0c1b      	lsrs	r3, r3, #16
 8000ee0:	001f      	movs	r7, r3
 8000ee2:	9302      	str	r3, [sp, #8]
 8000ee4:	9b00      	ldr	r3, [sp, #0]
 8000ee6:	0c36      	lsrs	r6, r6, #16
 8000ee8:	041b      	lsls	r3, r3, #16
 8000eea:	0c19      	lsrs	r1, r3, #16
 8000eec:	000b      	movs	r3, r1
 8000eee:	4373      	muls	r3, r6
 8000ef0:	0c12      	lsrs	r2, r2, #16
 8000ef2:	437e      	muls	r6, r7
 8000ef4:	9103      	str	r1, [sp, #12]
 8000ef6:	4351      	muls	r1, r2
 8000ef8:	437a      	muls	r2, r7
 8000efa:	0c1f      	lsrs	r7, r3, #16
 8000efc:	46bc      	mov	ip, r7
 8000efe:	1876      	adds	r6, r6, r1
 8000f00:	4466      	add	r6, ip
 8000f02:	42b1      	cmp	r1, r6
 8000f04:	d903      	bls.n	8000f0e <__aeabi_ddiv+0x196>
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	468c      	mov	ip, r1
 8000f0c:	4462      	add	r2, ip
 8000f0e:	0c31      	lsrs	r1, r6, #16
 8000f10:	188a      	adds	r2, r1, r2
 8000f12:	0431      	lsls	r1, r6, #16
 8000f14:	041e      	lsls	r6, r3, #16
 8000f16:	0c36      	lsrs	r6, r6, #16
 8000f18:	198e      	adds	r6, r1, r6
 8000f1a:	4290      	cmp	r0, r2
 8000f1c:	d302      	bcc.n	8000f24 <__aeabi_ddiv+0x1ac>
 8000f1e:	d112      	bne.n	8000f46 <__aeabi_ddiv+0x1ce>
 8000f20:	42b5      	cmp	r5, r6
 8000f22:	d210      	bcs.n	8000f46 <__aeabi_ddiv+0x1ce>
 8000f24:	4643      	mov	r3, r8
 8000f26:	1e59      	subs	r1, r3, #1
 8000f28:	9b00      	ldr	r3, [sp, #0]
 8000f2a:	469c      	mov	ip, r3
 8000f2c:	4465      	add	r5, ip
 8000f2e:	001f      	movs	r7, r3
 8000f30:	429d      	cmp	r5, r3
 8000f32:	419b      	sbcs	r3, r3
 8000f34:	425b      	negs	r3, r3
 8000f36:	191b      	adds	r3, r3, r4
 8000f38:	18c0      	adds	r0, r0, r3
 8000f3a:	4284      	cmp	r4, r0
 8000f3c:	d200      	bcs.n	8000f40 <__aeabi_ddiv+0x1c8>
 8000f3e:	e1a0      	b.n	8001282 <__aeabi_ddiv+0x50a>
 8000f40:	d100      	bne.n	8000f44 <__aeabi_ddiv+0x1cc>
 8000f42:	e19b      	b.n	800127c <__aeabi_ddiv+0x504>
 8000f44:	4688      	mov	r8, r1
 8000f46:	1bae      	subs	r6, r5, r6
 8000f48:	42b5      	cmp	r5, r6
 8000f4a:	41ad      	sbcs	r5, r5
 8000f4c:	1a80      	subs	r0, r0, r2
 8000f4e:	426d      	negs	r5, r5
 8000f50:	1b40      	subs	r0, r0, r5
 8000f52:	4284      	cmp	r4, r0
 8000f54:	d100      	bne.n	8000f58 <__aeabi_ddiv+0x1e0>
 8000f56:	e1d5      	b.n	8001304 <__aeabi_ddiv+0x58c>
 8000f58:	4649      	mov	r1, r9
 8000f5a:	f7ff f977 	bl	800024c <__aeabi_uidivmod>
 8000f5e:	9a01      	ldr	r2, [sp, #4]
 8000f60:	040b      	lsls	r3, r1, #16
 8000f62:	4342      	muls	r2, r0
 8000f64:	0c31      	lsrs	r1, r6, #16
 8000f66:	0005      	movs	r5, r0
 8000f68:	4319      	orrs	r1, r3
 8000f6a:	428a      	cmp	r2, r1
 8000f6c:	d900      	bls.n	8000f70 <__aeabi_ddiv+0x1f8>
 8000f6e:	e16c      	b.n	800124a <__aeabi_ddiv+0x4d2>
 8000f70:	1a88      	subs	r0, r1, r2
 8000f72:	4649      	mov	r1, r9
 8000f74:	f7ff f96a 	bl	800024c <__aeabi_uidivmod>
 8000f78:	9a01      	ldr	r2, [sp, #4]
 8000f7a:	0436      	lsls	r6, r6, #16
 8000f7c:	4342      	muls	r2, r0
 8000f7e:	0409      	lsls	r1, r1, #16
 8000f80:	0c36      	lsrs	r6, r6, #16
 8000f82:	0003      	movs	r3, r0
 8000f84:	430e      	orrs	r6, r1
 8000f86:	42b2      	cmp	r2, r6
 8000f88:	d900      	bls.n	8000f8c <__aeabi_ddiv+0x214>
 8000f8a:	e153      	b.n	8001234 <__aeabi_ddiv+0x4bc>
 8000f8c:	9803      	ldr	r0, [sp, #12]
 8000f8e:	1ab6      	subs	r6, r6, r2
 8000f90:	0002      	movs	r2, r0
 8000f92:	042d      	lsls	r5, r5, #16
 8000f94:	431d      	orrs	r5, r3
 8000f96:	9f02      	ldr	r7, [sp, #8]
 8000f98:	042b      	lsls	r3, r5, #16
 8000f9a:	0c1b      	lsrs	r3, r3, #16
 8000f9c:	435a      	muls	r2, r3
 8000f9e:	437b      	muls	r3, r7
 8000fa0:	469c      	mov	ip, r3
 8000fa2:	0c29      	lsrs	r1, r5, #16
 8000fa4:	4348      	muls	r0, r1
 8000fa6:	0c13      	lsrs	r3, r2, #16
 8000fa8:	4484      	add	ip, r0
 8000faa:	4463      	add	r3, ip
 8000fac:	4379      	muls	r1, r7
 8000fae:	4298      	cmp	r0, r3
 8000fb0:	d903      	bls.n	8000fba <__aeabi_ddiv+0x242>
 8000fb2:	2080      	movs	r0, #128	; 0x80
 8000fb4:	0240      	lsls	r0, r0, #9
 8000fb6:	4684      	mov	ip, r0
 8000fb8:	4461      	add	r1, ip
 8000fba:	0c18      	lsrs	r0, r3, #16
 8000fbc:	0412      	lsls	r2, r2, #16
 8000fbe:	041b      	lsls	r3, r3, #16
 8000fc0:	0c12      	lsrs	r2, r2, #16
 8000fc2:	1841      	adds	r1, r0, r1
 8000fc4:	189b      	adds	r3, r3, r2
 8000fc6:	428e      	cmp	r6, r1
 8000fc8:	d200      	bcs.n	8000fcc <__aeabi_ddiv+0x254>
 8000fca:	e0ff      	b.n	80011cc <__aeabi_ddiv+0x454>
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0x258>
 8000fce:	e0fa      	b.n	80011c6 <__aeabi_ddiv+0x44e>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	431d      	orrs	r5, r3
 8000fd4:	4a49      	ldr	r2, [pc, #292]	; (80010fc <__aeabi_ddiv+0x384>)
 8000fd6:	445a      	add	r2, fp
 8000fd8:	2a00      	cmp	r2, #0
 8000fda:	dc00      	bgt.n	8000fde <__aeabi_ddiv+0x266>
 8000fdc:	e0aa      	b.n	8001134 <__aeabi_ddiv+0x3bc>
 8000fde:	076b      	lsls	r3, r5, #29
 8000fe0:	d000      	beq.n	8000fe4 <__aeabi_ddiv+0x26c>
 8000fe2:	e13d      	b.n	8001260 <__aeabi_ddiv+0x4e8>
 8000fe4:	08ed      	lsrs	r5, r5, #3
 8000fe6:	4643      	mov	r3, r8
 8000fe8:	01db      	lsls	r3, r3, #7
 8000fea:	d506      	bpl.n	8000ffa <__aeabi_ddiv+0x282>
 8000fec:	4642      	mov	r2, r8
 8000fee:	4b44      	ldr	r3, [pc, #272]	; (8001100 <__aeabi_ddiv+0x388>)
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	4690      	mov	r8, r2
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	00d2      	lsls	r2, r2, #3
 8000ff8:	445a      	add	r2, fp
 8000ffa:	4b42      	ldr	r3, [pc, #264]	; (8001104 <__aeabi_ddiv+0x38c>)
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dd00      	ble.n	8001002 <__aeabi_ddiv+0x28a>
 8001000:	e71f      	b.n	8000e42 <__aeabi_ddiv+0xca>
 8001002:	4643      	mov	r3, r8
 8001004:	075b      	lsls	r3, r3, #29
 8001006:	431d      	orrs	r5, r3
 8001008:	4643      	mov	r3, r8
 800100a:	0552      	lsls	r2, r2, #21
 800100c:	025c      	lsls	r4, r3, #9
 800100e:	0b24      	lsrs	r4, r4, #12
 8001010:	0d53      	lsrs	r3, r2, #21
 8001012:	e708      	b.n	8000e26 <__aeabi_ddiv+0xae>
 8001014:	4652      	mov	r2, sl
 8001016:	4322      	orrs	r2, r4
 8001018:	d100      	bne.n	800101c <__aeabi_ddiv+0x2a4>
 800101a:	e07b      	b.n	8001114 <__aeabi_ddiv+0x39c>
 800101c:	2c00      	cmp	r4, #0
 800101e:	d100      	bne.n	8001022 <__aeabi_ddiv+0x2aa>
 8001020:	e0fa      	b.n	8001218 <__aeabi_ddiv+0x4a0>
 8001022:	0020      	movs	r0, r4
 8001024:	f001 fa04 	bl	8002430 <__clzsi2>
 8001028:	0002      	movs	r2, r0
 800102a:	3a0b      	subs	r2, #11
 800102c:	231d      	movs	r3, #29
 800102e:	0001      	movs	r1, r0
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	4652      	mov	r2, sl
 8001034:	3908      	subs	r1, #8
 8001036:	40da      	lsrs	r2, r3
 8001038:	408c      	lsls	r4, r1
 800103a:	4314      	orrs	r4, r2
 800103c:	4652      	mov	r2, sl
 800103e:	408a      	lsls	r2, r1
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <__aeabi_ddiv+0x390>)
 8001042:	4458      	add	r0, fp
 8001044:	469b      	mov	fp, r3
 8001046:	4483      	add	fp, r0
 8001048:	2000      	movs	r0, #0
 800104a:	e6d5      	b.n	8000df8 <__aeabi_ddiv+0x80>
 800104c:	464b      	mov	r3, r9
 800104e:	4323      	orrs	r3, r4
 8001050:	4698      	mov	r8, r3
 8001052:	d044      	beq.n	80010de <__aeabi_ddiv+0x366>
 8001054:	2c00      	cmp	r4, #0
 8001056:	d100      	bne.n	800105a <__aeabi_ddiv+0x2e2>
 8001058:	e0ce      	b.n	80011f8 <__aeabi_ddiv+0x480>
 800105a:	0020      	movs	r0, r4
 800105c:	f001 f9e8 	bl	8002430 <__clzsi2>
 8001060:	0001      	movs	r1, r0
 8001062:	0002      	movs	r2, r0
 8001064:	390b      	subs	r1, #11
 8001066:	231d      	movs	r3, #29
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	4649      	mov	r1, r9
 800106c:	0010      	movs	r0, r2
 800106e:	40d9      	lsrs	r1, r3
 8001070:	3808      	subs	r0, #8
 8001072:	4084      	lsls	r4, r0
 8001074:	000b      	movs	r3, r1
 8001076:	464d      	mov	r5, r9
 8001078:	4323      	orrs	r3, r4
 800107a:	4698      	mov	r8, r3
 800107c:	4085      	lsls	r5, r0
 800107e:	4823      	ldr	r0, [pc, #140]	; (800110c <__aeabi_ddiv+0x394>)
 8001080:	1a83      	subs	r3, r0, r2
 8001082:	469b      	mov	fp, r3
 8001084:	2300      	movs	r3, #0
 8001086:	4699      	mov	r9, r3
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	e69a      	b.n	8000dc2 <__aeabi_ddiv+0x4a>
 800108c:	464b      	mov	r3, r9
 800108e:	4323      	orrs	r3, r4
 8001090:	4698      	mov	r8, r3
 8001092:	d11d      	bne.n	80010d0 <__aeabi_ddiv+0x358>
 8001094:	2308      	movs	r3, #8
 8001096:	4699      	mov	r9, r3
 8001098:	3b06      	subs	r3, #6
 800109a:	2500      	movs	r5, #0
 800109c:	4683      	mov	fp, r0
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	e68f      	b.n	8000dc2 <__aeabi_ddiv+0x4a>
 80010a2:	4652      	mov	r2, sl
 80010a4:	4322      	orrs	r2, r4
 80010a6:	d109      	bne.n	80010bc <__aeabi_ddiv+0x344>
 80010a8:	2302      	movs	r3, #2
 80010aa:	4649      	mov	r1, r9
 80010ac:	4319      	orrs	r1, r3
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <__aeabi_ddiv+0x398>)
 80010b0:	4689      	mov	r9, r1
 80010b2:	469c      	mov	ip, r3
 80010b4:	2400      	movs	r4, #0
 80010b6:	2002      	movs	r0, #2
 80010b8:	44e3      	add	fp, ip
 80010ba:	e69d      	b.n	8000df8 <__aeabi_ddiv+0x80>
 80010bc:	2303      	movs	r3, #3
 80010be:	464a      	mov	r2, r9
 80010c0:	431a      	orrs	r2, r3
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <__aeabi_ddiv+0x398>)
 80010c4:	4691      	mov	r9, r2
 80010c6:	469c      	mov	ip, r3
 80010c8:	4652      	mov	r2, sl
 80010ca:	2003      	movs	r0, #3
 80010cc:	44e3      	add	fp, ip
 80010ce:	e693      	b.n	8000df8 <__aeabi_ddiv+0x80>
 80010d0:	230c      	movs	r3, #12
 80010d2:	4699      	mov	r9, r3
 80010d4:	3b09      	subs	r3, #9
 80010d6:	46a0      	mov	r8, r4
 80010d8:	4683      	mov	fp, r0
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	e671      	b.n	8000dc2 <__aeabi_ddiv+0x4a>
 80010de:	2304      	movs	r3, #4
 80010e0:	4699      	mov	r9, r3
 80010e2:	2300      	movs	r3, #0
 80010e4:	469b      	mov	fp, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	2500      	movs	r5, #0
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	e669      	b.n	8000dc2 <__aeabi_ddiv+0x4a>
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	000007ff 	.word	0x000007ff
 80010f4:	fffffc01 	.word	0xfffffc01
 80010f8:	0800c1c4 	.word	0x0800c1c4
 80010fc:	000003ff 	.word	0x000003ff
 8001100:	feffffff 	.word	0xfeffffff
 8001104:	000007fe 	.word	0x000007fe
 8001108:	000003f3 	.word	0x000003f3
 800110c:	fffffc0d 	.word	0xfffffc0d
 8001110:	fffff801 	.word	0xfffff801
 8001114:	4649      	mov	r1, r9
 8001116:	2301      	movs	r3, #1
 8001118:	4319      	orrs	r1, r3
 800111a:	4689      	mov	r9, r1
 800111c:	2400      	movs	r4, #0
 800111e:	2001      	movs	r0, #1
 8001120:	e66a      	b.n	8000df8 <__aeabi_ddiv+0x80>
 8001122:	2300      	movs	r3, #0
 8001124:	2480      	movs	r4, #128	; 0x80
 8001126:	469a      	mov	sl, r3
 8001128:	2500      	movs	r5, #0
 800112a:	4b8a      	ldr	r3, [pc, #552]	; (8001354 <__aeabi_ddiv+0x5dc>)
 800112c:	0324      	lsls	r4, r4, #12
 800112e:	e67a      	b.n	8000e26 <__aeabi_ddiv+0xae>
 8001130:	2501      	movs	r5, #1
 8001132:	426d      	negs	r5, r5
 8001134:	2301      	movs	r3, #1
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	2b38      	cmp	r3, #56	; 0x38
 800113a:	dd00      	ble.n	800113e <__aeabi_ddiv+0x3c6>
 800113c:	e670      	b.n	8000e20 <__aeabi_ddiv+0xa8>
 800113e:	2b1f      	cmp	r3, #31
 8001140:	dc00      	bgt.n	8001144 <__aeabi_ddiv+0x3cc>
 8001142:	e0bf      	b.n	80012c4 <__aeabi_ddiv+0x54c>
 8001144:	211f      	movs	r1, #31
 8001146:	4249      	negs	r1, r1
 8001148:	1a8a      	subs	r2, r1, r2
 800114a:	4641      	mov	r1, r8
 800114c:	40d1      	lsrs	r1, r2
 800114e:	000a      	movs	r2, r1
 8001150:	2b20      	cmp	r3, #32
 8001152:	d004      	beq.n	800115e <__aeabi_ddiv+0x3e6>
 8001154:	4641      	mov	r1, r8
 8001156:	4b80      	ldr	r3, [pc, #512]	; (8001358 <__aeabi_ddiv+0x5e0>)
 8001158:	445b      	add	r3, fp
 800115a:	4099      	lsls	r1, r3
 800115c:	430d      	orrs	r5, r1
 800115e:	1e6b      	subs	r3, r5, #1
 8001160:	419d      	sbcs	r5, r3
 8001162:	2307      	movs	r3, #7
 8001164:	432a      	orrs	r2, r5
 8001166:	001d      	movs	r5, r3
 8001168:	2400      	movs	r4, #0
 800116a:	4015      	ands	r5, r2
 800116c:	4213      	tst	r3, r2
 800116e:	d100      	bne.n	8001172 <__aeabi_ddiv+0x3fa>
 8001170:	e0d4      	b.n	800131c <__aeabi_ddiv+0x5a4>
 8001172:	210f      	movs	r1, #15
 8001174:	2300      	movs	r3, #0
 8001176:	4011      	ands	r1, r2
 8001178:	2904      	cmp	r1, #4
 800117a:	d100      	bne.n	800117e <__aeabi_ddiv+0x406>
 800117c:	e0cb      	b.n	8001316 <__aeabi_ddiv+0x59e>
 800117e:	1d11      	adds	r1, r2, #4
 8001180:	4291      	cmp	r1, r2
 8001182:	4192      	sbcs	r2, r2
 8001184:	4252      	negs	r2, r2
 8001186:	189b      	adds	r3, r3, r2
 8001188:	000a      	movs	r2, r1
 800118a:	0219      	lsls	r1, r3, #8
 800118c:	d400      	bmi.n	8001190 <__aeabi_ddiv+0x418>
 800118e:	e0c2      	b.n	8001316 <__aeabi_ddiv+0x59e>
 8001190:	2301      	movs	r3, #1
 8001192:	2400      	movs	r4, #0
 8001194:	2500      	movs	r5, #0
 8001196:	e646      	b.n	8000e26 <__aeabi_ddiv+0xae>
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	4641      	mov	r1, r8
 800119c:	031b      	lsls	r3, r3, #12
 800119e:	4219      	tst	r1, r3
 80011a0:	d008      	beq.n	80011b4 <__aeabi_ddiv+0x43c>
 80011a2:	421c      	tst	r4, r3
 80011a4:	d106      	bne.n	80011b4 <__aeabi_ddiv+0x43c>
 80011a6:	431c      	orrs	r4, r3
 80011a8:	0324      	lsls	r4, r4, #12
 80011aa:	46ba      	mov	sl, r7
 80011ac:	0015      	movs	r5, r2
 80011ae:	4b69      	ldr	r3, [pc, #420]	; (8001354 <__aeabi_ddiv+0x5dc>)
 80011b0:	0b24      	lsrs	r4, r4, #12
 80011b2:	e638      	b.n	8000e26 <__aeabi_ddiv+0xae>
 80011b4:	2480      	movs	r4, #128	; 0x80
 80011b6:	4643      	mov	r3, r8
 80011b8:	0324      	lsls	r4, r4, #12
 80011ba:	431c      	orrs	r4, r3
 80011bc:	0324      	lsls	r4, r4, #12
 80011be:	46b2      	mov	sl, r6
 80011c0:	4b64      	ldr	r3, [pc, #400]	; (8001354 <__aeabi_ddiv+0x5dc>)
 80011c2:	0b24      	lsrs	r4, r4, #12
 80011c4:	e62f      	b.n	8000e26 <__aeabi_ddiv+0xae>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x454>
 80011ca:	e703      	b.n	8000fd4 <__aeabi_ddiv+0x25c>
 80011cc:	19a6      	adds	r6, r4, r6
 80011ce:	1e68      	subs	r0, r5, #1
 80011d0:	42a6      	cmp	r6, r4
 80011d2:	d200      	bcs.n	80011d6 <__aeabi_ddiv+0x45e>
 80011d4:	e08d      	b.n	80012f2 <__aeabi_ddiv+0x57a>
 80011d6:	428e      	cmp	r6, r1
 80011d8:	d200      	bcs.n	80011dc <__aeabi_ddiv+0x464>
 80011da:	e0a3      	b.n	8001324 <__aeabi_ddiv+0x5ac>
 80011dc:	d100      	bne.n	80011e0 <__aeabi_ddiv+0x468>
 80011de:	e0b3      	b.n	8001348 <__aeabi_ddiv+0x5d0>
 80011e0:	0005      	movs	r5, r0
 80011e2:	e6f5      	b.n	8000fd0 <__aeabi_ddiv+0x258>
 80011e4:	42aa      	cmp	r2, r5
 80011e6:	d900      	bls.n	80011ea <__aeabi_ddiv+0x472>
 80011e8:	e639      	b.n	8000e5e <__aeabi_ddiv+0xe6>
 80011ea:	4643      	mov	r3, r8
 80011ec:	07de      	lsls	r6, r3, #31
 80011ee:	0858      	lsrs	r0, r3, #1
 80011f0:	086b      	lsrs	r3, r5, #1
 80011f2:	431e      	orrs	r6, r3
 80011f4:	07ed      	lsls	r5, r5, #31
 80011f6:	e639      	b.n	8000e6c <__aeabi_ddiv+0xf4>
 80011f8:	4648      	mov	r0, r9
 80011fa:	f001 f919 	bl	8002430 <__clzsi2>
 80011fe:	0001      	movs	r1, r0
 8001200:	0002      	movs	r2, r0
 8001202:	3115      	adds	r1, #21
 8001204:	3220      	adds	r2, #32
 8001206:	291c      	cmp	r1, #28
 8001208:	dc00      	bgt.n	800120c <__aeabi_ddiv+0x494>
 800120a:	e72c      	b.n	8001066 <__aeabi_ddiv+0x2ee>
 800120c:	464b      	mov	r3, r9
 800120e:	3808      	subs	r0, #8
 8001210:	4083      	lsls	r3, r0
 8001212:	2500      	movs	r5, #0
 8001214:	4698      	mov	r8, r3
 8001216:	e732      	b.n	800107e <__aeabi_ddiv+0x306>
 8001218:	f001 f90a 	bl	8002430 <__clzsi2>
 800121c:	0003      	movs	r3, r0
 800121e:	001a      	movs	r2, r3
 8001220:	3215      	adds	r2, #21
 8001222:	3020      	adds	r0, #32
 8001224:	2a1c      	cmp	r2, #28
 8001226:	dc00      	bgt.n	800122a <__aeabi_ddiv+0x4b2>
 8001228:	e700      	b.n	800102c <__aeabi_ddiv+0x2b4>
 800122a:	4654      	mov	r4, sl
 800122c:	3b08      	subs	r3, #8
 800122e:	2200      	movs	r2, #0
 8001230:	409c      	lsls	r4, r3
 8001232:	e705      	b.n	8001040 <__aeabi_ddiv+0x2c8>
 8001234:	1936      	adds	r6, r6, r4
 8001236:	3b01      	subs	r3, #1
 8001238:	42b4      	cmp	r4, r6
 800123a:	d900      	bls.n	800123e <__aeabi_ddiv+0x4c6>
 800123c:	e6a6      	b.n	8000f8c <__aeabi_ddiv+0x214>
 800123e:	42b2      	cmp	r2, r6
 8001240:	d800      	bhi.n	8001244 <__aeabi_ddiv+0x4cc>
 8001242:	e6a3      	b.n	8000f8c <__aeabi_ddiv+0x214>
 8001244:	1e83      	subs	r3, r0, #2
 8001246:	1936      	adds	r6, r6, r4
 8001248:	e6a0      	b.n	8000f8c <__aeabi_ddiv+0x214>
 800124a:	1909      	adds	r1, r1, r4
 800124c:	3d01      	subs	r5, #1
 800124e:	428c      	cmp	r4, r1
 8001250:	d900      	bls.n	8001254 <__aeabi_ddiv+0x4dc>
 8001252:	e68d      	b.n	8000f70 <__aeabi_ddiv+0x1f8>
 8001254:	428a      	cmp	r2, r1
 8001256:	d800      	bhi.n	800125a <__aeabi_ddiv+0x4e2>
 8001258:	e68a      	b.n	8000f70 <__aeabi_ddiv+0x1f8>
 800125a:	1e85      	subs	r5, r0, #2
 800125c:	1909      	adds	r1, r1, r4
 800125e:	e687      	b.n	8000f70 <__aeabi_ddiv+0x1f8>
 8001260:	230f      	movs	r3, #15
 8001262:	402b      	ands	r3, r5
 8001264:	2b04      	cmp	r3, #4
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x4f2>
 8001268:	e6bc      	b.n	8000fe4 <__aeabi_ddiv+0x26c>
 800126a:	2305      	movs	r3, #5
 800126c:	425b      	negs	r3, r3
 800126e:	42ab      	cmp	r3, r5
 8001270:	419b      	sbcs	r3, r3
 8001272:	3504      	adds	r5, #4
 8001274:	425b      	negs	r3, r3
 8001276:	08ed      	lsrs	r5, r5, #3
 8001278:	4498      	add	r8, r3
 800127a:	e6b4      	b.n	8000fe6 <__aeabi_ddiv+0x26e>
 800127c:	42af      	cmp	r7, r5
 800127e:	d900      	bls.n	8001282 <__aeabi_ddiv+0x50a>
 8001280:	e660      	b.n	8000f44 <__aeabi_ddiv+0x1cc>
 8001282:	4282      	cmp	r2, r0
 8001284:	d804      	bhi.n	8001290 <__aeabi_ddiv+0x518>
 8001286:	d000      	beq.n	800128a <__aeabi_ddiv+0x512>
 8001288:	e65c      	b.n	8000f44 <__aeabi_ddiv+0x1cc>
 800128a:	42ae      	cmp	r6, r5
 800128c:	d800      	bhi.n	8001290 <__aeabi_ddiv+0x518>
 800128e:	e659      	b.n	8000f44 <__aeabi_ddiv+0x1cc>
 8001290:	2302      	movs	r3, #2
 8001292:	425b      	negs	r3, r3
 8001294:	469c      	mov	ip, r3
 8001296:	9b00      	ldr	r3, [sp, #0]
 8001298:	44e0      	add	r8, ip
 800129a:	469c      	mov	ip, r3
 800129c:	4465      	add	r5, ip
 800129e:	429d      	cmp	r5, r3
 80012a0:	419b      	sbcs	r3, r3
 80012a2:	425b      	negs	r3, r3
 80012a4:	191b      	adds	r3, r3, r4
 80012a6:	18c0      	adds	r0, r0, r3
 80012a8:	e64d      	b.n	8000f46 <__aeabi_ddiv+0x1ce>
 80012aa:	428a      	cmp	r2, r1
 80012ac:	d800      	bhi.n	80012b0 <__aeabi_ddiv+0x538>
 80012ae:	e60e      	b.n	8000ece <__aeabi_ddiv+0x156>
 80012b0:	1e83      	subs	r3, r0, #2
 80012b2:	1909      	adds	r1, r1, r4
 80012b4:	e60b      	b.n	8000ece <__aeabi_ddiv+0x156>
 80012b6:	428a      	cmp	r2, r1
 80012b8:	d800      	bhi.n	80012bc <__aeabi_ddiv+0x544>
 80012ba:	e5f4      	b.n	8000ea6 <__aeabi_ddiv+0x12e>
 80012bc:	1e83      	subs	r3, r0, #2
 80012be:	4698      	mov	r8, r3
 80012c0:	1909      	adds	r1, r1, r4
 80012c2:	e5f0      	b.n	8000ea6 <__aeabi_ddiv+0x12e>
 80012c4:	4925      	ldr	r1, [pc, #148]	; (800135c <__aeabi_ddiv+0x5e4>)
 80012c6:	0028      	movs	r0, r5
 80012c8:	4459      	add	r1, fp
 80012ca:	408d      	lsls	r5, r1
 80012cc:	4642      	mov	r2, r8
 80012ce:	408a      	lsls	r2, r1
 80012d0:	1e69      	subs	r1, r5, #1
 80012d2:	418d      	sbcs	r5, r1
 80012d4:	4641      	mov	r1, r8
 80012d6:	40d8      	lsrs	r0, r3
 80012d8:	40d9      	lsrs	r1, r3
 80012da:	4302      	orrs	r2, r0
 80012dc:	432a      	orrs	r2, r5
 80012de:	000b      	movs	r3, r1
 80012e0:	0751      	lsls	r1, r2, #29
 80012e2:	d100      	bne.n	80012e6 <__aeabi_ddiv+0x56e>
 80012e4:	e751      	b.n	800118a <__aeabi_ddiv+0x412>
 80012e6:	210f      	movs	r1, #15
 80012e8:	4011      	ands	r1, r2
 80012ea:	2904      	cmp	r1, #4
 80012ec:	d000      	beq.n	80012f0 <__aeabi_ddiv+0x578>
 80012ee:	e746      	b.n	800117e <__aeabi_ddiv+0x406>
 80012f0:	e74b      	b.n	800118a <__aeabi_ddiv+0x412>
 80012f2:	0005      	movs	r5, r0
 80012f4:	428e      	cmp	r6, r1
 80012f6:	d000      	beq.n	80012fa <__aeabi_ddiv+0x582>
 80012f8:	e66a      	b.n	8000fd0 <__aeabi_ddiv+0x258>
 80012fa:	9a00      	ldr	r2, [sp, #0]
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d000      	beq.n	8001302 <__aeabi_ddiv+0x58a>
 8001300:	e666      	b.n	8000fd0 <__aeabi_ddiv+0x258>
 8001302:	e667      	b.n	8000fd4 <__aeabi_ddiv+0x25c>
 8001304:	4a16      	ldr	r2, [pc, #88]	; (8001360 <__aeabi_ddiv+0x5e8>)
 8001306:	445a      	add	r2, fp
 8001308:	2a00      	cmp	r2, #0
 800130a:	dc00      	bgt.n	800130e <__aeabi_ddiv+0x596>
 800130c:	e710      	b.n	8001130 <__aeabi_ddiv+0x3b8>
 800130e:	2301      	movs	r3, #1
 8001310:	2500      	movs	r5, #0
 8001312:	4498      	add	r8, r3
 8001314:	e667      	b.n	8000fe6 <__aeabi_ddiv+0x26e>
 8001316:	075d      	lsls	r5, r3, #29
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	0b1c      	lsrs	r4, r3, #12
 800131c:	08d2      	lsrs	r2, r2, #3
 800131e:	2300      	movs	r3, #0
 8001320:	4315      	orrs	r5, r2
 8001322:	e580      	b.n	8000e26 <__aeabi_ddiv+0xae>
 8001324:	9800      	ldr	r0, [sp, #0]
 8001326:	3d02      	subs	r5, #2
 8001328:	0042      	lsls	r2, r0, #1
 800132a:	4282      	cmp	r2, r0
 800132c:	41bf      	sbcs	r7, r7
 800132e:	427f      	negs	r7, r7
 8001330:	193c      	adds	r4, r7, r4
 8001332:	1936      	adds	r6, r6, r4
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	e7dd      	b.n	80012f4 <__aeabi_ddiv+0x57c>
 8001338:	2480      	movs	r4, #128	; 0x80
 800133a:	4643      	mov	r3, r8
 800133c:	0324      	lsls	r4, r4, #12
 800133e:	431c      	orrs	r4, r3
 8001340:	0324      	lsls	r4, r4, #12
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <__aeabi_ddiv+0x5dc>)
 8001344:	0b24      	lsrs	r4, r4, #12
 8001346:	e56e      	b.n	8000e26 <__aeabi_ddiv+0xae>
 8001348:	9a00      	ldr	r2, [sp, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d3ea      	bcc.n	8001324 <__aeabi_ddiv+0x5ac>
 800134e:	0005      	movs	r5, r0
 8001350:	e7d3      	b.n	80012fa <__aeabi_ddiv+0x582>
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	000007ff 	.word	0x000007ff
 8001358:	0000043e 	.word	0x0000043e
 800135c:	0000041e 	.word	0x0000041e
 8001360:	000003ff 	.word	0x000003ff

08001364 <__eqdf2>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	464e      	mov	r6, r9
 8001368:	4645      	mov	r5, r8
 800136a:	46de      	mov	lr, fp
 800136c:	4657      	mov	r7, sl
 800136e:	4690      	mov	r8, r2
 8001370:	b5e0      	push	{r5, r6, r7, lr}
 8001372:	0017      	movs	r7, r2
 8001374:	031a      	lsls	r2, r3, #12
 8001376:	0b12      	lsrs	r2, r2, #12
 8001378:	0005      	movs	r5, r0
 800137a:	4684      	mov	ip, r0
 800137c:	4819      	ldr	r0, [pc, #100]	; (80013e4 <__eqdf2+0x80>)
 800137e:	030e      	lsls	r6, r1, #12
 8001380:	004c      	lsls	r4, r1, #1
 8001382:	4691      	mov	r9, r2
 8001384:	005a      	lsls	r2, r3, #1
 8001386:	0fdb      	lsrs	r3, r3, #31
 8001388:	469b      	mov	fp, r3
 800138a:	0b36      	lsrs	r6, r6, #12
 800138c:	0d64      	lsrs	r4, r4, #21
 800138e:	0fc9      	lsrs	r1, r1, #31
 8001390:	0d52      	lsrs	r2, r2, #21
 8001392:	4284      	cmp	r4, r0
 8001394:	d019      	beq.n	80013ca <__eqdf2+0x66>
 8001396:	4282      	cmp	r2, r0
 8001398:	d010      	beq.n	80013bc <__eqdf2+0x58>
 800139a:	2001      	movs	r0, #1
 800139c:	4294      	cmp	r4, r2
 800139e:	d10e      	bne.n	80013be <__eqdf2+0x5a>
 80013a0:	454e      	cmp	r6, r9
 80013a2:	d10c      	bne.n	80013be <__eqdf2+0x5a>
 80013a4:	2001      	movs	r0, #1
 80013a6:	45c4      	cmp	ip, r8
 80013a8:	d109      	bne.n	80013be <__eqdf2+0x5a>
 80013aa:	4559      	cmp	r1, fp
 80013ac:	d017      	beq.n	80013de <__eqdf2+0x7a>
 80013ae:	2c00      	cmp	r4, #0
 80013b0:	d105      	bne.n	80013be <__eqdf2+0x5a>
 80013b2:	0030      	movs	r0, r6
 80013b4:	4328      	orrs	r0, r5
 80013b6:	1e43      	subs	r3, r0, #1
 80013b8:	4198      	sbcs	r0, r3
 80013ba:	e000      	b.n	80013be <__eqdf2+0x5a>
 80013bc:	2001      	movs	r0, #1
 80013be:	bcf0      	pop	{r4, r5, r6, r7}
 80013c0:	46bb      	mov	fp, r7
 80013c2:	46b2      	mov	sl, r6
 80013c4:	46a9      	mov	r9, r5
 80013c6:	46a0      	mov	r8, r4
 80013c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ca:	0033      	movs	r3, r6
 80013cc:	2001      	movs	r0, #1
 80013ce:	432b      	orrs	r3, r5
 80013d0:	d1f5      	bne.n	80013be <__eqdf2+0x5a>
 80013d2:	42a2      	cmp	r2, r4
 80013d4:	d1f3      	bne.n	80013be <__eqdf2+0x5a>
 80013d6:	464b      	mov	r3, r9
 80013d8:	433b      	orrs	r3, r7
 80013da:	d1f0      	bne.n	80013be <__eqdf2+0x5a>
 80013dc:	e7e2      	b.n	80013a4 <__eqdf2+0x40>
 80013de:	2000      	movs	r0, #0
 80013e0:	e7ed      	b.n	80013be <__eqdf2+0x5a>
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	000007ff 	.word	0x000007ff

080013e8 <__gedf2>:
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ea:	4647      	mov	r7, r8
 80013ec:	46ce      	mov	lr, r9
 80013ee:	0004      	movs	r4, r0
 80013f0:	0018      	movs	r0, r3
 80013f2:	0016      	movs	r6, r2
 80013f4:	031b      	lsls	r3, r3, #12
 80013f6:	0b1b      	lsrs	r3, r3, #12
 80013f8:	4d2d      	ldr	r5, [pc, #180]	; (80014b0 <__gedf2+0xc8>)
 80013fa:	004a      	lsls	r2, r1, #1
 80013fc:	4699      	mov	r9, r3
 80013fe:	b580      	push	{r7, lr}
 8001400:	0043      	lsls	r3, r0, #1
 8001402:	030f      	lsls	r7, r1, #12
 8001404:	46a4      	mov	ip, r4
 8001406:	46b0      	mov	r8, r6
 8001408:	0b3f      	lsrs	r7, r7, #12
 800140a:	0d52      	lsrs	r2, r2, #21
 800140c:	0fc9      	lsrs	r1, r1, #31
 800140e:	0d5b      	lsrs	r3, r3, #21
 8001410:	0fc0      	lsrs	r0, r0, #31
 8001412:	42aa      	cmp	r2, r5
 8001414:	d021      	beq.n	800145a <__gedf2+0x72>
 8001416:	42ab      	cmp	r3, r5
 8001418:	d013      	beq.n	8001442 <__gedf2+0x5a>
 800141a:	2a00      	cmp	r2, #0
 800141c:	d122      	bne.n	8001464 <__gedf2+0x7c>
 800141e:	433c      	orrs	r4, r7
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <__gedf2+0x42>
 8001424:	464d      	mov	r5, r9
 8001426:	432e      	orrs	r6, r5
 8001428:	d022      	beq.n	8001470 <__gedf2+0x88>
 800142a:	2c00      	cmp	r4, #0
 800142c:	d010      	beq.n	8001450 <__gedf2+0x68>
 800142e:	4281      	cmp	r1, r0
 8001430:	d022      	beq.n	8001478 <__gedf2+0x90>
 8001432:	2002      	movs	r0, #2
 8001434:	3901      	subs	r1, #1
 8001436:	4008      	ands	r0, r1
 8001438:	3801      	subs	r0, #1
 800143a:	bcc0      	pop	{r6, r7}
 800143c:	46b9      	mov	r9, r7
 800143e:	46b0      	mov	r8, r6
 8001440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001442:	464d      	mov	r5, r9
 8001444:	432e      	orrs	r6, r5
 8001446:	d129      	bne.n	800149c <__gedf2+0xb4>
 8001448:	2a00      	cmp	r2, #0
 800144a:	d1f0      	bne.n	800142e <__gedf2+0x46>
 800144c:	433c      	orrs	r4, r7
 800144e:	d1ee      	bne.n	800142e <__gedf2+0x46>
 8001450:	2800      	cmp	r0, #0
 8001452:	d1f2      	bne.n	800143a <__gedf2+0x52>
 8001454:	2001      	movs	r0, #1
 8001456:	4240      	negs	r0, r0
 8001458:	e7ef      	b.n	800143a <__gedf2+0x52>
 800145a:	003d      	movs	r5, r7
 800145c:	4325      	orrs	r5, r4
 800145e:	d11d      	bne.n	800149c <__gedf2+0xb4>
 8001460:	4293      	cmp	r3, r2
 8001462:	d0ee      	beq.n	8001442 <__gedf2+0x5a>
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e2      	bne.n	800142e <__gedf2+0x46>
 8001468:	464c      	mov	r4, r9
 800146a:	4326      	orrs	r6, r4
 800146c:	d1df      	bne.n	800142e <__gedf2+0x46>
 800146e:	e7e0      	b.n	8001432 <__gedf2+0x4a>
 8001470:	2000      	movs	r0, #0
 8001472:	2c00      	cmp	r4, #0
 8001474:	d0e1      	beq.n	800143a <__gedf2+0x52>
 8001476:	e7dc      	b.n	8001432 <__gedf2+0x4a>
 8001478:	429a      	cmp	r2, r3
 800147a:	dc0a      	bgt.n	8001492 <__gedf2+0xaa>
 800147c:	dbe8      	blt.n	8001450 <__gedf2+0x68>
 800147e:	454f      	cmp	r7, r9
 8001480:	d8d7      	bhi.n	8001432 <__gedf2+0x4a>
 8001482:	d00e      	beq.n	80014a2 <__gedf2+0xba>
 8001484:	2000      	movs	r0, #0
 8001486:	454f      	cmp	r7, r9
 8001488:	d2d7      	bcs.n	800143a <__gedf2+0x52>
 800148a:	2900      	cmp	r1, #0
 800148c:	d0e2      	beq.n	8001454 <__gedf2+0x6c>
 800148e:	0008      	movs	r0, r1
 8001490:	e7d3      	b.n	800143a <__gedf2+0x52>
 8001492:	4243      	negs	r3, r0
 8001494:	4158      	adcs	r0, r3
 8001496:	0040      	lsls	r0, r0, #1
 8001498:	3801      	subs	r0, #1
 800149a:	e7ce      	b.n	800143a <__gedf2+0x52>
 800149c:	2002      	movs	r0, #2
 800149e:	4240      	negs	r0, r0
 80014a0:	e7cb      	b.n	800143a <__gedf2+0x52>
 80014a2:	45c4      	cmp	ip, r8
 80014a4:	d8c5      	bhi.n	8001432 <__gedf2+0x4a>
 80014a6:	2000      	movs	r0, #0
 80014a8:	45c4      	cmp	ip, r8
 80014aa:	d2c6      	bcs.n	800143a <__gedf2+0x52>
 80014ac:	e7ed      	b.n	800148a <__gedf2+0xa2>
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	000007ff 	.word	0x000007ff

080014b4 <__ledf2>:
 80014b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014b6:	4647      	mov	r7, r8
 80014b8:	46ce      	mov	lr, r9
 80014ba:	0004      	movs	r4, r0
 80014bc:	0018      	movs	r0, r3
 80014be:	0016      	movs	r6, r2
 80014c0:	031b      	lsls	r3, r3, #12
 80014c2:	0b1b      	lsrs	r3, r3, #12
 80014c4:	4d2c      	ldr	r5, [pc, #176]	; (8001578 <__ledf2+0xc4>)
 80014c6:	004a      	lsls	r2, r1, #1
 80014c8:	4699      	mov	r9, r3
 80014ca:	b580      	push	{r7, lr}
 80014cc:	0043      	lsls	r3, r0, #1
 80014ce:	030f      	lsls	r7, r1, #12
 80014d0:	46a4      	mov	ip, r4
 80014d2:	46b0      	mov	r8, r6
 80014d4:	0b3f      	lsrs	r7, r7, #12
 80014d6:	0d52      	lsrs	r2, r2, #21
 80014d8:	0fc9      	lsrs	r1, r1, #31
 80014da:	0d5b      	lsrs	r3, r3, #21
 80014dc:	0fc0      	lsrs	r0, r0, #31
 80014de:	42aa      	cmp	r2, r5
 80014e0:	d00d      	beq.n	80014fe <__ledf2+0x4a>
 80014e2:	42ab      	cmp	r3, r5
 80014e4:	d010      	beq.n	8001508 <__ledf2+0x54>
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d127      	bne.n	800153a <__ledf2+0x86>
 80014ea:	433c      	orrs	r4, r7
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d111      	bne.n	8001514 <__ledf2+0x60>
 80014f0:	464d      	mov	r5, r9
 80014f2:	432e      	orrs	r6, r5
 80014f4:	d10e      	bne.n	8001514 <__ledf2+0x60>
 80014f6:	2000      	movs	r0, #0
 80014f8:	2c00      	cmp	r4, #0
 80014fa:	d015      	beq.n	8001528 <__ledf2+0x74>
 80014fc:	e00e      	b.n	800151c <__ledf2+0x68>
 80014fe:	003d      	movs	r5, r7
 8001500:	4325      	orrs	r5, r4
 8001502:	d110      	bne.n	8001526 <__ledf2+0x72>
 8001504:	4293      	cmp	r3, r2
 8001506:	d118      	bne.n	800153a <__ledf2+0x86>
 8001508:	464d      	mov	r5, r9
 800150a:	432e      	orrs	r6, r5
 800150c:	d10b      	bne.n	8001526 <__ledf2+0x72>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d102      	bne.n	8001518 <__ledf2+0x64>
 8001512:	433c      	orrs	r4, r7
 8001514:	2c00      	cmp	r4, #0
 8001516:	d00b      	beq.n	8001530 <__ledf2+0x7c>
 8001518:	4281      	cmp	r1, r0
 800151a:	d014      	beq.n	8001546 <__ledf2+0x92>
 800151c:	2002      	movs	r0, #2
 800151e:	3901      	subs	r1, #1
 8001520:	4008      	ands	r0, r1
 8001522:	3801      	subs	r0, #1
 8001524:	e000      	b.n	8001528 <__ledf2+0x74>
 8001526:	2002      	movs	r0, #2
 8001528:	bcc0      	pop	{r6, r7}
 800152a:	46b9      	mov	r9, r7
 800152c:	46b0      	mov	r8, r6
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001530:	2800      	cmp	r0, #0
 8001532:	d1f9      	bne.n	8001528 <__ledf2+0x74>
 8001534:	2001      	movs	r0, #1
 8001536:	4240      	negs	r0, r0
 8001538:	e7f6      	b.n	8001528 <__ledf2+0x74>
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1ec      	bne.n	8001518 <__ledf2+0x64>
 800153e:	464c      	mov	r4, r9
 8001540:	4326      	orrs	r6, r4
 8001542:	d1e9      	bne.n	8001518 <__ledf2+0x64>
 8001544:	e7ea      	b.n	800151c <__ledf2+0x68>
 8001546:	429a      	cmp	r2, r3
 8001548:	dd04      	ble.n	8001554 <__ledf2+0xa0>
 800154a:	4243      	negs	r3, r0
 800154c:	4158      	adcs	r0, r3
 800154e:	0040      	lsls	r0, r0, #1
 8001550:	3801      	subs	r0, #1
 8001552:	e7e9      	b.n	8001528 <__ledf2+0x74>
 8001554:	429a      	cmp	r2, r3
 8001556:	dbeb      	blt.n	8001530 <__ledf2+0x7c>
 8001558:	454f      	cmp	r7, r9
 800155a:	d8df      	bhi.n	800151c <__ledf2+0x68>
 800155c:	d006      	beq.n	800156c <__ledf2+0xb8>
 800155e:	2000      	movs	r0, #0
 8001560:	454f      	cmp	r7, r9
 8001562:	d2e1      	bcs.n	8001528 <__ledf2+0x74>
 8001564:	2900      	cmp	r1, #0
 8001566:	d0e5      	beq.n	8001534 <__ledf2+0x80>
 8001568:	0008      	movs	r0, r1
 800156a:	e7dd      	b.n	8001528 <__ledf2+0x74>
 800156c:	45c4      	cmp	ip, r8
 800156e:	d8d5      	bhi.n	800151c <__ledf2+0x68>
 8001570:	2000      	movs	r0, #0
 8001572:	45c4      	cmp	ip, r8
 8001574:	d2d8      	bcs.n	8001528 <__ledf2+0x74>
 8001576:	e7f5      	b.n	8001564 <__ledf2+0xb0>
 8001578:	000007ff 	.word	0x000007ff

0800157c <__aeabi_dmul>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4657      	mov	r7, sl
 8001580:	464e      	mov	r6, r9
 8001582:	4645      	mov	r5, r8
 8001584:	46de      	mov	lr, fp
 8001586:	b5e0      	push	{r5, r6, r7, lr}
 8001588:	4698      	mov	r8, r3
 800158a:	030c      	lsls	r4, r1, #12
 800158c:	004b      	lsls	r3, r1, #1
 800158e:	0006      	movs	r6, r0
 8001590:	4692      	mov	sl, r2
 8001592:	b087      	sub	sp, #28
 8001594:	0b24      	lsrs	r4, r4, #12
 8001596:	0d5b      	lsrs	r3, r3, #21
 8001598:	0fcf      	lsrs	r7, r1, #31
 800159a:	2b00      	cmp	r3, #0
 800159c:	d100      	bne.n	80015a0 <__aeabi_dmul+0x24>
 800159e:	e15c      	b.n	800185a <__aeabi_dmul+0x2de>
 80015a0:	4ad9      	ldr	r2, [pc, #868]	; (8001908 <__aeabi_dmul+0x38c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d100      	bne.n	80015a8 <__aeabi_dmul+0x2c>
 80015a6:	e175      	b.n	8001894 <__aeabi_dmul+0x318>
 80015a8:	0f42      	lsrs	r2, r0, #29
 80015aa:	00e4      	lsls	r4, r4, #3
 80015ac:	4314      	orrs	r4, r2
 80015ae:	2280      	movs	r2, #128	; 0x80
 80015b0:	0412      	lsls	r2, r2, #16
 80015b2:	4314      	orrs	r4, r2
 80015b4:	4ad5      	ldr	r2, [pc, #852]	; (800190c <__aeabi_dmul+0x390>)
 80015b6:	00c5      	lsls	r5, r0, #3
 80015b8:	4694      	mov	ip, r2
 80015ba:	4463      	add	r3, ip
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	4699      	mov	r9, r3
 80015c2:	469b      	mov	fp, r3
 80015c4:	4643      	mov	r3, r8
 80015c6:	4642      	mov	r2, r8
 80015c8:	031e      	lsls	r6, r3, #12
 80015ca:	0fd2      	lsrs	r2, r2, #31
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4650      	mov	r0, sl
 80015d0:	4690      	mov	r8, r2
 80015d2:	0b36      	lsrs	r6, r6, #12
 80015d4:	0d5b      	lsrs	r3, r3, #21
 80015d6:	d100      	bne.n	80015da <__aeabi_dmul+0x5e>
 80015d8:	e120      	b.n	800181c <__aeabi_dmul+0x2a0>
 80015da:	4acb      	ldr	r2, [pc, #812]	; (8001908 <__aeabi_dmul+0x38c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d100      	bne.n	80015e2 <__aeabi_dmul+0x66>
 80015e0:	e162      	b.n	80018a8 <__aeabi_dmul+0x32c>
 80015e2:	49ca      	ldr	r1, [pc, #808]	; (800190c <__aeabi_dmul+0x390>)
 80015e4:	0f42      	lsrs	r2, r0, #29
 80015e6:	468c      	mov	ip, r1
 80015e8:	9900      	ldr	r1, [sp, #0]
 80015ea:	4463      	add	r3, ip
 80015ec:	00f6      	lsls	r6, r6, #3
 80015ee:	468c      	mov	ip, r1
 80015f0:	4316      	orrs	r6, r2
 80015f2:	2280      	movs	r2, #128	; 0x80
 80015f4:	449c      	add	ip, r3
 80015f6:	0412      	lsls	r2, r2, #16
 80015f8:	4663      	mov	r3, ip
 80015fa:	4316      	orrs	r6, r2
 80015fc:	00c2      	lsls	r2, r0, #3
 80015fe:	2000      	movs	r0, #0
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	9900      	ldr	r1, [sp, #0]
 8001604:	4643      	mov	r3, r8
 8001606:	3101      	adds	r1, #1
 8001608:	468c      	mov	ip, r1
 800160a:	4649      	mov	r1, r9
 800160c:	407b      	eors	r3, r7
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	290f      	cmp	r1, #15
 8001612:	d826      	bhi.n	8001662 <__aeabi_dmul+0xe6>
 8001614:	4bbe      	ldr	r3, [pc, #760]	; (8001910 <__aeabi_dmul+0x394>)
 8001616:	0089      	lsls	r1, r1, #2
 8001618:	5859      	ldr	r1, [r3, r1]
 800161a:	468f      	mov	pc, r1
 800161c:	4643      	mov	r3, r8
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	0034      	movs	r4, r6
 8001622:	0015      	movs	r5, r2
 8001624:	4683      	mov	fp, r0
 8001626:	465b      	mov	r3, fp
 8001628:	2b02      	cmp	r3, #2
 800162a:	d016      	beq.n	800165a <__aeabi_dmul+0xde>
 800162c:	2b03      	cmp	r3, #3
 800162e:	d100      	bne.n	8001632 <__aeabi_dmul+0xb6>
 8001630:	e203      	b.n	8001a3a <__aeabi_dmul+0x4be>
 8001632:	2b01      	cmp	r3, #1
 8001634:	d000      	beq.n	8001638 <__aeabi_dmul+0xbc>
 8001636:	e0cd      	b.n	80017d4 <__aeabi_dmul+0x258>
 8001638:	2200      	movs	r2, #0
 800163a:	2400      	movs	r4, #0
 800163c:	2500      	movs	r5, #0
 800163e:	9b01      	ldr	r3, [sp, #4]
 8001640:	0512      	lsls	r2, r2, #20
 8001642:	4322      	orrs	r2, r4
 8001644:	07db      	lsls	r3, r3, #31
 8001646:	431a      	orrs	r2, r3
 8001648:	0028      	movs	r0, r5
 800164a:	0011      	movs	r1, r2
 800164c:	b007      	add	sp, #28
 800164e:	bcf0      	pop	{r4, r5, r6, r7}
 8001650:	46bb      	mov	fp, r7
 8001652:	46b2      	mov	sl, r6
 8001654:	46a9      	mov	r9, r5
 8001656:	46a0      	mov	r8, r4
 8001658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165a:	2400      	movs	r4, #0
 800165c:	2500      	movs	r5, #0
 800165e:	4aaa      	ldr	r2, [pc, #680]	; (8001908 <__aeabi_dmul+0x38c>)
 8001660:	e7ed      	b.n	800163e <__aeabi_dmul+0xc2>
 8001662:	0c28      	lsrs	r0, r5, #16
 8001664:	042d      	lsls	r5, r5, #16
 8001666:	0c2d      	lsrs	r5, r5, #16
 8001668:	002b      	movs	r3, r5
 800166a:	0c11      	lsrs	r1, r2, #16
 800166c:	0412      	lsls	r2, r2, #16
 800166e:	0c12      	lsrs	r2, r2, #16
 8001670:	4353      	muls	r3, r2
 8001672:	4698      	mov	r8, r3
 8001674:	0013      	movs	r3, r2
 8001676:	002f      	movs	r7, r5
 8001678:	4343      	muls	r3, r0
 800167a:	4699      	mov	r9, r3
 800167c:	434f      	muls	r7, r1
 800167e:	444f      	add	r7, r9
 8001680:	46bb      	mov	fp, r7
 8001682:	4647      	mov	r7, r8
 8001684:	000b      	movs	r3, r1
 8001686:	0c3f      	lsrs	r7, r7, #16
 8001688:	46ba      	mov	sl, r7
 800168a:	4343      	muls	r3, r0
 800168c:	44da      	add	sl, fp
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	45d1      	cmp	r9, sl
 8001692:	d904      	bls.n	800169e <__aeabi_dmul+0x122>
 8001694:	2780      	movs	r7, #128	; 0x80
 8001696:	027f      	lsls	r7, r7, #9
 8001698:	46b9      	mov	r9, r7
 800169a:	444b      	add	r3, r9
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	4653      	mov	r3, sl
 80016a0:	0c1b      	lsrs	r3, r3, #16
 80016a2:	469b      	mov	fp, r3
 80016a4:	4653      	mov	r3, sl
 80016a6:	041f      	lsls	r7, r3, #16
 80016a8:	4643      	mov	r3, r8
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	4698      	mov	r8, r3
 80016b0:	003b      	movs	r3, r7
 80016b2:	4443      	add	r3, r8
 80016b4:	9304      	str	r3, [sp, #16]
 80016b6:	0c33      	lsrs	r3, r6, #16
 80016b8:	0436      	lsls	r6, r6, #16
 80016ba:	0c36      	lsrs	r6, r6, #16
 80016bc:	4698      	mov	r8, r3
 80016be:	0033      	movs	r3, r6
 80016c0:	4343      	muls	r3, r0
 80016c2:	4699      	mov	r9, r3
 80016c4:	4643      	mov	r3, r8
 80016c6:	4343      	muls	r3, r0
 80016c8:	002f      	movs	r7, r5
 80016ca:	469a      	mov	sl, r3
 80016cc:	4643      	mov	r3, r8
 80016ce:	4377      	muls	r7, r6
 80016d0:	435d      	muls	r5, r3
 80016d2:	0c38      	lsrs	r0, r7, #16
 80016d4:	444d      	add	r5, r9
 80016d6:	1945      	adds	r5, r0, r5
 80016d8:	45a9      	cmp	r9, r5
 80016da:	d903      	bls.n	80016e4 <__aeabi_dmul+0x168>
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	025b      	lsls	r3, r3, #9
 80016e0:	4699      	mov	r9, r3
 80016e2:	44ca      	add	sl, r9
 80016e4:	043f      	lsls	r7, r7, #16
 80016e6:	0c28      	lsrs	r0, r5, #16
 80016e8:	0c3f      	lsrs	r7, r7, #16
 80016ea:	042d      	lsls	r5, r5, #16
 80016ec:	19ed      	adds	r5, r5, r7
 80016ee:	0c27      	lsrs	r7, r4, #16
 80016f0:	0424      	lsls	r4, r4, #16
 80016f2:	0c24      	lsrs	r4, r4, #16
 80016f4:	0003      	movs	r3, r0
 80016f6:	0020      	movs	r0, r4
 80016f8:	4350      	muls	r0, r2
 80016fa:	437a      	muls	r2, r7
 80016fc:	4691      	mov	r9, r2
 80016fe:	003a      	movs	r2, r7
 8001700:	4453      	add	r3, sl
 8001702:	9305      	str	r3, [sp, #20]
 8001704:	0c03      	lsrs	r3, r0, #16
 8001706:	469a      	mov	sl, r3
 8001708:	434a      	muls	r2, r1
 800170a:	4361      	muls	r1, r4
 800170c:	4449      	add	r1, r9
 800170e:	4451      	add	r1, sl
 8001710:	44ab      	add	fp, r5
 8001712:	4589      	cmp	r9, r1
 8001714:	d903      	bls.n	800171e <__aeabi_dmul+0x1a2>
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	025b      	lsls	r3, r3, #9
 800171a:	4699      	mov	r9, r3
 800171c:	444a      	add	r2, r9
 800171e:	0400      	lsls	r0, r0, #16
 8001720:	0c0b      	lsrs	r3, r1, #16
 8001722:	0c00      	lsrs	r0, r0, #16
 8001724:	0409      	lsls	r1, r1, #16
 8001726:	1809      	adds	r1, r1, r0
 8001728:	0020      	movs	r0, r4
 800172a:	4699      	mov	r9, r3
 800172c:	4643      	mov	r3, r8
 800172e:	4370      	muls	r0, r6
 8001730:	435c      	muls	r4, r3
 8001732:	437e      	muls	r6, r7
 8001734:	435f      	muls	r7, r3
 8001736:	0c03      	lsrs	r3, r0, #16
 8001738:	4698      	mov	r8, r3
 800173a:	19a4      	adds	r4, r4, r6
 800173c:	4444      	add	r4, r8
 800173e:	444a      	add	r2, r9
 8001740:	9703      	str	r7, [sp, #12]
 8001742:	42a6      	cmp	r6, r4
 8001744:	d904      	bls.n	8001750 <__aeabi_dmul+0x1d4>
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	4698      	mov	r8, r3
 800174c:	4447      	add	r7, r8
 800174e:	9703      	str	r7, [sp, #12]
 8001750:	0423      	lsls	r3, r4, #16
 8001752:	9e02      	ldr	r6, [sp, #8]
 8001754:	469a      	mov	sl, r3
 8001756:	9b05      	ldr	r3, [sp, #20]
 8001758:	445e      	add	r6, fp
 800175a:	4698      	mov	r8, r3
 800175c:	42ae      	cmp	r6, r5
 800175e:	41ad      	sbcs	r5, r5
 8001760:	1876      	adds	r6, r6, r1
 8001762:	428e      	cmp	r6, r1
 8001764:	4189      	sbcs	r1, r1
 8001766:	0400      	lsls	r0, r0, #16
 8001768:	0c00      	lsrs	r0, r0, #16
 800176a:	4450      	add	r0, sl
 800176c:	4440      	add	r0, r8
 800176e:	426d      	negs	r5, r5
 8001770:	1947      	adds	r7, r0, r5
 8001772:	46b8      	mov	r8, r7
 8001774:	4693      	mov	fp, r2
 8001776:	4249      	negs	r1, r1
 8001778:	4689      	mov	r9, r1
 800177a:	44c3      	add	fp, r8
 800177c:	44d9      	add	r9, fp
 800177e:	4298      	cmp	r0, r3
 8001780:	4180      	sbcs	r0, r0
 8001782:	45a8      	cmp	r8, r5
 8001784:	41ad      	sbcs	r5, r5
 8001786:	4593      	cmp	fp, r2
 8001788:	4192      	sbcs	r2, r2
 800178a:	4589      	cmp	r9, r1
 800178c:	4189      	sbcs	r1, r1
 800178e:	426d      	negs	r5, r5
 8001790:	4240      	negs	r0, r0
 8001792:	4328      	orrs	r0, r5
 8001794:	0c24      	lsrs	r4, r4, #16
 8001796:	4252      	negs	r2, r2
 8001798:	4249      	negs	r1, r1
 800179a:	430a      	orrs	r2, r1
 800179c:	9b03      	ldr	r3, [sp, #12]
 800179e:	1900      	adds	r0, r0, r4
 80017a0:	1880      	adds	r0, r0, r2
 80017a2:	18c7      	adds	r7, r0, r3
 80017a4:	464b      	mov	r3, r9
 80017a6:	0ddc      	lsrs	r4, r3, #23
 80017a8:	9b04      	ldr	r3, [sp, #16]
 80017aa:	0275      	lsls	r5, r6, #9
 80017ac:	431d      	orrs	r5, r3
 80017ae:	1e6a      	subs	r2, r5, #1
 80017b0:	4195      	sbcs	r5, r2
 80017b2:	464b      	mov	r3, r9
 80017b4:	0df6      	lsrs	r6, r6, #23
 80017b6:	027f      	lsls	r7, r7, #9
 80017b8:	4335      	orrs	r5, r6
 80017ba:	025a      	lsls	r2, r3, #9
 80017bc:	433c      	orrs	r4, r7
 80017be:	4315      	orrs	r5, r2
 80017c0:	01fb      	lsls	r3, r7, #7
 80017c2:	d400      	bmi.n	80017c6 <__aeabi_dmul+0x24a>
 80017c4:	e11c      	b.n	8001a00 <__aeabi_dmul+0x484>
 80017c6:	2101      	movs	r1, #1
 80017c8:	086a      	lsrs	r2, r5, #1
 80017ca:	400d      	ands	r5, r1
 80017cc:	4315      	orrs	r5, r2
 80017ce:	07e2      	lsls	r2, r4, #31
 80017d0:	4315      	orrs	r5, r2
 80017d2:	0864      	lsrs	r4, r4, #1
 80017d4:	494f      	ldr	r1, [pc, #316]	; (8001914 <__aeabi_dmul+0x398>)
 80017d6:	4461      	add	r1, ip
 80017d8:	2900      	cmp	r1, #0
 80017da:	dc00      	bgt.n	80017de <__aeabi_dmul+0x262>
 80017dc:	e0b0      	b.n	8001940 <__aeabi_dmul+0x3c4>
 80017de:	076b      	lsls	r3, r5, #29
 80017e0:	d009      	beq.n	80017f6 <__aeabi_dmul+0x27a>
 80017e2:	220f      	movs	r2, #15
 80017e4:	402a      	ands	r2, r5
 80017e6:	2a04      	cmp	r2, #4
 80017e8:	d005      	beq.n	80017f6 <__aeabi_dmul+0x27a>
 80017ea:	1d2a      	adds	r2, r5, #4
 80017ec:	42aa      	cmp	r2, r5
 80017ee:	41ad      	sbcs	r5, r5
 80017f0:	426d      	negs	r5, r5
 80017f2:	1964      	adds	r4, r4, r5
 80017f4:	0015      	movs	r5, r2
 80017f6:	01e3      	lsls	r3, r4, #7
 80017f8:	d504      	bpl.n	8001804 <__aeabi_dmul+0x288>
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	4a46      	ldr	r2, [pc, #280]	; (8001918 <__aeabi_dmul+0x39c>)
 80017fe:	00c9      	lsls	r1, r1, #3
 8001800:	4014      	ands	r4, r2
 8001802:	4461      	add	r1, ip
 8001804:	4a45      	ldr	r2, [pc, #276]	; (800191c <__aeabi_dmul+0x3a0>)
 8001806:	4291      	cmp	r1, r2
 8001808:	dd00      	ble.n	800180c <__aeabi_dmul+0x290>
 800180a:	e726      	b.n	800165a <__aeabi_dmul+0xde>
 800180c:	0762      	lsls	r2, r4, #29
 800180e:	08ed      	lsrs	r5, r5, #3
 8001810:	0264      	lsls	r4, r4, #9
 8001812:	0549      	lsls	r1, r1, #21
 8001814:	4315      	orrs	r5, r2
 8001816:	0b24      	lsrs	r4, r4, #12
 8001818:	0d4a      	lsrs	r2, r1, #21
 800181a:	e710      	b.n	800163e <__aeabi_dmul+0xc2>
 800181c:	4652      	mov	r2, sl
 800181e:	4332      	orrs	r2, r6
 8001820:	d100      	bne.n	8001824 <__aeabi_dmul+0x2a8>
 8001822:	e07f      	b.n	8001924 <__aeabi_dmul+0x3a8>
 8001824:	2e00      	cmp	r6, #0
 8001826:	d100      	bne.n	800182a <__aeabi_dmul+0x2ae>
 8001828:	e0dc      	b.n	80019e4 <__aeabi_dmul+0x468>
 800182a:	0030      	movs	r0, r6
 800182c:	f000 fe00 	bl	8002430 <__clzsi2>
 8001830:	0002      	movs	r2, r0
 8001832:	3a0b      	subs	r2, #11
 8001834:	231d      	movs	r3, #29
 8001836:	0001      	movs	r1, r0
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	4652      	mov	r2, sl
 800183c:	3908      	subs	r1, #8
 800183e:	40da      	lsrs	r2, r3
 8001840:	408e      	lsls	r6, r1
 8001842:	4316      	orrs	r6, r2
 8001844:	4652      	mov	r2, sl
 8001846:	408a      	lsls	r2, r1
 8001848:	9b00      	ldr	r3, [sp, #0]
 800184a:	4935      	ldr	r1, [pc, #212]	; (8001920 <__aeabi_dmul+0x3a4>)
 800184c:	1a18      	subs	r0, r3, r0
 800184e:	0003      	movs	r3, r0
 8001850:	468c      	mov	ip, r1
 8001852:	4463      	add	r3, ip
 8001854:	2000      	movs	r0, #0
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	e6d3      	b.n	8001602 <__aeabi_dmul+0x86>
 800185a:	0025      	movs	r5, r4
 800185c:	4305      	orrs	r5, r0
 800185e:	d04a      	beq.n	80018f6 <__aeabi_dmul+0x37a>
 8001860:	2c00      	cmp	r4, #0
 8001862:	d100      	bne.n	8001866 <__aeabi_dmul+0x2ea>
 8001864:	e0b0      	b.n	80019c8 <__aeabi_dmul+0x44c>
 8001866:	0020      	movs	r0, r4
 8001868:	f000 fde2 	bl	8002430 <__clzsi2>
 800186c:	0001      	movs	r1, r0
 800186e:	0002      	movs	r2, r0
 8001870:	390b      	subs	r1, #11
 8001872:	231d      	movs	r3, #29
 8001874:	0010      	movs	r0, r2
 8001876:	1a5b      	subs	r3, r3, r1
 8001878:	0031      	movs	r1, r6
 800187a:	0035      	movs	r5, r6
 800187c:	3808      	subs	r0, #8
 800187e:	4084      	lsls	r4, r0
 8001880:	40d9      	lsrs	r1, r3
 8001882:	4085      	lsls	r5, r0
 8001884:	430c      	orrs	r4, r1
 8001886:	4826      	ldr	r0, [pc, #152]	; (8001920 <__aeabi_dmul+0x3a4>)
 8001888:	1a83      	subs	r3, r0, r2
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2300      	movs	r3, #0
 800188e:	4699      	mov	r9, r3
 8001890:	469b      	mov	fp, r3
 8001892:	e697      	b.n	80015c4 <__aeabi_dmul+0x48>
 8001894:	0005      	movs	r5, r0
 8001896:	4325      	orrs	r5, r4
 8001898:	d126      	bne.n	80018e8 <__aeabi_dmul+0x36c>
 800189a:	2208      	movs	r2, #8
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2302      	movs	r3, #2
 80018a0:	2400      	movs	r4, #0
 80018a2:	4691      	mov	r9, r2
 80018a4:	469b      	mov	fp, r3
 80018a6:	e68d      	b.n	80015c4 <__aeabi_dmul+0x48>
 80018a8:	4652      	mov	r2, sl
 80018aa:	9b00      	ldr	r3, [sp, #0]
 80018ac:	4332      	orrs	r2, r6
 80018ae:	d110      	bne.n	80018d2 <__aeabi_dmul+0x356>
 80018b0:	4915      	ldr	r1, [pc, #84]	; (8001908 <__aeabi_dmul+0x38c>)
 80018b2:	2600      	movs	r6, #0
 80018b4:	468c      	mov	ip, r1
 80018b6:	4463      	add	r3, ip
 80018b8:	4649      	mov	r1, r9
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2302      	movs	r3, #2
 80018be:	4319      	orrs	r1, r3
 80018c0:	4689      	mov	r9, r1
 80018c2:	2002      	movs	r0, #2
 80018c4:	e69d      	b.n	8001602 <__aeabi_dmul+0x86>
 80018c6:	465b      	mov	r3, fp
 80018c8:	9701      	str	r7, [sp, #4]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d000      	beq.n	80018d0 <__aeabi_dmul+0x354>
 80018ce:	e6ad      	b.n	800162c <__aeabi_dmul+0xb0>
 80018d0:	e6c3      	b.n	800165a <__aeabi_dmul+0xde>
 80018d2:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <__aeabi_dmul+0x38c>)
 80018d4:	2003      	movs	r0, #3
 80018d6:	4694      	mov	ip, r2
 80018d8:	4463      	add	r3, ip
 80018da:	464a      	mov	r2, r9
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2303      	movs	r3, #3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	4691      	mov	r9, r2
 80018e4:	4652      	mov	r2, sl
 80018e6:	e68c      	b.n	8001602 <__aeabi_dmul+0x86>
 80018e8:	220c      	movs	r2, #12
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2303      	movs	r3, #3
 80018ee:	0005      	movs	r5, r0
 80018f0:	4691      	mov	r9, r2
 80018f2:	469b      	mov	fp, r3
 80018f4:	e666      	b.n	80015c4 <__aeabi_dmul+0x48>
 80018f6:	2304      	movs	r3, #4
 80018f8:	4699      	mov	r9, r3
 80018fa:	2300      	movs	r3, #0
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	2400      	movs	r4, #0
 8001902:	469b      	mov	fp, r3
 8001904:	e65e      	b.n	80015c4 <__aeabi_dmul+0x48>
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	000007ff 	.word	0x000007ff
 800190c:	fffffc01 	.word	0xfffffc01
 8001910:	0800c204 	.word	0x0800c204
 8001914:	000003ff 	.word	0x000003ff
 8001918:	feffffff 	.word	0xfeffffff
 800191c:	000007fe 	.word	0x000007fe
 8001920:	fffffc0d 	.word	0xfffffc0d
 8001924:	4649      	mov	r1, r9
 8001926:	2301      	movs	r3, #1
 8001928:	4319      	orrs	r1, r3
 800192a:	4689      	mov	r9, r1
 800192c:	2600      	movs	r6, #0
 800192e:	2001      	movs	r0, #1
 8001930:	e667      	b.n	8001602 <__aeabi_dmul+0x86>
 8001932:	2300      	movs	r3, #0
 8001934:	2480      	movs	r4, #128	; 0x80
 8001936:	2500      	movs	r5, #0
 8001938:	4a43      	ldr	r2, [pc, #268]	; (8001a48 <__aeabi_dmul+0x4cc>)
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	0324      	lsls	r4, r4, #12
 800193e:	e67e      	b.n	800163e <__aeabi_dmul+0xc2>
 8001940:	2001      	movs	r0, #1
 8001942:	1a40      	subs	r0, r0, r1
 8001944:	2838      	cmp	r0, #56	; 0x38
 8001946:	dd00      	ble.n	800194a <__aeabi_dmul+0x3ce>
 8001948:	e676      	b.n	8001638 <__aeabi_dmul+0xbc>
 800194a:	281f      	cmp	r0, #31
 800194c:	dd5b      	ble.n	8001a06 <__aeabi_dmul+0x48a>
 800194e:	221f      	movs	r2, #31
 8001950:	0023      	movs	r3, r4
 8001952:	4252      	negs	r2, r2
 8001954:	1a51      	subs	r1, r2, r1
 8001956:	40cb      	lsrs	r3, r1
 8001958:	0019      	movs	r1, r3
 800195a:	2820      	cmp	r0, #32
 800195c:	d003      	beq.n	8001966 <__aeabi_dmul+0x3ea>
 800195e:	4a3b      	ldr	r2, [pc, #236]	; (8001a4c <__aeabi_dmul+0x4d0>)
 8001960:	4462      	add	r2, ip
 8001962:	4094      	lsls	r4, r2
 8001964:	4325      	orrs	r5, r4
 8001966:	1e6a      	subs	r2, r5, #1
 8001968:	4195      	sbcs	r5, r2
 800196a:	002a      	movs	r2, r5
 800196c:	430a      	orrs	r2, r1
 800196e:	2107      	movs	r1, #7
 8001970:	000d      	movs	r5, r1
 8001972:	2400      	movs	r4, #0
 8001974:	4015      	ands	r5, r2
 8001976:	4211      	tst	r1, r2
 8001978:	d05b      	beq.n	8001a32 <__aeabi_dmul+0x4b6>
 800197a:	210f      	movs	r1, #15
 800197c:	2400      	movs	r4, #0
 800197e:	4011      	ands	r1, r2
 8001980:	2904      	cmp	r1, #4
 8001982:	d053      	beq.n	8001a2c <__aeabi_dmul+0x4b0>
 8001984:	1d11      	adds	r1, r2, #4
 8001986:	4291      	cmp	r1, r2
 8001988:	4192      	sbcs	r2, r2
 800198a:	4252      	negs	r2, r2
 800198c:	18a4      	adds	r4, r4, r2
 800198e:	000a      	movs	r2, r1
 8001990:	0223      	lsls	r3, r4, #8
 8001992:	d54b      	bpl.n	8001a2c <__aeabi_dmul+0x4b0>
 8001994:	2201      	movs	r2, #1
 8001996:	2400      	movs	r4, #0
 8001998:	2500      	movs	r5, #0
 800199a:	e650      	b.n	800163e <__aeabi_dmul+0xc2>
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	031b      	lsls	r3, r3, #12
 80019a0:	421c      	tst	r4, r3
 80019a2:	d009      	beq.n	80019b8 <__aeabi_dmul+0x43c>
 80019a4:	421e      	tst	r6, r3
 80019a6:	d107      	bne.n	80019b8 <__aeabi_dmul+0x43c>
 80019a8:	4333      	orrs	r3, r6
 80019aa:	031c      	lsls	r4, r3, #12
 80019ac:	4643      	mov	r3, r8
 80019ae:	0015      	movs	r5, r2
 80019b0:	0b24      	lsrs	r4, r4, #12
 80019b2:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <__aeabi_dmul+0x4cc>)
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	e642      	b.n	800163e <__aeabi_dmul+0xc2>
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	0312      	lsls	r2, r2, #12
 80019bc:	4314      	orrs	r4, r2
 80019be:	0324      	lsls	r4, r4, #12
 80019c0:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <__aeabi_dmul+0x4cc>)
 80019c2:	0b24      	lsrs	r4, r4, #12
 80019c4:	9701      	str	r7, [sp, #4]
 80019c6:	e63a      	b.n	800163e <__aeabi_dmul+0xc2>
 80019c8:	f000 fd32 	bl	8002430 <__clzsi2>
 80019cc:	0001      	movs	r1, r0
 80019ce:	0002      	movs	r2, r0
 80019d0:	3115      	adds	r1, #21
 80019d2:	3220      	adds	r2, #32
 80019d4:	291c      	cmp	r1, #28
 80019d6:	dc00      	bgt.n	80019da <__aeabi_dmul+0x45e>
 80019d8:	e74b      	b.n	8001872 <__aeabi_dmul+0x2f6>
 80019da:	0034      	movs	r4, r6
 80019dc:	3808      	subs	r0, #8
 80019de:	2500      	movs	r5, #0
 80019e0:	4084      	lsls	r4, r0
 80019e2:	e750      	b.n	8001886 <__aeabi_dmul+0x30a>
 80019e4:	f000 fd24 	bl	8002430 <__clzsi2>
 80019e8:	0003      	movs	r3, r0
 80019ea:	001a      	movs	r2, r3
 80019ec:	3215      	adds	r2, #21
 80019ee:	3020      	adds	r0, #32
 80019f0:	2a1c      	cmp	r2, #28
 80019f2:	dc00      	bgt.n	80019f6 <__aeabi_dmul+0x47a>
 80019f4:	e71e      	b.n	8001834 <__aeabi_dmul+0x2b8>
 80019f6:	4656      	mov	r6, sl
 80019f8:	3b08      	subs	r3, #8
 80019fa:	2200      	movs	r2, #0
 80019fc:	409e      	lsls	r6, r3
 80019fe:	e723      	b.n	8001848 <__aeabi_dmul+0x2cc>
 8001a00:	9b00      	ldr	r3, [sp, #0]
 8001a02:	469c      	mov	ip, r3
 8001a04:	e6e6      	b.n	80017d4 <__aeabi_dmul+0x258>
 8001a06:	4912      	ldr	r1, [pc, #72]	; (8001a50 <__aeabi_dmul+0x4d4>)
 8001a08:	0022      	movs	r2, r4
 8001a0a:	4461      	add	r1, ip
 8001a0c:	002e      	movs	r6, r5
 8001a0e:	408d      	lsls	r5, r1
 8001a10:	408a      	lsls	r2, r1
 8001a12:	40c6      	lsrs	r6, r0
 8001a14:	1e69      	subs	r1, r5, #1
 8001a16:	418d      	sbcs	r5, r1
 8001a18:	4332      	orrs	r2, r6
 8001a1a:	432a      	orrs	r2, r5
 8001a1c:	40c4      	lsrs	r4, r0
 8001a1e:	0753      	lsls	r3, r2, #29
 8001a20:	d0b6      	beq.n	8001990 <__aeabi_dmul+0x414>
 8001a22:	210f      	movs	r1, #15
 8001a24:	4011      	ands	r1, r2
 8001a26:	2904      	cmp	r1, #4
 8001a28:	d1ac      	bne.n	8001984 <__aeabi_dmul+0x408>
 8001a2a:	e7b1      	b.n	8001990 <__aeabi_dmul+0x414>
 8001a2c:	0765      	lsls	r5, r4, #29
 8001a2e:	0264      	lsls	r4, r4, #9
 8001a30:	0b24      	lsrs	r4, r4, #12
 8001a32:	08d2      	lsrs	r2, r2, #3
 8001a34:	4315      	orrs	r5, r2
 8001a36:	2200      	movs	r2, #0
 8001a38:	e601      	b.n	800163e <__aeabi_dmul+0xc2>
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	0312      	lsls	r2, r2, #12
 8001a3e:	4314      	orrs	r4, r2
 8001a40:	0324      	lsls	r4, r4, #12
 8001a42:	4a01      	ldr	r2, [pc, #4]	; (8001a48 <__aeabi_dmul+0x4cc>)
 8001a44:	0b24      	lsrs	r4, r4, #12
 8001a46:	e5fa      	b.n	800163e <__aeabi_dmul+0xc2>
 8001a48:	000007ff 	.word	0x000007ff
 8001a4c:	0000043e 	.word	0x0000043e
 8001a50:	0000041e 	.word	0x0000041e

08001a54 <__aeabi_dsub>:
 8001a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a56:	4657      	mov	r7, sl
 8001a58:	464e      	mov	r6, r9
 8001a5a:	4645      	mov	r5, r8
 8001a5c:	46de      	mov	lr, fp
 8001a5e:	b5e0      	push	{r5, r6, r7, lr}
 8001a60:	001e      	movs	r6, r3
 8001a62:	0017      	movs	r7, r2
 8001a64:	004a      	lsls	r2, r1, #1
 8001a66:	030b      	lsls	r3, r1, #12
 8001a68:	0d52      	lsrs	r2, r2, #21
 8001a6a:	0a5b      	lsrs	r3, r3, #9
 8001a6c:	4690      	mov	r8, r2
 8001a6e:	0f42      	lsrs	r2, r0, #29
 8001a70:	431a      	orrs	r2, r3
 8001a72:	0fcd      	lsrs	r5, r1, #31
 8001a74:	4ccd      	ldr	r4, [pc, #820]	; (8001dac <__aeabi_dsub+0x358>)
 8001a76:	0331      	lsls	r1, r6, #12
 8001a78:	00c3      	lsls	r3, r0, #3
 8001a7a:	4694      	mov	ip, r2
 8001a7c:	0070      	lsls	r0, r6, #1
 8001a7e:	0f7a      	lsrs	r2, r7, #29
 8001a80:	0a49      	lsrs	r1, r1, #9
 8001a82:	00ff      	lsls	r7, r7, #3
 8001a84:	469a      	mov	sl, r3
 8001a86:	46b9      	mov	r9, r7
 8001a88:	0d40      	lsrs	r0, r0, #21
 8001a8a:	0ff6      	lsrs	r6, r6, #31
 8001a8c:	4311      	orrs	r1, r2
 8001a8e:	42a0      	cmp	r0, r4
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x40>
 8001a92:	e0b1      	b.n	8001bf8 <__aeabi_dsub+0x1a4>
 8001a94:	2201      	movs	r2, #1
 8001a96:	4056      	eors	r6, r2
 8001a98:	46b3      	mov	fp, r6
 8001a9a:	42b5      	cmp	r5, r6
 8001a9c:	d100      	bne.n	8001aa0 <__aeabi_dsub+0x4c>
 8001a9e:	e088      	b.n	8001bb2 <__aeabi_dsub+0x15e>
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	1a12      	subs	r2, r2, r0
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	dc00      	bgt.n	8001aaa <__aeabi_dsub+0x56>
 8001aa8:	e0ae      	b.n	8001c08 <__aeabi_dsub+0x1b4>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d100      	bne.n	8001ab0 <__aeabi_dsub+0x5c>
 8001aae:	e0c1      	b.n	8001c34 <__aeabi_dsub+0x1e0>
 8001ab0:	48be      	ldr	r0, [pc, #760]	; (8001dac <__aeabi_dsub+0x358>)
 8001ab2:	4580      	cmp	r8, r0
 8001ab4:	d100      	bne.n	8001ab8 <__aeabi_dsub+0x64>
 8001ab6:	e151      	b.n	8001d5c <__aeabi_dsub+0x308>
 8001ab8:	2080      	movs	r0, #128	; 0x80
 8001aba:	0400      	lsls	r0, r0, #16
 8001abc:	4301      	orrs	r1, r0
 8001abe:	2a38      	cmp	r2, #56	; 0x38
 8001ac0:	dd00      	ble.n	8001ac4 <__aeabi_dsub+0x70>
 8001ac2:	e17b      	b.n	8001dbc <__aeabi_dsub+0x368>
 8001ac4:	2a1f      	cmp	r2, #31
 8001ac6:	dd00      	ble.n	8001aca <__aeabi_dsub+0x76>
 8001ac8:	e1ee      	b.n	8001ea8 <__aeabi_dsub+0x454>
 8001aca:	2020      	movs	r0, #32
 8001acc:	003e      	movs	r6, r7
 8001ace:	1a80      	subs	r0, r0, r2
 8001ad0:	000c      	movs	r4, r1
 8001ad2:	40d6      	lsrs	r6, r2
 8001ad4:	40d1      	lsrs	r1, r2
 8001ad6:	4087      	lsls	r7, r0
 8001ad8:	4662      	mov	r2, ip
 8001ada:	4084      	lsls	r4, r0
 8001adc:	1a52      	subs	r2, r2, r1
 8001ade:	1e78      	subs	r0, r7, #1
 8001ae0:	4187      	sbcs	r7, r0
 8001ae2:	4694      	mov	ip, r2
 8001ae4:	4334      	orrs	r4, r6
 8001ae6:	4327      	orrs	r7, r4
 8001ae8:	1bdc      	subs	r4, r3, r7
 8001aea:	42a3      	cmp	r3, r4
 8001aec:	419b      	sbcs	r3, r3
 8001aee:	4662      	mov	r2, ip
 8001af0:	425b      	negs	r3, r3
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4699      	mov	r9, r3
 8001af6:	464b      	mov	r3, r9
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	d400      	bmi.n	8001afe <__aeabi_dsub+0xaa>
 8001afc:	e118      	b.n	8001d30 <__aeabi_dsub+0x2dc>
 8001afe:	464b      	mov	r3, r9
 8001b00:	0258      	lsls	r0, r3, #9
 8001b02:	0a43      	lsrs	r3, r0, #9
 8001b04:	4699      	mov	r9, r3
 8001b06:	464b      	mov	r3, r9
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_dsub+0xba>
 8001b0c:	e137      	b.n	8001d7e <__aeabi_dsub+0x32a>
 8001b0e:	4648      	mov	r0, r9
 8001b10:	f000 fc8e 	bl	8002430 <__clzsi2>
 8001b14:	0001      	movs	r1, r0
 8001b16:	3908      	subs	r1, #8
 8001b18:	2320      	movs	r3, #32
 8001b1a:	0022      	movs	r2, r4
 8001b1c:	4648      	mov	r0, r9
 8001b1e:	1a5b      	subs	r3, r3, r1
 8001b20:	40da      	lsrs	r2, r3
 8001b22:	4088      	lsls	r0, r1
 8001b24:	408c      	lsls	r4, r1
 8001b26:	4643      	mov	r3, r8
 8001b28:	4310      	orrs	r0, r2
 8001b2a:	4588      	cmp	r8, r1
 8001b2c:	dd00      	ble.n	8001b30 <__aeabi_dsub+0xdc>
 8001b2e:	e136      	b.n	8001d9e <__aeabi_dsub+0x34a>
 8001b30:	1ac9      	subs	r1, r1, r3
 8001b32:	1c4b      	adds	r3, r1, #1
 8001b34:	2b1f      	cmp	r3, #31
 8001b36:	dd00      	ble.n	8001b3a <__aeabi_dsub+0xe6>
 8001b38:	e0ea      	b.n	8001d10 <__aeabi_dsub+0x2bc>
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	0026      	movs	r6, r4
 8001b3e:	1ad2      	subs	r2, r2, r3
 8001b40:	0001      	movs	r1, r0
 8001b42:	4094      	lsls	r4, r2
 8001b44:	40de      	lsrs	r6, r3
 8001b46:	40d8      	lsrs	r0, r3
 8001b48:	2300      	movs	r3, #0
 8001b4a:	4091      	lsls	r1, r2
 8001b4c:	1e62      	subs	r2, r4, #1
 8001b4e:	4194      	sbcs	r4, r2
 8001b50:	4681      	mov	r9, r0
 8001b52:	4698      	mov	r8, r3
 8001b54:	4331      	orrs	r1, r6
 8001b56:	430c      	orrs	r4, r1
 8001b58:	0763      	lsls	r3, r4, #29
 8001b5a:	d009      	beq.n	8001b70 <__aeabi_dsub+0x11c>
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	4023      	ands	r3, r4
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d005      	beq.n	8001b70 <__aeabi_dsub+0x11c>
 8001b64:	1d23      	adds	r3, r4, #4
 8001b66:	42a3      	cmp	r3, r4
 8001b68:	41a4      	sbcs	r4, r4
 8001b6a:	4264      	negs	r4, r4
 8001b6c:	44a1      	add	r9, r4
 8001b6e:	001c      	movs	r4, r3
 8001b70:	464b      	mov	r3, r9
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	d400      	bmi.n	8001b78 <__aeabi_dsub+0x124>
 8001b76:	e0de      	b.n	8001d36 <__aeabi_dsub+0x2e2>
 8001b78:	4641      	mov	r1, r8
 8001b7a:	4b8c      	ldr	r3, [pc, #560]	; (8001dac <__aeabi_dsub+0x358>)
 8001b7c:	3101      	adds	r1, #1
 8001b7e:	4299      	cmp	r1, r3
 8001b80:	d100      	bne.n	8001b84 <__aeabi_dsub+0x130>
 8001b82:	e0e7      	b.n	8001d54 <__aeabi_dsub+0x300>
 8001b84:	464b      	mov	r3, r9
 8001b86:	488a      	ldr	r0, [pc, #552]	; (8001db0 <__aeabi_dsub+0x35c>)
 8001b88:	08e4      	lsrs	r4, r4, #3
 8001b8a:	4003      	ands	r3, r0
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	0549      	lsls	r1, r1, #21
 8001b90:	075b      	lsls	r3, r3, #29
 8001b92:	0240      	lsls	r0, r0, #9
 8001b94:	4323      	orrs	r3, r4
 8001b96:	0d4a      	lsrs	r2, r1, #21
 8001b98:	0b04      	lsrs	r4, r0, #12
 8001b9a:	0512      	lsls	r2, r2, #20
 8001b9c:	07ed      	lsls	r5, r5, #31
 8001b9e:	4322      	orrs	r2, r4
 8001ba0:	432a      	orrs	r2, r5
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	0011      	movs	r1, r2
 8001ba6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ba8:	46bb      	mov	fp, r7
 8001baa:	46b2      	mov	sl, r6
 8001bac:	46a9      	mov	r9, r5
 8001bae:	46a0      	mov	r8, r4
 8001bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bb2:	4642      	mov	r2, r8
 8001bb4:	1a12      	subs	r2, r2, r0
 8001bb6:	2a00      	cmp	r2, #0
 8001bb8:	dd52      	ble.n	8001c60 <__aeabi_dsub+0x20c>
 8001bba:	2800      	cmp	r0, #0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x16c>
 8001bbe:	e09c      	b.n	8001cfa <__aeabi_dsub+0x2a6>
 8001bc0:	45a0      	cmp	r8, r4
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x172>
 8001bc4:	e0ca      	b.n	8001d5c <__aeabi_dsub+0x308>
 8001bc6:	2080      	movs	r0, #128	; 0x80
 8001bc8:	0400      	lsls	r0, r0, #16
 8001bca:	4301      	orrs	r1, r0
 8001bcc:	2a38      	cmp	r2, #56	; 0x38
 8001bce:	dd00      	ble.n	8001bd2 <__aeabi_dsub+0x17e>
 8001bd0:	e149      	b.n	8001e66 <__aeabi_dsub+0x412>
 8001bd2:	2a1f      	cmp	r2, #31
 8001bd4:	dc00      	bgt.n	8001bd8 <__aeabi_dsub+0x184>
 8001bd6:	e197      	b.n	8001f08 <__aeabi_dsub+0x4b4>
 8001bd8:	0010      	movs	r0, r2
 8001bda:	000e      	movs	r6, r1
 8001bdc:	3820      	subs	r0, #32
 8001bde:	40c6      	lsrs	r6, r0
 8001be0:	2a20      	cmp	r2, #32
 8001be2:	d004      	beq.n	8001bee <__aeabi_dsub+0x19a>
 8001be4:	2040      	movs	r0, #64	; 0x40
 8001be6:	1a82      	subs	r2, r0, r2
 8001be8:	4091      	lsls	r1, r2
 8001bea:	430f      	orrs	r7, r1
 8001bec:	46b9      	mov	r9, r7
 8001bee:	464c      	mov	r4, r9
 8001bf0:	1e62      	subs	r2, r4, #1
 8001bf2:	4194      	sbcs	r4, r2
 8001bf4:	4334      	orrs	r4, r6
 8001bf6:	e13a      	b.n	8001e6e <__aeabi_dsub+0x41a>
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	433a      	orrs	r2, r7
 8001bfc:	d028      	beq.n	8001c50 <__aeabi_dsub+0x1fc>
 8001bfe:	46b3      	mov	fp, r6
 8001c00:	42b5      	cmp	r5, r6
 8001c02:	d02b      	beq.n	8001c5c <__aeabi_dsub+0x208>
 8001c04:	4a6b      	ldr	r2, [pc, #428]	; (8001db4 <__aeabi_dsub+0x360>)
 8001c06:	4442      	add	r2, r8
 8001c08:	2a00      	cmp	r2, #0
 8001c0a:	d05d      	beq.n	8001cc8 <__aeabi_dsub+0x274>
 8001c0c:	4642      	mov	r2, r8
 8001c0e:	4644      	mov	r4, r8
 8001c10:	1a82      	subs	r2, r0, r2
 8001c12:	2c00      	cmp	r4, #0
 8001c14:	d000      	beq.n	8001c18 <__aeabi_dsub+0x1c4>
 8001c16:	e0f5      	b.n	8001e04 <__aeabi_dsub+0x3b0>
 8001c18:	4665      	mov	r5, ip
 8001c1a:	431d      	orrs	r5, r3
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x1cc>
 8001c1e:	e19c      	b.n	8001f5a <__aeabi_dsub+0x506>
 8001c20:	1e55      	subs	r5, r2, #1
 8001c22:	2a01      	cmp	r2, #1
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x1d4>
 8001c26:	e1fb      	b.n	8002020 <__aeabi_dsub+0x5cc>
 8001c28:	4c60      	ldr	r4, [pc, #384]	; (8001dac <__aeabi_dsub+0x358>)
 8001c2a:	42a2      	cmp	r2, r4
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x1dc>
 8001c2e:	e1bd      	b.n	8001fac <__aeabi_dsub+0x558>
 8001c30:	002a      	movs	r2, r5
 8001c32:	e0f0      	b.n	8001e16 <__aeabi_dsub+0x3c2>
 8001c34:	0008      	movs	r0, r1
 8001c36:	4338      	orrs	r0, r7
 8001c38:	d100      	bne.n	8001c3c <__aeabi_dsub+0x1e8>
 8001c3a:	e0c3      	b.n	8001dc4 <__aeabi_dsub+0x370>
 8001c3c:	1e50      	subs	r0, r2, #1
 8001c3e:	2a01      	cmp	r2, #1
 8001c40:	d100      	bne.n	8001c44 <__aeabi_dsub+0x1f0>
 8001c42:	e1a8      	b.n	8001f96 <__aeabi_dsub+0x542>
 8001c44:	4c59      	ldr	r4, [pc, #356]	; (8001dac <__aeabi_dsub+0x358>)
 8001c46:	42a2      	cmp	r2, r4
 8001c48:	d100      	bne.n	8001c4c <__aeabi_dsub+0x1f8>
 8001c4a:	e087      	b.n	8001d5c <__aeabi_dsub+0x308>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	e736      	b.n	8001abe <__aeabi_dsub+0x6a>
 8001c50:	2201      	movs	r2, #1
 8001c52:	4056      	eors	r6, r2
 8001c54:	46b3      	mov	fp, r6
 8001c56:	42b5      	cmp	r5, r6
 8001c58:	d000      	beq.n	8001c5c <__aeabi_dsub+0x208>
 8001c5a:	e721      	b.n	8001aa0 <__aeabi_dsub+0x4c>
 8001c5c:	4a55      	ldr	r2, [pc, #340]	; (8001db4 <__aeabi_dsub+0x360>)
 8001c5e:	4442      	add	r2, r8
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dsub+0x212>
 8001c64:	e0b5      	b.n	8001dd2 <__aeabi_dsub+0x37e>
 8001c66:	4642      	mov	r2, r8
 8001c68:	4644      	mov	r4, r8
 8001c6a:	1a82      	subs	r2, r0, r2
 8001c6c:	2c00      	cmp	r4, #0
 8001c6e:	d100      	bne.n	8001c72 <__aeabi_dsub+0x21e>
 8001c70:	e138      	b.n	8001ee4 <__aeabi_dsub+0x490>
 8001c72:	4e4e      	ldr	r6, [pc, #312]	; (8001dac <__aeabi_dsub+0x358>)
 8001c74:	42b0      	cmp	r0, r6
 8001c76:	d100      	bne.n	8001c7a <__aeabi_dsub+0x226>
 8001c78:	e1de      	b.n	8002038 <__aeabi_dsub+0x5e4>
 8001c7a:	2680      	movs	r6, #128	; 0x80
 8001c7c:	4664      	mov	r4, ip
 8001c7e:	0436      	lsls	r6, r6, #16
 8001c80:	4334      	orrs	r4, r6
 8001c82:	46a4      	mov	ip, r4
 8001c84:	2a38      	cmp	r2, #56	; 0x38
 8001c86:	dd00      	ble.n	8001c8a <__aeabi_dsub+0x236>
 8001c88:	e196      	b.n	8001fb8 <__aeabi_dsub+0x564>
 8001c8a:	2a1f      	cmp	r2, #31
 8001c8c:	dd00      	ble.n	8001c90 <__aeabi_dsub+0x23c>
 8001c8e:	e224      	b.n	80020da <__aeabi_dsub+0x686>
 8001c90:	2620      	movs	r6, #32
 8001c92:	1ab4      	subs	r4, r6, r2
 8001c94:	46a2      	mov	sl, r4
 8001c96:	4664      	mov	r4, ip
 8001c98:	4656      	mov	r6, sl
 8001c9a:	40b4      	lsls	r4, r6
 8001c9c:	46a1      	mov	r9, r4
 8001c9e:	001c      	movs	r4, r3
 8001ca0:	464e      	mov	r6, r9
 8001ca2:	40d4      	lsrs	r4, r2
 8001ca4:	4326      	orrs	r6, r4
 8001ca6:	0034      	movs	r4, r6
 8001ca8:	4656      	mov	r6, sl
 8001caa:	40b3      	lsls	r3, r6
 8001cac:	1e5e      	subs	r6, r3, #1
 8001cae:	41b3      	sbcs	r3, r6
 8001cb0:	431c      	orrs	r4, r3
 8001cb2:	4663      	mov	r3, ip
 8001cb4:	40d3      	lsrs	r3, r2
 8001cb6:	18c9      	adds	r1, r1, r3
 8001cb8:	19e4      	adds	r4, r4, r7
 8001cba:	42bc      	cmp	r4, r7
 8001cbc:	41bf      	sbcs	r7, r7
 8001cbe:	427f      	negs	r7, r7
 8001cc0:	46b9      	mov	r9, r7
 8001cc2:	4680      	mov	r8, r0
 8001cc4:	4489      	add	r9, r1
 8001cc6:	e0d8      	b.n	8001e7a <__aeabi_dsub+0x426>
 8001cc8:	4640      	mov	r0, r8
 8001cca:	4c3b      	ldr	r4, [pc, #236]	; (8001db8 <__aeabi_dsub+0x364>)
 8001ccc:	3001      	adds	r0, #1
 8001cce:	4220      	tst	r0, r4
 8001cd0:	d000      	beq.n	8001cd4 <__aeabi_dsub+0x280>
 8001cd2:	e0b4      	b.n	8001e3e <__aeabi_dsub+0x3ea>
 8001cd4:	4640      	mov	r0, r8
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	d000      	beq.n	8001cdc <__aeabi_dsub+0x288>
 8001cda:	e144      	b.n	8001f66 <__aeabi_dsub+0x512>
 8001cdc:	4660      	mov	r0, ip
 8001cde:	4318      	orrs	r0, r3
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x290>
 8001ce2:	e190      	b.n	8002006 <__aeabi_dsub+0x5b2>
 8001ce4:	0008      	movs	r0, r1
 8001ce6:	4338      	orrs	r0, r7
 8001ce8:	d000      	beq.n	8001cec <__aeabi_dsub+0x298>
 8001cea:	e1aa      	b.n	8002042 <__aeabi_dsub+0x5ee>
 8001cec:	4661      	mov	r1, ip
 8001cee:	08db      	lsrs	r3, r3, #3
 8001cf0:	0749      	lsls	r1, r1, #29
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	4661      	mov	r1, ip
 8001cf6:	08cc      	lsrs	r4, r1, #3
 8001cf8:	e027      	b.n	8001d4a <__aeabi_dsub+0x2f6>
 8001cfa:	0008      	movs	r0, r1
 8001cfc:	4338      	orrs	r0, r7
 8001cfe:	d061      	beq.n	8001dc4 <__aeabi_dsub+0x370>
 8001d00:	1e50      	subs	r0, r2, #1
 8001d02:	2a01      	cmp	r2, #1
 8001d04:	d100      	bne.n	8001d08 <__aeabi_dsub+0x2b4>
 8001d06:	e139      	b.n	8001f7c <__aeabi_dsub+0x528>
 8001d08:	42a2      	cmp	r2, r4
 8001d0a:	d027      	beq.n	8001d5c <__aeabi_dsub+0x308>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	e75d      	b.n	8001bcc <__aeabi_dsub+0x178>
 8001d10:	0002      	movs	r2, r0
 8001d12:	391f      	subs	r1, #31
 8001d14:	40ca      	lsrs	r2, r1
 8001d16:	0011      	movs	r1, r2
 8001d18:	2b20      	cmp	r3, #32
 8001d1a:	d003      	beq.n	8001d24 <__aeabi_dsub+0x2d0>
 8001d1c:	2240      	movs	r2, #64	; 0x40
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	4098      	lsls	r0, r3
 8001d22:	4304      	orrs	r4, r0
 8001d24:	1e63      	subs	r3, r4, #1
 8001d26:	419c      	sbcs	r4, r3
 8001d28:	2300      	movs	r3, #0
 8001d2a:	4699      	mov	r9, r3
 8001d2c:	4698      	mov	r8, r3
 8001d2e:	430c      	orrs	r4, r1
 8001d30:	0763      	lsls	r3, r4, #29
 8001d32:	d000      	beq.n	8001d36 <__aeabi_dsub+0x2e2>
 8001d34:	e712      	b.n	8001b5c <__aeabi_dsub+0x108>
 8001d36:	464b      	mov	r3, r9
 8001d38:	464a      	mov	r2, r9
 8001d3a:	08e4      	lsrs	r4, r4, #3
 8001d3c:	075b      	lsls	r3, r3, #29
 8001d3e:	4323      	orrs	r3, r4
 8001d40:	08d4      	lsrs	r4, r2, #3
 8001d42:	4642      	mov	r2, r8
 8001d44:	4919      	ldr	r1, [pc, #100]	; (8001dac <__aeabi_dsub+0x358>)
 8001d46:	428a      	cmp	r2, r1
 8001d48:	d00e      	beq.n	8001d68 <__aeabi_dsub+0x314>
 8001d4a:	0324      	lsls	r4, r4, #12
 8001d4c:	0552      	lsls	r2, r2, #21
 8001d4e:	0b24      	lsrs	r4, r4, #12
 8001d50:	0d52      	lsrs	r2, r2, #21
 8001d52:	e722      	b.n	8001b9a <__aeabi_dsub+0x146>
 8001d54:	000a      	movs	r2, r1
 8001d56:	2400      	movs	r4, #0
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e71e      	b.n	8001b9a <__aeabi_dsub+0x146>
 8001d5c:	08db      	lsrs	r3, r3, #3
 8001d5e:	4662      	mov	r2, ip
 8001d60:	0752      	lsls	r2, r2, #29
 8001d62:	4313      	orrs	r3, r2
 8001d64:	4662      	mov	r2, ip
 8001d66:	08d4      	lsrs	r4, r2, #3
 8001d68:	001a      	movs	r2, r3
 8001d6a:	4322      	orrs	r2, r4
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x31c>
 8001d6e:	e1fc      	b.n	800216a <__aeabi_dsub+0x716>
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	0312      	lsls	r2, r2, #12
 8001d74:	4314      	orrs	r4, r2
 8001d76:	0324      	lsls	r4, r4, #12
 8001d78:	4a0c      	ldr	r2, [pc, #48]	; (8001dac <__aeabi_dsub+0x358>)
 8001d7a:	0b24      	lsrs	r4, r4, #12
 8001d7c:	e70d      	b.n	8001b9a <__aeabi_dsub+0x146>
 8001d7e:	0020      	movs	r0, r4
 8001d80:	f000 fb56 	bl	8002430 <__clzsi2>
 8001d84:	0001      	movs	r1, r0
 8001d86:	3118      	adds	r1, #24
 8001d88:	291f      	cmp	r1, #31
 8001d8a:	dc00      	bgt.n	8001d8e <__aeabi_dsub+0x33a>
 8001d8c:	e6c4      	b.n	8001b18 <__aeabi_dsub+0xc4>
 8001d8e:	3808      	subs	r0, #8
 8001d90:	4084      	lsls	r4, r0
 8001d92:	4643      	mov	r3, r8
 8001d94:	0020      	movs	r0, r4
 8001d96:	2400      	movs	r4, #0
 8001d98:	4588      	cmp	r8, r1
 8001d9a:	dc00      	bgt.n	8001d9e <__aeabi_dsub+0x34a>
 8001d9c:	e6c8      	b.n	8001b30 <__aeabi_dsub+0xdc>
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__aeabi_dsub+0x35c>)
 8001da0:	1a5b      	subs	r3, r3, r1
 8001da2:	4010      	ands	r0, r2
 8001da4:	4698      	mov	r8, r3
 8001da6:	4681      	mov	r9, r0
 8001da8:	e6d6      	b.n	8001b58 <__aeabi_dsub+0x104>
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	000007ff 	.word	0x000007ff
 8001db0:	ff7fffff 	.word	0xff7fffff
 8001db4:	fffff801 	.word	0xfffff801
 8001db8:	000007fe 	.word	0x000007fe
 8001dbc:	430f      	orrs	r7, r1
 8001dbe:	1e7a      	subs	r2, r7, #1
 8001dc0:	4197      	sbcs	r7, r2
 8001dc2:	e691      	b.n	8001ae8 <__aeabi_dsub+0x94>
 8001dc4:	4661      	mov	r1, ip
 8001dc6:	08db      	lsrs	r3, r3, #3
 8001dc8:	0749      	lsls	r1, r1, #29
 8001dca:	430b      	orrs	r3, r1
 8001dcc:	4661      	mov	r1, ip
 8001dce:	08cc      	lsrs	r4, r1, #3
 8001dd0:	e7b8      	b.n	8001d44 <__aeabi_dsub+0x2f0>
 8001dd2:	4640      	mov	r0, r8
 8001dd4:	4cd3      	ldr	r4, [pc, #844]	; (8002124 <__aeabi_dsub+0x6d0>)
 8001dd6:	3001      	adds	r0, #1
 8001dd8:	4220      	tst	r0, r4
 8001dda:	d000      	beq.n	8001dde <__aeabi_dsub+0x38a>
 8001ddc:	e0a2      	b.n	8001f24 <__aeabi_dsub+0x4d0>
 8001dde:	4640      	mov	r0, r8
 8001de0:	2800      	cmp	r0, #0
 8001de2:	d000      	beq.n	8001de6 <__aeabi_dsub+0x392>
 8001de4:	e101      	b.n	8001fea <__aeabi_dsub+0x596>
 8001de6:	4660      	mov	r0, ip
 8001de8:	4318      	orrs	r0, r3
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x39a>
 8001dec:	e15e      	b.n	80020ac <__aeabi_dsub+0x658>
 8001dee:	0008      	movs	r0, r1
 8001df0:	4338      	orrs	r0, r7
 8001df2:	d000      	beq.n	8001df6 <__aeabi_dsub+0x3a2>
 8001df4:	e15f      	b.n	80020b6 <__aeabi_dsub+0x662>
 8001df6:	4661      	mov	r1, ip
 8001df8:	08db      	lsrs	r3, r3, #3
 8001dfa:	0749      	lsls	r1, r1, #29
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	4661      	mov	r1, ip
 8001e00:	08cc      	lsrs	r4, r1, #3
 8001e02:	e7a2      	b.n	8001d4a <__aeabi_dsub+0x2f6>
 8001e04:	4dc8      	ldr	r5, [pc, #800]	; (8002128 <__aeabi_dsub+0x6d4>)
 8001e06:	42a8      	cmp	r0, r5
 8001e08:	d100      	bne.n	8001e0c <__aeabi_dsub+0x3b8>
 8001e0a:	e0cf      	b.n	8001fac <__aeabi_dsub+0x558>
 8001e0c:	2580      	movs	r5, #128	; 0x80
 8001e0e:	4664      	mov	r4, ip
 8001e10:	042d      	lsls	r5, r5, #16
 8001e12:	432c      	orrs	r4, r5
 8001e14:	46a4      	mov	ip, r4
 8001e16:	2a38      	cmp	r2, #56	; 0x38
 8001e18:	dc56      	bgt.n	8001ec8 <__aeabi_dsub+0x474>
 8001e1a:	2a1f      	cmp	r2, #31
 8001e1c:	dd00      	ble.n	8001e20 <__aeabi_dsub+0x3cc>
 8001e1e:	e0d1      	b.n	8001fc4 <__aeabi_dsub+0x570>
 8001e20:	2520      	movs	r5, #32
 8001e22:	001e      	movs	r6, r3
 8001e24:	1aad      	subs	r5, r5, r2
 8001e26:	4664      	mov	r4, ip
 8001e28:	40ab      	lsls	r3, r5
 8001e2a:	40ac      	lsls	r4, r5
 8001e2c:	40d6      	lsrs	r6, r2
 8001e2e:	1e5d      	subs	r5, r3, #1
 8001e30:	41ab      	sbcs	r3, r5
 8001e32:	4334      	orrs	r4, r6
 8001e34:	4323      	orrs	r3, r4
 8001e36:	4664      	mov	r4, ip
 8001e38:	40d4      	lsrs	r4, r2
 8001e3a:	1b09      	subs	r1, r1, r4
 8001e3c:	e049      	b.n	8001ed2 <__aeabi_dsub+0x47e>
 8001e3e:	4660      	mov	r0, ip
 8001e40:	1bdc      	subs	r4, r3, r7
 8001e42:	1a46      	subs	r6, r0, r1
 8001e44:	42a3      	cmp	r3, r4
 8001e46:	4180      	sbcs	r0, r0
 8001e48:	4240      	negs	r0, r0
 8001e4a:	4681      	mov	r9, r0
 8001e4c:	0030      	movs	r0, r6
 8001e4e:	464e      	mov	r6, r9
 8001e50:	1b80      	subs	r0, r0, r6
 8001e52:	4681      	mov	r9, r0
 8001e54:	0200      	lsls	r0, r0, #8
 8001e56:	d476      	bmi.n	8001f46 <__aeabi_dsub+0x4f2>
 8001e58:	464b      	mov	r3, r9
 8001e5a:	4323      	orrs	r3, r4
 8001e5c:	d000      	beq.n	8001e60 <__aeabi_dsub+0x40c>
 8001e5e:	e652      	b.n	8001b06 <__aeabi_dsub+0xb2>
 8001e60:	2400      	movs	r4, #0
 8001e62:	2500      	movs	r5, #0
 8001e64:	e771      	b.n	8001d4a <__aeabi_dsub+0x2f6>
 8001e66:	4339      	orrs	r1, r7
 8001e68:	000c      	movs	r4, r1
 8001e6a:	1e62      	subs	r2, r4, #1
 8001e6c:	4194      	sbcs	r4, r2
 8001e6e:	18e4      	adds	r4, r4, r3
 8001e70:	429c      	cmp	r4, r3
 8001e72:	419b      	sbcs	r3, r3
 8001e74:	425b      	negs	r3, r3
 8001e76:	4463      	add	r3, ip
 8001e78:	4699      	mov	r9, r3
 8001e7a:	464b      	mov	r3, r9
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	d400      	bmi.n	8001e82 <__aeabi_dsub+0x42e>
 8001e80:	e756      	b.n	8001d30 <__aeabi_dsub+0x2dc>
 8001e82:	2301      	movs	r3, #1
 8001e84:	469c      	mov	ip, r3
 8001e86:	4ba8      	ldr	r3, [pc, #672]	; (8002128 <__aeabi_dsub+0x6d4>)
 8001e88:	44e0      	add	r8, ip
 8001e8a:	4598      	cmp	r8, r3
 8001e8c:	d038      	beq.n	8001f00 <__aeabi_dsub+0x4ac>
 8001e8e:	464b      	mov	r3, r9
 8001e90:	48a6      	ldr	r0, [pc, #664]	; (800212c <__aeabi_dsub+0x6d8>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	4003      	ands	r3, r0
 8001e96:	0018      	movs	r0, r3
 8001e98:	0863      	lsrs	r3, r4, #1
 8001e9a:	4014      	ands	r4, r2
 8001e9c:	431c      	orrs	r4, r3
 8001e9e:	07c3      	lsls	r3, r0, #31
 8001ea0:	431c      	orrs	r4, r3
 8001ea2:	0843      	lsrs	r3, r0, #1
 8001ea4:	4699      	mov	r9, r3
 8001ea6:	e657      	b.n	8001b58 <__aeabi_dsub+0x104>
 8001ea8:	0010      	movs	r0, r2
 8001eaa:	000e      	movs	r6, r1
 8001eac:	3820      	subs	r0, #32
 8001eae:	40c6      	lsrs	r6, r0
 8001eb0:	2a20      	cmp	r2, #32
 8001eb2:	d004      	beq.n	8001ebe <__aeabi_dsub+0x46a>
 8001eb4:	2040      	movs	r0, #64	; 0x40
 8001eb6:	1a82      	subs	r2, r0, r2
 8001eb8:	4091      	lsls	r1, r2
 8001eba:	430f      	orrs	r7, r1
 8001ebc:	46b9      	mov	r9, r7
 8001ebe:	464f      	mov	r7, r9
 8001ec0:	1e7a      	subs	r2, r7, #1
 8001ec2:	4197      	sbcs	r7, r2
 8001ec4:	4337      	orrs	r7, r6
 8001ec6:	e60f      	b.n	8001ae8 <__aeabi_dsub+0x94>
 8001ec8:	4662      	mov	r2, ip
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	0013      	movs	r3, r2
 8001ece:	1e5a      	subs	r2, r3, #1
 8001ed0:	4193      	sbcs	r3, r2
 8001ed2:	1afc      	subs	r4, r7, r3
 8001ed4:	42a7      	cmp	r7, r4
 8001ed6:	41bf      	sbcs	r7, r7
 8001ed8:	427f      	negs	r7, r7
 8001eda:	1bcb      	subs	r3, r1, r7
 8001edc:	4699      	mov	r9, r3
 8001ede:	465d      	mov	r5, fp
 8001ee0:	4680      	mov	r8, r0
 8001ee2:	e608      	b.n	8001af6 <__aeabi_dsub+0xa2>
 8001ee4:	4666      	mov	r6, ip
 8001ee6:	431e      	orrs	r6, r3
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x498>
 8001eea:	e0be      	b.n	800206a <__aeabi_dsub+0x616>
 8001eec:	1e56      	subs	r6, r2, #1
 8001eee:	2a01      	cmp	r2, #1
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x4a0>
 8001ef2:	e109      	b.n	8002108 <__aeabi_dsub+0x6b4>
 8001ef4:	4c8c      	ldr	r4, [pc, #560]	; (8002128 <__aeabi_dsub+0x6d4>)
 8001ef6:	42a2      	cmp	r2, r4
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x4a8>
 8001efa:	e119      	b.n	8002130 <__aeabi_dsub+0x6dc>
 8001efc:	0032      	movs	r2, r6
 8001efe:	e6c1      	b.n	8001c84 <__aeabi_dsub+0x230>
 8001f00:	4642      	mov	r2, r8
 8001f02:	2400      	movs	r4, #0
 8001f04:	2300      	movs	r3, #0
 8001f06:	e648      	b.n	8001b9a <__aeabi_dsub+0x146>
 8001f08:	2020      	movs	r0, #32
 8001f0a:	000c      	movs	r4, r1
 8001f0c:	1a80      	subs	r0, r0, r2
 8001f0e:	003e      	movs	r6, r7
 8001f10:	4087      	lsls	r7, r0
 8001f12:	4084      	lsls	r4, r0
 8001f14:	40d6      	lsrs	r6, r2
 8001f16:	1e78      	subs	r0, r7, #1
 8001f18:	4187      	sbcs	r7, r0
 8001f1a:	40d1      	lsrs	r1, r2
 8001f1c:	4334      	orrs	r4, r6
 8001f1e:	433c      	orrs	r4, r7
 8001f20:	448c      	add	ip, r1
 8001f22:	e7a4      	b.n	8001e6e <__aeabi_dsub+0x41a>
 8001f24:	4a80      	ldr	r2, [pc, #512]	; (8002128 <__aeabi_dsub+0x6d4>)
 8001f26:	4290      	cmp	r0, r2
 8001f28:	d100      	bne.n	8001f2c <__aeabi_dsub+0x4d8>
 8001f2a:	e0e9      	b.n	8002100 <__aeabi_dsub+0x6ac>
 8001f2c:	19df      	adds	r7, r3, r7
 8001f2e:	429f      	cmp	r7, r3
 8001f30:	419b      	sbcs	r3, r3
 8001f32:	4461      	add	r1, ip
 8001f34:	425b      	negs	r3, r3
 8001f36:	18c9      	adds	r1, r1, r3
 8001f38:	07cc      	lsls	r4, r1, #31
 8001f3a:	087f      	lsrs	r7, r7, #1
 8001f3c:	084b      	lsrs	r3, r1, #1
 8001f3e:	4699      	mov	r9, r3
 8001f40:	4680      	mov	r8, r0
 8001f42:	433c      	orrs	r4, r7
 8001f44:	e6f4      	b.n	8001d30 <__aeabi_dsub+0x2dc>
 8001f46:	1afc      	subs	r4, r7, r3
 8001f48:	42a7      	cmp	r7, r4
 8001f4a:	41bf      	sbcs	r7, r7
 8001f4c:	4663      	mov	r3, ip
 8001f4e:	427f      	negs	r7, r7
 8001f50:	1ac9      	subs	r1, r1, r3
 8001f52:	1bcb      	subs	r3, r1, r7
 8001f54:	4699      	mov	r9, r3
 8001f56:	465d      	mov	r5, fp
 8001f58:	e5d5      	b.n	8001b06 <__aeabi_dsub+0xb2>
 8001f5a:	08ff      	lsrs	r7, r7, #3
 8001f5c:	074b      	lsls	r3, r1, #29
 8001f5e:	465d      	mov	r5, fp
 8001f60:	433b      	orrs	r3, r7
 8001f62:	08cc      	lsrs	r4, r1, #3
 8001f64:	e6ee      	b.n	8001d44 <__aeabi_dsub+0x2f0>
 8001f66:	4662      	mov	r2, ip
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	d000      	beq.n	8001f6e <__aeabi_dsub+0x51a>
 8001f6c:	e082      	b.n	8002074 <__aeabi_dsub+0x620>
 8001f6e:	000b      	movs	r3, r1
 8001f70:	433b      	orrs	r3, r7
 8001f72:	d11b      	bne.n	8001fac <__aeabi_dsub+0x558>
 8001f74:	2480      	movs	r4, #128	; 0x80
 8001f76:	2500      	movs	r5, #0
 8001f78:	0324      	lsls	r4, r4, #12
 8001f7a:	e6f9      	b.n	8001d70 <__aeabi_dsub+0x31c>
 8001f7c:	19dc      	adds	r4, r3, r7
 8001f7e:	429c      	cmp	r4, r3
 8001f80:	419b      	sbcs	r3, r3
 8001f82:	4461      	add	r1, ip
 8001f84:	4689      	mov	r9, r1
 8001f86:	425b      	negs	r3, r3
 8001f88:	4499      	add	r9, r3
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	021b      	lsls	r3, r3, #8
 8001f8e:	d444      	bmi.n	800201a <__aeabi_dsub+0x5c6>
 8001f90:	2301      	movs	r3, #1
 8001f92:	4698      	mov	r8, r3
 8001f94:	e6cc      	b.n	8001d30 <__aeabi_dsub+0x2dc>
 8001f96:	1bdc      	subs	r4, r3, r7
 8001f98:	4662      	mov	r2, ip
 8001f9a:	42a3      	cmp	r3, r4
 8001f9c:	419b      	sbcs	r3, r3
 8001f9e:	1a51      	subs	r1, r2, r1
 8001fa0:	425b      	negs	r3, r3
 8001fa2:	1acb      	subs	r3, r1, r3
 8001fa4:	4699      	mov	r9, r3
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	4698      	mov	r8, r3
 8001faa:	e5a4      	b.n	8001af6 <__aeabi_dsub+0xa2>
 8001fac:	08ff      	lsrs	r7, r7, #3
 8001fae:	074b      	lsls	r3, r1, #29
 8001fb0:	465d      	mov	r5, fp
 8001fb2:	433b      	orrs	r3, r7
 8001fb4:	08cc      	lsrs	r4, r1, #3
 8001fb6:	e6d7      	b.n	8001d68 <__aeabi_dsub+0x314>
 8001fb8:	4662      	mov	r2, ip
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	0014      	movs	r4, r2
 8001fbe:	1e63      	subs	r3, r4, #1
 8001fc0:	419c      	sbcs	r4, r3
 8001fc2:	e679      	b.n	8001cb8 <__aeabi_dsub+0x264>
 8001fc4:	0015      	movs	r5, r2
 8001fc6:	4664      	mov	r4, ip
 8001fc8:	3d20      	subs	r5, #32
 8001fca:	40ec      	lsrs	r4, r5
 8001fcc:	46a0      	mov	r8, r4
 8001fce:	2a20      	cmp	r2, #32
 8001fd0:	d005      	beq.n	8001fde <__aeabi_dsub+0x58a>
 8001fd2:	2540      	movs	r5, #64	; 0x40
 8001fd4:	4664      	mov	r4, ip
 8001fd6:	1aaa      	subs	r2, r5, r2
 8001fd8:	4094      	lsls	r4, r2
 8001fda:	4323      	orrs	r3, r4
 8001fdc:	469a      	mov	sl, r3
 8001fde:	4654      	mov	r4, sl
 8001fe0:	1e63      	subs	r3, r4, #1
 8001fe2:	419c      	sbcs	r4, r3
 8001fe4:	4643      	mov	r3, r8
 8001fe6:	4323      	orrs	r3, r4
 8001fe8:	e773      	b.n	8001ed2 <__aeabi_dsub+0x47e>
 8001fea:	4662      	mov	r2, ip
 8001fec:	431a      	orrs	r2, r3
 8001fee:	d023      	beq.n	8002038 <__aeabi_dsub+0x5e4>
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	433a      	orrs	r2, r7
 8001ff4:	d000      	beq.n	8001ff8 <__aeabi_dsub+0x5a4>
 8001ff6:	e0a0      	b.n	800213a <__aeabi_dsub+0x6e6>
 8001ff8:	4662      	mov	r2, ip
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	0752      	lsls	r2, r2, #29
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4662      	mov	r2, ip
 8002002:	08d4      	lsrs	r4, r2, #3
 8002004:	e6b0      	b.n	8001d68 <__aeabi_dsub+0x314>
 8002006:	000b      	movs	r3, r1
 8002008:	433b      	orrs	r3, r7
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x5ba>
 800200c:	e728      	b.n	8001e60 <__aeabi_dsub+0x40c>
 800200e:	08ff      	lsrs	r7, r7, #3
 8002010:	074b      	lsls	r3, r1, #29
 8002012:	465d      	mov	r5, fp
 8002014:	433b      	orrs	r3, r7
 8002016:	08cc      	lsrs	r4, r1, #3
 8002018:	e697      	b.n	8001d4a <__aeabi_dsub+0x2f6>
 800201a:	2302      	movs	r3, #2
 800201c:	4698      	mov	r8, r3
 800201e:	e736      	b.n	8001e8e <__aeabi_dsub+0x43a>
 8002020:	1afc      	subs	r4, r7, r3
 8002022:	42a7      	cmp	r7, r4
 8002024:	41bf      	sbcs	r7, r7
 8002026:	4663      	mov	r3, ip
 8002028:	427f      	negs	r7, r7
 800202a:	1ac9      	subs	r1, r1, r3
 800202c:	1bcb      	subs	r3, r1, r7
 800202e:	4699      	mov	r9, r3
 8002030:	2301      	movs	r3, #1
 8002032:	465d      	mov	r5, fp
 8002034:	4698      	mov	r8, r3
 8002036:	e55e      	b.n	8001af6 <__aeabi_dsub+0xa2>
 8002038:	074b      	lsls	r3, r1, #29
 800203a:	08ff      	lsrs	r7, r7, #3
 800203c:	433b      	orrs	r3, r7
 800203e:	08cc      	lsrs	r4, r1, #3
 8002040:	e692      	b.n	8001d68 <__aeabi_dsub+0x314>
 8002042:	1bdc      	subs	r4, r3, r7
 8002044:	4660      	mov	r0, ip
 8002046:	42a3      	cmp	r3, r4
 8002048:	41b6      	sbcs	r6, r6
 800204a:	1a40      	subs	r0, r0, r1
 800204c:	4276      	negs	r6, r6
 800204e:	1b80      	subs	r0, r0, r6
 8002050:	4681      	mov	r9, r0
 8002052:	0200      	lsls	r0, r0, #8
 8002054:	d560      	bpl.n	8002118 <__aeabi_dsub+0x6c4>
 8002056:	1afc      	subs	r4, r7, r3
 8002058:	42a7      	cmp	r7, r4
 800205a:	41bf      	sbcs	r7, r7
 800205c:	4663      	mov	r3, ip
 800205e:	427f      	negs	r7, r7
 8002060:	1ac9      	subs	r1, r1, r3
 8002062:	1bcb      	subs	r3, r1, r7
 8002064:	4699      	mov	r9, r3
 8002066:	465d      	mov	r5, fp
 8002068:	e576      	b.n	8001b58 <__aeabi_dsub+0x104>
 800206a:	08ff      	lsrs	r7, r7, #3
 800206c:	074b      	lsls	r3, r1, #29
 800206e:	433b      	orrs	r3, r7
 8002070:	08cc      	lsrs	r4, r1, #3
 8002072:	e667      	b.n	8001d44 <__aeabi_dsub+0x2f0>
 8002074:	000a      	movs	r2, r1
 8002076:	08db      	lsrs	r3, r3, #3
 8002078:	433a      	orrs	r2, r7
 800207a:	d100      	bne.n	800207e <__aeabi_dsub+0x62a>
 800207c:	e66f      	b.n	8001d5e <__aeabi_dsub+0x30a>
 800207e:	4662      	mov	r2, ip
 8002080:	0752      	lsls	r2, r2, #29
 8002082:	4313      	orrs	r3, r2
 8002084:	4662      	mov	r2, ip
 8002086:	08d4      	lsrs	r4, r2, #3
 8002088:	2280      	movs	r2, #128	; 0x80
 800208a:	0312      	lsls	r2, r2, #12
 800208c:	4214      	tst	r4, r2
 800208e:	d007      	beq.n	80020a0 <__aeabi_dsub+0x64c>
 8002090:	08c8      	lsrs	r0, r1, #3
 8002092:	4210      	tst	r0, r2
 8002094:	d104      	bne.n	80020a0 <__aeabi_dsub+0x64c>
 8002096:	465d      	mov	r5, fp
 8002098:	0004      	movs	r4, r0
 800209a:	08fb      	lsrs	r3, r7, #3
 800209c:	0749      	lsls	r1, r1, #29
 800209e:	430b      	orrs	r3, r1
 80020a0:	0f5a      	lsrs	r2, r3, #29
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	08db      	lsrs	r3, r3, #3
 80020a6:	0752      	lsls	r2, r2, #29
 80020a8:	4313      	orrs	r3, r2
 80020aa:	e65d      	b.n	8001d68 <__aeabi_dsub+0x314>
 80020ac:	074b      	lsls	r3, r1, #29
 80020ae:	08ff      	lsrs	r7, r7, #3
 80020b0:	433b      	orrs	r3, r7
 80020b2:	08cc      	lsrs	r4, r1, #3
 80020b4:	e649      	b.n	8001d4a <__aeabi_dsub+0x2f6>
 80020b6:	19dc      	adds	r4, r3, r7
 80020b8:	429c      	cmp	r4, r3
 80020ba:	419b      	sbcs	r3, r3
 80020bc:	4461      	add	r1, ip
 80020be:	4689      	mov	r9, r1
 80020c0:	425b      	negs	r3, r3
 80020c2:	4499      	add	r9, r3
 80020c4:	464b      	mov	r3, r9
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	d400      	bmi.n	80020cc <__aeabi_dsub+0x678>
 80020ca:	e631      	b.n	8001d30 <__aeabi_dsub+0x2dc>
 80020cc:	464a      	mov	r2, r9
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <__aeabi_dsub+0x6d8>)
 80020d0:	401a      	ands	r2, r3
 80020d2:	2301      	movs	r3, #1
 80020d4:	4691      	mov	r9, r2
 80020d6:	4698      	mov	r8, r3
 80020d8:	e62a      	b.n	8001d30 <__aeabi_dsub+0x2dc>
 80020da:	0016      	movs	r6, r2
 80020dc:	4664      	mov	r4, ip
 80020de:	3e20      	subs	r6, #32
 80020e0:	40f4      	lsrs	r4, r6
 80020e2:	46a0      	mov	r8, r4
 80020e4:	2a20      	cmp	r2, #32
 80020e6:	d005      	beq.n	80020f4 <__aeabi_dsub+0x6a0>
 80020e8:	2640      	movs	r6, #64	; 0x40
 80020ea:	4664      	mov	r4, ip
 80020ec:	1ab2      	subs	r2, r6, r2
 80020ee:	4094      	lsls	r4, r2
 80020f0:	4323      	orrs	r3, r4
 80020f2:	469a      	mov	sl, r3
 80020f4:	4654      	mov	r4, sl
 80020f6:	1e63      	subs	r3, r4, #1
 80020f8:	419c      	sbcs	r4, r3
 80020fa:	4643      	mov	r3, r8
 80020fc:	431c      	orrs	r4, r3
 80020fe:	e5db      	b.n	8001cb8 <__aeabi_dsub+0x264>
 8002100:	0002      	movs	r2, r0
 8002102:	2400      	movs	r4, #0
 8002104:	2300      	movs	r3, #0
 8002106:	e548      	b.n	8001b9a <__aeabi_dsub+0x146>
 8002108:	19dc      	adds	r4, r3, r7
 800210a:	42bc      	cmp	r4, r7
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4461      	add	r1, ip
 8002110:	4689      	mov	r9, r1
 8002112:	427f      	negs	r7, r7
 8002114:	44b9      	add	r9, r7
 8002116:	e738      	b.n	8001f8a <__aeabi_dsub+0x536>
 8002118:	464b      	mov	r3, r9
 800211a:	4323      	orrs	r3, r4
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x6cc>
 800211e:	e69f      	b.n	8001e60 <__aeabi_dsub+0x40c>
 8002120:	e606      	b.n	8001d30 <__aeabi_dsub+0x2dc>
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	000007fe 	.word	0x000007fe
 8002128:	000007ff 	.word	0x000007ff
 800212c:	ff7fffff 	.word	0xff7fffff
 8002130:	08ff      	lsrs	r7, r7, #3
 8002132:	074b      	lsls	r3, r1, #29
 8002134:	433b      	orrs	r3, r7
 8002136:	08cc      	lsrs	r4, r1, #3
 8002138:	e616      	b.n	8001d68 <__aeabi_dsub+0x314>
 800213a:	4662      	mov	r2, ip
 800213c:	08db      	lsrs	r3, r3, #3
 800213e:	0752      	lsls	r2, r2, #29
 8002140:	4313      	orrs	r3, r2
 8002142:	4662      	mov	r2, ip
 8002144:	08d4      	lsrs	r4, r2, #3
 8002146:	2280      	movs	r2, #128	; 0x80
 8002148:	0312      	lsls	r2, r2, #12
 800214a:	4214      	tst	r4, r2
 800214c:	d007      	beq.n	800215e <__aeabi_dsub+0x70a>
 800214e:	08c8      	lsrs	r0, r1, #3
 8002150:	4210      	tst	r0, r2
 8002152:	d104      	bne.n	800215e <__aeabi_dsub+0x70a>
 8002154:	465d      	mov	r5, fp
 8002156:	0004      	movs	r4, r0
 8002158:	08fb      	lsrs	r3, r7, #3
 800215a:	0749      	lsls	r1, r1, #29
 800215c:	430b      	orrs	r3, r1
 800215e:	0f5a      	lsrs	r2, r3, #29
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	0752      	lsls	r2, r2, #29
 8002164:	08db      	lsrs	r3, r3, #3
 8002166:	4313      	orrs	r3, r2
 8002168:	e5fe      	b.n	8001d68 <__aeabi_dsub+0x314>
 800216a:	2300      	movs	r3, #0
 800216c:	4a01      	ldr	r2, [pc, #4]	; (8002174 <__aeabi_dsub+0x720>)
 800216e:	001c      	movs	r4, r3
 8002170:	e513      	b.n	8001b9a <__aeabi_dsub+0x146>
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	000007ff 	.word	0x000007ff

08002178 <__aeabi_d2iz>:
 8002178:	000a      	movs	r2, r1
 800217a:	b530      	push	{r4, r5, lr}
 800217c:	4c13      	ldr	r4, [pc, #76]	; (80021cc <__aeabi_d2iz+0x54>)
 800217e:	0053      	lsls	r3, r2, #1
 8002180:	0309      	lsls	r1, r1, #12
 8002182:	0005      	movs	r5, r0
 8002184:	0b09      	lsrs	r1, r1, #12
 8002186:	2000      	movs	r0, #0
 8002188:	0d5b      	lsrs	r3, r3, #21
 800218a:	0fd2      	lsrs	r2, r2, #31
 800218c:	42a3      	cmp	r3, r4
 800218e:	dd04      	ble.n	800219a <__aeabi_d2iz+0x22>
 8002190:	480f      	ldr	r0, [pc, #60]	; (80021d0 <__aeabi_d2iz+0x58>)
 8002192:	4283      	cmp	r3, r0
 8002194:	dd02      	ble.n	800219c <__aeabi_d2iz+0x24>
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <__aeabi_d2iz+0x5c>)
 8002198:	18d0      	adds	r0, r2, r3
 800219a:	bd30      	pop	{r4, r5, pc}
 800219c:	2080      	movs	r0, #128	; 0x80
 800219e:	0340      	lsls	r0, r0, #13
 80021a0:	4301      	orrs	r1, r0
 80021a2:	480d      	ldr	r0, [pc, #52]	; (80021d8 <__aeabi_d2iz+0x60>)
 80021a4:	1ac0      	subs	r0, r0, r3
 80021a6:	281f      	cmp	r0, #31
 80021a8:	dd08      	ble.n	80021bc <__aeabi_d2iz+0x44>
 80021aa:	480c      	ldr	r0, [pc, #48]	; (80021dc <__aeabi_d2iz+0x64>)
 80021ac:	1ac3      	subs	r3, r0, r3
 80021ae:	40d9      	lsrs	r1, r3
 80021b0:	000b      	movs	r3, r1
 80021b2:	4258      	negs	r0, r3
 80021b4:	2a00      	cmp	r2, #0
 80021b6:	d1f0      	bne.n	800219a <__aeabi_d2iz+0x22>
 80021b8:	0018      	movs	r0, r3
 80021ba:	e7ee      	b.n	800219a <__aeabi_d2iz+0x22>
 80021bc:	4c08      	ldr	r4, [pc, #32]	; (80021e0 <__aeabi_d2iz+0x68>)
 80021be:	40c5      	lsrs	r5, r0
 80021c0:	46a4      	mov	ip, r4
 80021c2:	4463      	add	r3, ip
 80021c4:	4099      	lsls	r1, r3
 80021c6:	000b      	movs	r3, r1
 80021c8:	432b      	orrs	r3, r5
 80021ca:	e7f2      	b.n	80021b2 <__aeabi_d2iz+0x3a>
 80021cc:	000003fe 	.word	0x000003fe
 80021d0:	0000041d 	.word	0x0000041d
 80021d4:	7fffffff 	.word	0x7fffffff
 80021d8:	00000433 	.word	0x00000433
 80021dc:	00000413 	.word	0x00000413
 80021e0:	fffffbed 	.word	0xfffffbed

080021e4 <__aeabi_i2d>:
 80021e4:	b570      	push	{r4, r5, r6, lr}
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d016      	beq.n	8002218 <__aeabi_i2d+0x34>
 80021ea:	17c3      	asrs	r3, r0, #31
 80021ec:	18c5      	adds	r5, r0, r3
 80021ee:	405d      	eors	r5, r3
 80021f0:	0fc4      	lsrs	r4, r0, #31
 80021f2:	0028      	movs	r0, r5
 80021f4:	f000 f91c 	bl	8002430 <__clzsi2>
 80021f8:	4a11      	ldr	r2, [pc, #68]	; (8002240 <__aeabi_i2d+0x5c>)
 80021fa:	1a12      	subs	r2, r2, r0
 80021fc:	280a      	cmp	r0, #10
 80021fe:	dc16      	bgt.n	800222e <__aeabi_i2d+0x4a>
 8002200:	0003      	movs	r3, r0
 8002202:	002e      	movs	r6, r5
 8002204:	3315      	adds	r3, #21
 8002206:	409e      	lsls	r6, r3
 8002208:	230b      	movs	r3, #11
 800220a:	1a18      	subs	r0, r3, r0
 800220c:	40c5      	lsrs	r5, r0
 800220e:	0552      	lsls	r2, r2, #21
 8002210:	032d      	lsls	r5, r5, #12
 8002212:	0b2d      	lsrs	r5, r5, #12
 8002214:	0d53      	lsrs	r3, r2, #21
 8002216:	e003      	b.n	8002220 <__aeabi_i2d+0x3c>
 8002218:	2400      	movs	r4, #0
 800221a:	2300      	movs	r3, #0
 800221c:	2500      	movs	r5, #0
 800221e:	2600      	movs	r6, #0
 8002220:	051b      	lsls	r3, r3, #20
 8002222:	432b      	orrs	r3, r5
 8002224:	07e4      	lsls	r4, r4, #31
 8002226:	4323      	orrs	r3, r4
 8002228:	0030      	movs	r0, r6
 800222a:	0019      	movs	r1, r3
 800222c:	bd70      	pop	{r4, r5, r6, pc}
 800222e:	380b      	subs	r0, #11
 8002230:	4085      	lsls	r5, r0
 8002232:	0552      	lsls	r2, r2, #21
 8002234:	032d      	lsls	r5, r5, #12
 8002236:	2600      	movs	r6, #0
 8002238:	0b2d      	lsrs	r5, r5, #12
 800223a:	0d53      	lsrs	r3, r2, #21
 800223c:	e7f0      	b.n	8002220 <__aeabi_i2d+0x3c>
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	0000041e 	.word	0x0000041e

08002244 <__aeabi_ui2d>:
 8002244:	b510      	push	{r4, lr}
 8002246:	1e04      	subs	r4, r0, #0
 8002248:	d010      	beq.n	800226c <__aeabi_ui2d+0x28>
 800224a:	f000 f8f1 	bl	8002430 <__clzsi2>
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <__aeabi_ui2d+0x48>)
 8002250:	1a1b      	subs	r3, r3, r0
 8002252:	280a      	cmp	r0, #10
 8002254:	dc11      	bgt.n	800227a <__aeabi_ui2d+0x36>
 8002256:	220b      	movs	r2, #11
 8002258:	0021      	movs	r1, r4
 800225a:	1a12      	subs	r2, r2, r0
 800225c:	40d1      	lsrs	r1, r2
 800225e:	3015      	adds	r0, #21
 8002260:	030a      	lsls	r2, r1, #12
 8002262:	055b      	lsls	r3, r3, #21
 8002264:	4084      	lsls	r4, r0
 8002266:	0b12      	lsrs	r2, r2, #12
 8002268:	0d5b      	lsrs	r3, r3, #21
 800226a:	e001      	b.n	8002270 <__aeabi_ui2d+0x2c>
 800226c:	2300      	movs	r3, #0
 800226e:	2200      	movs	r2, #0
 8002270:	051b      	lsls	r3, r3, #20
 8002272:	4313      	orrs	r3, r2
 8002274:	0020      	movs	r0, r4
 8002276:	0019      	movs	r1, r3
 8002278:	bd10      	pop	{r4, pc}
 800227a:	0022      	movs	r2, r4
 800227c:	380b      	subs	r0, #11
 800227e:	4082      	lsls	r2, r0
 8002280:	055b      	lsls	r3, r3, #21
 8002282:	0312      	lsls	r2, r2, #12
 8002284:	2400      	movs	r4, #0
 8002286:	0b12      	lsrs	r2, r2, #12
 8002288:	0d5b      	lsrs	r3, r3, #21
 800228a:	e7f1      	b.n	8002270 <__aeabi_ui2d+0x2c>
 800228c:	0000041e 	.word	0x0000041e

08002290 <__aeabi_f2d>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	0043      	lsls	r3, r0, #1
 8002294:	0246      	lsls	r6, r0, #9
 8002296:	0fc4      	lsrs	r4, r0, #31
 8002298:	20fe      	movs	r0, #254	; 0xfe
 800229a:	0e1b      	lsrs	r3, r3, #24
 800229c:	1c59      	adds	r1, r3, #1
 800229e:	0a75      	lsrs	r5, r6, #9
 80022a0:	4208      	tst	r0, r1
 80022a2:	d00c      	beq.n	80022be <__aeabi_f2d+0x2e>
 80022a4:	22e0      	movs	r2, #224	; 0xe0
 80022a6:	0092      	lsls	r2, r2, #2
 80022a8:	4694      	mov	ip, r2
 80022aa:	076d      	lsls	r5, r5, #29
 80022ac:	0b36      	lsrs	r6, r6, #12
 80022ae:	4463      	add	r3, ip
 80022b0:	051b      	lsls	r3, r3, #20
 80022b2:	4333      	orrs	r3, r6
 80022b4:	07e4      	lsls	r4, r4, #31
 80022b6:	4323      	orrs	r3, r4
 80022b8:	0028      	movs	r0, r5
 80022ba:	0019      	movs	r1, r3
 80022bc:	bd70      	pop	{r4, r5, r6, pc}
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d114      	bne.n	80022ec <__aeabi_f2d+0x5c>
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	d01b      	beq.n	80022fe <__aeabi_f2d+0x6e>
 80022c6:	0028      	movs	r0, r5
 80022c8:	f000 f8b2 	bl	8002430 <__clzsi2>
 80022cc:	280a      	cmp	r0, #10
 80022ce:	dc1c      	bgt.n	800230a <__aeabi_f2d+0x7a>
 80022d0:	230b      	movs	r3, #11
 80022d2:	002e      	movs	r6, r5
 80022d4:	1a1b      	subs	r3, r3, r0
 80022d6:	40de      	lsrs	r6, r3
 80022d8:	0003      	movs	r3, r0
 80022da:	3315      	adds	r3, #21
 80022dc:	409d      	lsls	r5, r3
 80022de:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <__aeabi_f2d+0x88>)
 80022e0:	0336      	lsls	r6, r6, #12
 80022e2:	1a12      	subs	r2, r2, r0
 80022e4:	0552      	lsls	r2, r2, #21
 80022e6:	0b36      	lsrs	r6, r6, #12
 80022e8:	0d53      	lsrs	r3, r2, #21
 80022ea:	e7e1      	b.n	80022b0 <__aeabi_f2d+0x20>
 80022ec:	2d00      	cmp	r5, #0
 80022ee:	d009      	beq.n	8002304 <__aeabi_f2d+0x74>
 80022f0:	2280      	movs	r2, #128	; 0x80
 80022f2:	0b36      	lsrs	r6, r6, #12
 80022f4:	0312      	lsls	r2, r2, #12
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <__aeabi_f2d+0x8c>)
 80022f8:	076d      	lsls	r5, r5, #29
 80022fa:	4316      	orrs	r6, r2
 80022fc:	e7d8      	b.n	80022b0 <__aeabi_f2d+0x20>
 80022fe:	2300      	movs	r3, #0
 8002300:	2600      	movs	r6, #0
 8002302:	e7d5      	b.n	80022b0 <__aeabi_f2d+0x20>
 8002304:	2600      	movs	r6, #0
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <__aeabi_f2d+0x8c>)
 8002308:	e7d2      	b.n	80022b0 <__aeabi_f2d+0x20>
 800230a:	0003      	movs	r3, r0
 800230c:	3b0b      	subs	r3, #11
 800230e:	409d      	lsls	r5, r3
 8002310:	002e      	movs	r6, r5
 8002312:	2500      	movs	r5, #0
 8002314:	e7e3      	b.n	80022de <__aeabi_f2d+0x4e>
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	00000389 	.word	0x00000389
 800231c:	000007ff 	.word	0x000007ff

08002320 <__aeabi_d2f>:
 8002320:	0002      	movs	r2, r0
 8002322:	004b      	lsls	r3, r1, #1
 8002324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002326:	0d5b      	lsrs	r3, r3, #21
 8002328:	030c      	lsls	r4, r1, #12
 800232a:	4e3d      	ldr	r6, [pc, #244]	; (8002420 <__aeabi_d2f+0x100>)
 800232c:	0a64      	lsrs	r4, r4, #9
 800232e:	0f40      	lsrs	r0, r0, #29
 8002330:	1c5f      	adds	r7, r3, #1
 8002332:	0fc9      	lsrs	r1, r1, #31
 8002334:	4304      	orrs	r4, r0
 8002336:	00d5      	lsls	r5, r2, #3
 8002338:	4237      	tst	r7, r6
 800233a:	d00a      	beq.n	8002352 <__aeabi_d2f+0x32>
 800233c:	4839      	ldr	r0, [pc, #228]	; (8002424 <__aeabi_d2f+0x104>)
 800233e:	181e      	adds	r6, r3, r0
 8002340:	2efe      	cmp	r6, #254	; 0xfe
 8002342:	dd16      	ble.n	8002372 <__aeabi_d2f+0x52>
 8002344:	20ff      	movs	r0, #255	; 0xff
 8002346:	2400      	movs	r4, #0
 8002348:	05c0      	lsls	r0, r0, #23
 800234a:	4320      	orrs	r0, r4
 800234c:	07c9      	lsls	r1, r1, #31
 800234e:	4308      	orrs	r0, r1
 8002350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002352:	2b00      	cmp	r3, #0
 8002354:	d106      	bne.n	8002364 <__aeabi_d2f+0x44>
 8002356:	432c      	orrs	r4, r5
 8002358:	d026      	beq.n	80023a8 <__aeabi_d2f+0x88>
 800235a:	2205      	movs	r2, #5
 800235c:	0192      	lsls	r2, r2, #6
 800235e:	0a54      	lsrs	r4, r2, #9
 8002360:	b2d8      	uxtb	r0, r3
 8002362:	e7f1      	b.n	8002348 <__aeabi_d2f+0x28>
 8002364:	4325      	orrs	r5, r4
 8002366:	d0ed      	beq.n	8002344 <__aeabi_d2f+0x24>
 8002368:	2080      	movs	r0, #128	; 0x80
 800236a:	03c0      	lsls	r0, r0, #15
 800236c:	4304      	orrs	r4, r0
 800236e:	20ff      	movs	r0, #255	; 0xff
 8002370:	e7ea      	b.n	8002348 <__aeabi_d2f+0x28>
 8002372:	2e00      	cmp	r6, #0
 8002374:	dd1b      	ble.n	80023ae <__aeabi_d2f+0x8e>
 8002376:	0192      	lsls	r2, r2, #6
 8002378:	1e53      	subs	r3, r2, #1
 800237a:	419a      	sbcs	r2, r3
 800237c:	00e4      	lsls	r4, r4, #3
 800237e:	0f6d      	lsrs	r5, r5, #29
 8002380:	4322      	orrs	r2, r4
 8002382:	432a      	orrs	r2, r5
 8002384:	0753      	lsls	r3, r2, #29
 8002386:	d048      	beq.n	800241a <__aeabi_d2f+0xfa>
 8002388:	230f      	movs	r3, #15
 800238a:	4013      	ands	r3, r2
 800238c:	2b04      	cmp	r3, #4
 800238e:	d000      	beq.n	8002392 <__aeabi_d2f+0x72>
 8002390:	3204      	adds	r2, #4
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	04db      	lsls	r3, r3, #19
 8002396:	4013      	ands	r3, r2
 8002398:	d03f      	beq.n	800241a <__aeabi_d2f+0xfa>
 800239a:	1c70      	adds	r0, r6, #1
 800239c:	2efe      	cmp	r6, #254	; 0xfe
 800239e:	d0d1      	beq.n	8002344 <__aeabi_d2f+0x24>
 80023a0:	0192      	lsls	r2, r2, #6
 80023a2:	0a54      	lsrs	r4, r2, #9
 80023a4:	b2c0      	uxtb	r0, r0
 80023a6:	e7cf      	b.n	8002348 <__aeabi_d2f+0x28>
 80023a8:	2000      	movs	r0, #0
 80023aa:	2400      	movs	r4, #0
 80023ac:	e7cc      	b.n	8002348 <__aeabi_d2f+0x28>
 80023ae:	0032      	movs	r2, r6
 80023b0:	3217      	adds	r2, #23
 80023b2:	db22      	blt.n	80023fa <__aeabi_d2f+0xda>
 80023b4:	2080      	movs	r0, #128	; 0x80
 80023b6:	0400      	lsls	r0, r0, #16
 80023b8:	4320      	orrs	r0, r4
 80023ba:	241e      	movs	r4, #30
 80023bc:	1ba4      	subs	r4, r4, r6
 80023be:	2c1f      	cmp	r4, #31
 80023c0:	dd1d      	ble.n	80023fe <__aeabi_d2f+0xde>
 80023c2:	2202      	movs	r2, #2
 80023c4:	4252      	negs	r2, r2
 80023c6:	1b96      	subs	r6, r2, r6
 80023c8:	0002      	movs	r2, r0
 80023ca:	40f2      	lsrs	r2, r6
 80023cc:	0016      	movs	r6, r2
 80023ce:	2c20      	cmp	r4, #32
 80023d0:	d004      	beq.n	80023dc <__aeabi_d2f+0xbc>
 80023d2:	4a15      	ldr	r2, [pc, #84]	; (8002428 <__aeabi_d2f+0x108>)
 80023d4:	4694      	mov	ip, r2
 80023d6:	4463      	add	r3, ip
 80023d8:	4098      	lsls	r0, r3
 80023da:	4305      	orrs	r5, r0
 80023dc:	002a      	movs	r2, r5
 80023de:	1e53      	subs	r3, r2, #1
 80023e0:	419a      	sbcs	r2, r3
 80023e2:	4332      	orrs	r2, r6
 80023e4:	2600      	movs	r6, #0
 80023e6:	0753      	lsls	r3, r2, #29
 80023e8:	d1ce      	bne.n	8002388 <__aeabi_d2f+0x68>
 80023ea:	2480      	movs	r4, #128	; 0x80
 80023ec:	0013      	movs	r3, r2
 80023ee:	04e4      	lsls	r4, r4, #19
 80023f0:	2001      	movs	r0, #1
 80023f2:	4023      	ands	r3, r4
 80023f4:	4222      	tst	r2, r4
 80023f6:	d1d3      	bne.n	80023a0 <__aeabi_d2f+0x80>
 80023f8:	e7b0      	b.n	800235c <__aeabi_d2f+0x3c>
 80023fa:	2300      	movs	r3, #0
 80023fc:	e7ad      	b.n	800235a <__aeabi_d2f+0x3a>
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <__aeabi_d2f+0x10c>)
 8002400:	4694      	mov	ip, r2
 8002402:	002a      	movs	r2, r5
 8002404:	40e2      	lsrs	r2, r4
 8002406:	0014      	movs	r4, r2
 8002408:	002a      	movs	r2, r5
 800240a:	4463      	add	r3, ip
 800240c:	409a      	lsls	r2, r3
 800240e:	4098      	lsls	r0, r3
 8002410:	1e55      	subs	r5, r2, #1
 8002412:	41aa      	sbcs	r2, r5
 8002414:	4302      	orrs	r2, r0
 8002416:	4322      	orrs	r2, r4
 8002418:	e7e4      	b.n	80023e4 <__aeabi_d2f+0xc4>
 800241a:	0033      	movs	r3, r6
 800241c:	e79e      	b.n	800235c <__aeabi_d2f+0x3c>
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	000007fe 	.word	0x000007fe
 8002424:	fffffc80 	.word	0xfffffc80
 8002428:	fffffca2 	.word	0xfffffca2
 800242c:	fffffc82 	.word	0xfffffc82

08002430 <__clzsi2>:
 8002430:	211c      	movs	r1, #28
 8002432:	2301      	movs	r3, #1
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	4298      	cmp	r0, r3
 8002438:	d301      	bcc.n	800243e <__clzsi2+0xe>
 800243a:	0c00      	lsrs	r0, r0, #16
 800243c:	3910      	subs	r1, #16
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	4298      	cmp	r0, r3
 8002442:	d301      	bcc.n	8002448 <__clzsi2+0x18>
 8002444:	0a00      	lsrs	r0, r0, #8
 8002446:	3908      	subs	r1, #8
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	4298      	cmp	r0, r3
 800244c:	d301      	bcc.n	8002452 <__clzsi2+0x22>
 800244e:	0900      	lsrs	r0, r0, #4
 8002450:	3904      	subs	r1, #4
 8002452:	a202      	add	r2, pc, #8	; (adr r2, 800245c <__clzsi2+0x2c>)
 8002454:	5c10      	ldrb	r0, [r2, r0]
 8002456:	1840      	adds	r0, r0, r1
 8002458:	4770      	bx	lr
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	02020304 	.word	0x02020304
 8002460:	01010101 	.word	0x01010101
	...

0800246c <leds_init>:
uint16_t BUF_DMA [ARRAY_LEN] = {0};
uint8_t dma_ready = 1;


void leds_init(led_controller *led, TIM_HandleTypeDef * htim, uint32_t Channel)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
	led->htim = htim;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	601a      	str	r2, [r3, #0]
	led->Channel = Channel;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	605a      	str	r2, [r3, #4]


	for(int i = 0; i < ARRAY_LEN - DELAY_LEN - FRONT_DELAY; i++)
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e009      	b.n	800249e <leds_init+0x32>
	{
		BUF_DMA[i+FRONT_DELAY] = LOW;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3308      	adds	r3, #8
 800248e:	001a      	movs	r2, r3
 8002490:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <leds_init+0x48>)
 8002492:	0052      	lsls	r2, r2, #1
 8002494:	210f      	movs	r1, #15
 8002496:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < ARRAY_LEN - DELAY_LEN - FRONT_DELAY; i++)
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	3301      	adds	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	2390      	movs	r3, #144	; 0x90
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbf0      	blt.n	800248a <leds_init+0x1e>
	}
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b006      	add	sp, #24
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	20000094 	.word	0x20000094

080024b8 <set_color>:
	leds->led_array[pos].g = G;
	leds->led_array[pos].b = B;
}

void set_color(uint8_t R, uint8_t G, uint8_t B, uint16_t pos)
{
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	0005      	movs	r5, r0
 80024c0:	000c      	movs	r4, r1
 80024c2:	0010      	movs	r0, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	1dfb      	adds	r3, r7, #7
 80024c8:	1c2a      	adds	r2, r5, #0
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	1dbb      	adds	r3, r7, #6
 80024ce:	1c22      	adds	r2, r4, #0
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	1d7b      	adds	r3, r7, #5
 80024d4:	1c02      	adds	r2, r0, #0
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	1cbb      	adds	r3, r7, #2
 80024da:	1c0a      	adds	r2, r1, #0
 80024dc:	801a      	strh	r2, [r3, #0]
	int i;
	for(i = 0; i<8; i++)
 80024de:	2300      	movs	r3, #0
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	e081      	b.n	80025e8 <set_color+0x130>
	{
		if(BitIsSet(G, 7-i))
 80024e4:	1dbb      	adds	r3, r7, #6
 80024e6:	781a      	ldrb	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2107      	movs	r1, #7
 80024ec:	1acb      	subs	r3, r1, r3
 80024ee:	411a      	asrs	r2, r3
 80024f0:	0013      	movs	r3, r2
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	d00f      	beq.n	8002518 <set_color+0x60>
			BUF_DMA[i+pos*24 + FRONT_DELAY] = HIGH;
 80024f8:	1cbb      	adds	r3, r7, #2
 80024fa:	881a      	ldrh	r2, [r3, #0]
 80024fc:	0013      	movs	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	189b      	adds	r3, r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	001a      	movs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	18d3      	adds	r3, r2, r3
 800250a:	3308      	adds	r3, #8
 800250c:	001a      	movs	r2, r3
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <set_color+0x144>)
 8002510:	0052      	lsls	r2, r2, #1
 8002512:	2123      	movs	r1, #35	; 0x23
 8002514:	52d1      	strh	r1, [r2, r3]
 8002516:	e00e      	b.n	8002536 <set_color+0x7e>
		else
			BUF_DMA[i+pos*24+ FRONT_DELAY] = LOW;
 8002518:	1cbb      	adds	r3, r7, #2
 800251a:	881a      	ldrh	r2, [r3, #0]
 800251c:	0013      	movs	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	189b      	adds	r3, r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	001a      	movs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	18d3      	adds	r3, r2, r3
 800252a:	3308      	adds	r3, #8
 800252c:	001a      	movs	r2, r3
 800252e:	4b33      	ldr	r3, [pc, #204]	; (80025fc <set_color+0x144>)
 8002530:	0052      	lsls	r2, r2, #1
 8002532:	210f      	movs	r1, #15
 8002534:	52d1      	strh	r1, [r2, r3]

		if(BitIsSet(R, 7-i))
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2107      	movs	r1, #7
 800253e:	1acb      	subs	r3, r1, r3
 8002540:	411a      	asrs	r2, r3
 8002542:	0013      	movs	r3, r2
 8002544:	2201      	movs	r2, #1
 8002546:	4013      	ands	r3, r2
 8002548:	d010      	beq.n	800256c <set_color+0xb4>
			BUF_DMA[i+8+pos*24+ FRONT_DELAY] = HIGH;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3308      	adds	r3, #8
 800254e:	0019      	movs	r1, r3
 8002550:	1cbb      	adds	r3, r7, #2
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	0013      	movs	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	189b      	adds	r3, r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	18cb      	adds	r3, r1, r3
 800255e:	3308      	adds	r3, #8
 8002560:	001a      	movs	r2, r3
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <set_color+0x144>)
 8002564:	0052      	lsls	r2, r2, #1
 8002566:	2123      	movs	r1, #35	; 0x23
 8002568:	52d1      	strh	r1, [r2, r3]
 800256a:	e00f      	b.n	800258c <set_color+0xd4>
		else
			BUF_DMA[i+8+pos*24+ FRONT_DELAY] = LOW;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3308      	adds	r3, #8
 8002570:	0019      	movs	r1, r3
 8002572:	1cbb      	adds	r3, r7, #2
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	0013      	movs	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	189b      	adds	r3, r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	18cb      	adds	r3, r1, r3
 8002580:	3308      	adds	r3, #8
 8002582:	001a      	movs	r2, r3
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <set_color+0x144>)
 8002586:	0052      	lsls	r2, r2, #1
 8002588:	210f      	movs	r1, #15
 800258a:	52d1      	strh	r1, [r2, r3]

		if(BitIsSet(B, 7-i))
 800258c:	1d7b      	adds	r3, r7, #5
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2107      	movs	r1, #7
 8002594:	1acb      	subs	r3, r1, r3
 8002596:	411a      	asrs	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	2201      	movs	r2, #1
 800259c:	4013      	ands	r3, r2
 800259e:	d010      	beq.n	80025c2 <set_color+0x10a>
			BUF_DMA[i+16+pos*24+ FRONT_DELAY] = HIGH;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3310      	adds	r3, #16
 80025a4:	0019      	movs	r1, r3
 80025a6:	1cbb      	adds	r3, r7, #2
 80025a8:	881a      	ldrh	r2, [r3, #0]
 80025aa:	0013      	movs	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	189b      	adds	r3, r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	18cb      	adds	r3, r1, r3
 80025b4:	3308      	adds	r3, #8
 80025b6:	001a      	movs	r2, r3
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <set_color+0x144>)
 80025ba:	0052      	lsls	r2, r2, #1
 80025bc:	2123      	movs	r1, #35	; 0x23
 80025be:	52d1      	strh	r1, [r2, r3]
 80025c0:	e00f      	b.n	80025e2 <set_color+0x12a>
		else
			BUF_DMA[i+16+pos*24+ FRONT_DELAY] = LOW;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	3310      	adds	r3, #16
 80025c6:	0019      	movs	r1, r3
 80025c8:	1cbb      	adds	r3, r7, #2
 80025ca:	881a      	ldrh	r2, [r3, #0]
 80025cc:	0013      	movs	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	189b      	adds	r3, r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	18cb      	adds	r3, r1, r3
 80025d6:	3308      	adds	r3, #8
 80025d8:	001a      	movs	r2, r3
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <set_color+0x144>)
 80025dc:	0052      	lsls	r2, r2, #1
 80025de:	210f      	movs	r1, #15
 80025e0:	52d1      	strh	r1, [r2, r3]
	for(i = 0; i<8; i++)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3301      	adds	r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b07      	cmp	r3, #7
 80025ec:	dc00      	bgt.n	80025f0 <set_color+0x138>
 80025ee:	e779      	b.n	80024e4 <set_color+0x2c>
	}
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b004      	add	sp, #16
 80025f8:	bdb0      	pop	{r4, r5, r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	20000094 	.word	0x20000094

08002600 <led_display>:

void led_display(led_controller *led)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	//while(!dma_ready);
	dma_ready = 0;
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <led_display+0x28>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(led->htim, led->Channel, (uint32_t*)&BUF_DMA, ARRAY_LEN);	//ARRAY_LEN
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	23b4      	movs	r3, #180	; 0xb4
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4a04      	ldr	r2, [pc, #16]	; (800262c <led_display+0x2c>)
 800261c:	f004 f8f6 	bl	800680c <HAL_TIM_PWM_Start_DMA>
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000000 	.word	0x20000000
 800262c:	20000094 	.word	0x20000094

08002630 <motor_init>:

//static uint32_t last_stall_test_tick = 0;

void motor_init(motor_controller *motor, TIM_HandleTypeDef * htim, uint32_t Channel,
		 GPIO_TypeDef * PORT1, uint16_t PIN1, GPIO_TypeDef * PORT2, uint16_t PIN2, int rev, float max_current)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
	motor->htim = htim;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	601a      	str	r2, [r3, #0]
	motor->Channel = Channel;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	605a      	str	r2, [r3, #4]

	motor->PORT1 = PORT1;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	609a      	str	r2, [r3, #8]
	motor->PIN1 = PIN1;
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	2318      	movs	r3, #24
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	8193      	strh	r3, [r2, #12]
	motor->PORT2 = PORT2;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	611a      	str	r2, [r3, #16]
	motor->PIN2 = PIN2;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2220      	movs	r2, #32
 8002664:	18ba      	adds	r2, r7, r2
 8002666:	8812      	ldrh	r2, [r2, #0]
 8002668:	829a      	strh	r2, [r3, #20]

	motor->done = 1;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	759a      	strb	r2, [r3, #22]
	motor->stall = 0;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	75da      	strb	r2, [r3, #23]
	motor->stalled_current = 0;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	761a      	strb	r2, [r3, #24]
	motor->max_current_in_move = 0.0;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]

	motor->max_allowed_current = max_current;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002686:	621a      	str	r2, [r3, #32]

	motor->encoder_location = 0;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	625a      	str	r2, [r3, #36]	; 0x24
	motor->previous_encoder_location = 0;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	629a      	str	r2, [r3, #40]	; 0x28

	motor->reverse = rev;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002698:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_TIM_PWM_Start(htim, Channel);
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	0011      	movs	r1, r2
 80026a0:	0018      	movs	r0, r3
 80026a2:	f003 fffb 	bl	800669c <HAL_TIM_PWM_Start>

}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b004      	add	sp, #16
 80026ac:	bd80      	pop	{r7, pc}

080026ae <spin_motor>:

void spin_motor(motor_controller *motor, int speed)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b084      	sub	sp, #16
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
	int spd = motor->reverse * speed;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	4353      	muls	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

	if (spd > 0)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	dd2b      	ble.n	8002720 <spin_motor+0x72>
	{
		HAL_GPIO_WritePin (motor->PORT1, motor->PIN1, GPIO_PIN_SET);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6898      	ldr	r0, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	899b      	ldrh	r3, [r3, #12]
 80026d0:	2201      	movs	r2, #1
 80026d2:	0019      	movs	r1, r3
 80026d4:	f002 ffcb 	bl	800566e <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, spd);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <spin_motor+0x3e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	635a      	str	r2, [r3, #52]	; 0x34
	{
		//HAL_GPIO_WritePin (motor->PORT1, motor->PIN1, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, 0);
	}

}
 80026ea:	e073      	b.n	80027d4 <spin_motor+0x126>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, spd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d105      	bne.n	8002700 <spin_motor+0x52>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6393      	str	r3, [r2, #56]	; 0x38
 80026fe:	e069      	b.n	80027d4 <spin_motor+0x126>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d105      	bne.n	8002714 <spin_motor+0x66>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002712:	e05f      	b.n	80027d4 <spin_motor+0x126>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800271e:	e059      	b.n	80027d4 <spin_motor+0x126>
	else if (spd < 0)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	da32      	bge.n	800278c <spin_motor+0xde>
		HAL_GPIO_WritePin (motor->PORT1, motor->PIN1, GPIO_PIN_RESET);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6898      	ldr	r0, [r3, #8]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	899b      	ldrh	r3, [r3, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	0019      	movs	r1, r3
 8002732:	f002 ff9c 	bl	800566e <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, -1*spd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <spin_motor+0x9e>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	425a      	negs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	635a      	str	r2, [r3, #52]	; 0x34
}
 800274a:	e043      	b.n	80027d4 <spin_motor+0x126>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, -1*spd);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d107      	bne.n	8002764 <spin_motor+0xb6>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4259      	negs	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	000b      	movs	r3, r1
 8002760:	6393      	str	r3, [r2, #56]	; 0x38
 8002762:	e037      	b.n	80027d4 <spin_motor+0x126>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d107      	bne.n	800277c <spin_motor+0xce>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4259      	negs	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	000b      	movs	r3, r1
 8002778:	63d3      	str	r3, [r2, #60]	; 0x3c
 800277a:	e02b      	b.n	80027d4 <spin_motor+0x126>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4259      	negs	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	000b      	movs	r3, r1
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
}
 800278a:	e023      	b.n	80027d4 <spin_motor+0x126>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, 0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <spin_motor+0xf2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2200      	movs	r2, #0
 800279c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800279e:	e019      	b.n	80027d4 <spin_motor+0x126>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, 0);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d105      	bne.n	80027b4 <spin_motor+0x106>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	2300      	movs	r3, #0
 80027b0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80027b2:	e00f      	b.n	80027d4 <spin_motor+0x126>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, 0);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d105      	bne.n	80027c8 <spin_motor+0x11a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	2300      	movs	r3, #0
 80027c4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80027c6:	e005      	b.n	80027d4 <spin_motor+0x126>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->Channel, 0);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	2300      	movs	r3, #0
 80027d0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80027d2:	e7ff      	b.n	80027d4 <spin_motor+0x126>
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b004      	add	sp, #16
 80027da:	bd80      	pop	{r7, pc}

080027dc <motor_mode>:

void motor_mode(motor_controller *motor, int mode)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
	if (mode == 1)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d108      	bne.n	80027fe <motor_mode+0x22>
	{
		HAL_GPIO_WritePin (motor->PORT2, motor->PIN2, GPIO_PIN_SET);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6918      	ldr	r0, [r3, #16]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8a9b      	ldrh	r3, [r3, #20]
 80027f4:	2201      	movs	r2, #1
 80027f6:	0019      	movs	r1, r3
 80027f8:	f002 ff39 	bl	800566e <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin (motor->PORT2, motor->PIN2, GPIO_PIN_RESET);
	}
}
 80027fc:	e007      	b.n	800280e <motor_mode+0x32>
		HAL_GPIO_WritePin (motor->PORT2, motor->PIN2, GPIO_PIN_RESET);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6918      	ldr	r0, [r3, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	8a9b      	ldrh	r3, [r3, #20]
 8002806:	2200      	movs	r2, #0
 8002808:	0019      	movs	r1, r3
 800280a:	f002 ff30 	bl	800566e <HAL_GPIO_WritePin>
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b002      	add	sp, #8
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <decode_packet>:
extern UART_HandleTypeDef huart2;

extern motor_controller dc_motor_1;

void decode_packet(char * rx_msg, int length)
{
 8002818:	b5b0      	push	{r4, r5, r7, lr}
 800281a:	b09c      	sub	sp, #112	; 0x70
 800281c:	af02      	add	r7, sp, #8
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
	int tmp;
	if(length < 1 || rx_msg[0] == 0)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	dc00      	bgt.n	800282a <decode_packet+0x12>
 8002828:	e0ac      	b.n	8002984 <decode_packet+0x16c>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d100      	bne.n	8002834 <decode_packet+0x1c>
 8002832:	e0a7      	b.n	8002984 <decode_packet+0x16c>
		return;


	char arg1[20] = {0}, arg2[20] = {0};
 8002834:	2450      	movs	r4, #80	; 0x50
 8002836:	193b      	adds	r3, r7, r4
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	3304      	adds	r3, #4
 800283e:	2210      	movs	r2, #16
 8002840:	2100      	movs	r1, #0
 8002842:	0018      	movs	r0, r3
 8002844:	f006 fcff 	bl	8009246 <memset>
 8002848:	253c      	movs	r5, #60	; 0x3c
 800284a:	197b      	adds	r3, r7, r5
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	3304      	adds	r3, #4
 8002852:	2210      	movs	r2, #16
 8002854:	2100      	movs	r1, #0
 8002856:	0018      	movs	r0, r3
 8002858:	f006 fcf5 	bl	8009246 <memset>
	split_command(rx_msg, length, arg1, arg2);
 800285c:	197b      	adds	r3, r7, r5
 800285e:	193a      	adds	r2, r7, r4
 8002860:	6839      	ldr	r1, [r7, #0]
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f89e 	bl	80029a4 <split_command>

	char tmp_buf[50];
	memset(tmp_buf, 0, sizeof(tmp_buf));
 8002868:	2408      	movs	r4, #8
 800286a:	193b      	adds	r3, r7, r4
 800286c:	2232      	movs	r2, #50	; 0x32
 800286e:	2100      	movs	r1, #0
 8002870:	0018      	movs	r0, r3
 8002872:	f006 fce8 	bl	8009246 <memset>
	snprintf(tmp_buf, 50, "LEN: %d, DATA: %s\n", length, rx_msg);
 8002876:	6839      	ldr	r1, [r7, #0]
 8002878:	4a44      	ldr	r2, [pc, #272]	; (800298c <decode_packet+0x174>)
 800287a:	1938      	adds	r0, r7, r4
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	000b      	movs	r3, r1
 8002882:	2132      	movs	r1, #50	; 0x32
 8002884:	f006 fce8 	bl	8009258 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)&tmp_buf, strlen(tmp_buf), 0xFFFF);
 8002888:	193b      	adds	r3, r7, r4
 800288a:	0018      	movs	r0, r3
 800288c:	f7fd fc3c 	bl	8000108 <strlen>
 8002890:	0003      	movs	r3, r0
 8002892:	b29a      	uxth	r2, r3
 8002894:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <decode_packet+0x178>)
 8002896:	1939      	adds	r1, r7, r4
 8002898:	483e      	ldr	r0, [pc, #248]	; (8002994 <decode_packet+0x17c>)
 800289a:	f005 fa2b 	bl	8007cf4 <HAL_UART_Transmit>


	switch(rx_msg[0])
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b61      	cmp	r3, #97	; 0x61
 80028a4:	d008      	beq.n	80028b8 <decode_packet+0xa0>
 80028a6:	dc53      	bgt.n	8002950 <decode_packet+0x138>
 80028a8:	2b2d      	cmp	r3, #45	; 0x2d
 80028aa:	d002      	beq.n	80028b2 <decode_packet+0x9a>
 80028ac:	2b41      	cmp	r3, #65	; 0x41
 80028ae:	d029      	beq.n	8002904 <decode_packet+0xec>
 80028b0:	e04e      	b.n	8002950 <decode_packet+0x138>
	{
		case '-':
			HAL_NVIC_SystemReset();
 80028b2:	f002 fb16 	bl	8004ee2 <HAL_NVIC_SystemReset>
			break;
 80028b6:	e066      	b.n	8002986 <decode_packet+0x16e>

		case 'a':
		{
			tmp = atoi(arg1);
 80028b8:	2350      	movs	r3, #80	; 0x50
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	0018      	movs	r0, r3
 80028be:	f006 fc62 	bl	8009186 <atoi>
 80028c2:	0003      	movs	r3, r0
 80028c4:	667b      	str	r3, [r7, #100]	; 0x64
			memset(tmp_buf, 0, sizeof(tmp_buf));
 80028c6:	2408      	movs	r4, #8
 80028c8:	193b      	adds	r3, r7, r4
 80028ca:	2232      	movs	r2, #50	; 0x32
 80028cc:	2100      	movs	r1, #0
 80028ce:	0018      	movs	r0, r3
 80028d0:	f006 fcb9 	bl	8009246 <memset>
			snprintf(tmp_buf, 50, "spin motor A %d\n", tmp);
 80028d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028d6:	4a30      	ldr	r2, [pc, #192]	; (8002998 <decode_packet+0x180>)
 80028d8:	1938      	adds	r0, r7, r4
 80028da:	2132      	movs	r1, #50	; 0x32
 80028dc:	f006 fcbc 	bl	8009258 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)&tmp_buf, strlen(tmp_buf), 0xFFFF);
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7fd fc10 	bl	8000108 <strlen>
 80028e8:	0003      	movs	r3, r0
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <decode_packet+0x178>)
 80028ee:	1939      	adds	r1, r7, r4
 80028f0:	4828      	ldr	r0, [pc, #160]	; (8002994 <decode_packet+0x17c>)
 80028f2:	f005 f9ff 	bl	8007cf4 <HAL_UART_Transmit>
			spin_motor(&dc_motor_1, tmp);
 80028f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <decode_packet+0x184>)
 80028fa:	0011      	movs	r1, r2
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff fed6 	bl	80026ae <spin_motor>
		}
			break;
 8002902:	e040      	b.n	8002986 <decode_packet+0x16e>

		case 'A':
		{
			tmp = atoi(arg1);
 8002904:	2350      	movs	r3, #80	; 0x50
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	0018      	movs	r0, r3
 800290a:	f006 fc3c 	bl	8009186 <atoi>
 800290e:	0003      	movs	r3, r0
 8002910:	667b      	str	r3, [r7, #100]	; 0x64
			memset(tmp_buf, 0, sizeof(tmp_buf));
 8002912:	2408      	movs	r4, #8
 8002914:	193b      	adds	r3, r7, r4
 8002916:	2232      	movs	r2, #50	; 0x32
 8002918:	2100      	movs	r1, #0
 800291a:	0018      	movs	r0, r3
 800291c:	f006 fc93 	bl	8009246 <memset>
			snprintf(tmp_buf, 50, "spin motor A %d\n", tmp);
 8002920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002922:	4a1d      	ldr	r2, [pc, #116]	; (8002998 <decode_packet+0x180>)
 8002924:	1938      	adds	r0, r7, r4
 8002926:	2132      	movs	r1, #50	; 0x32
 8002928:	f006 fc96 	bl	8009258 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)&tmp_buf, strlen(tmp_buf), 0xFFFF);
 800292c:	193b      	adds	r3, r7, r4
 800292e:	0018      	movs	r0, r3
 8002930:	f7fd fbea 	bl	8000108 <strlen>
 8002934:	0003      	movs	r3, r0
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <decode_packet+0x178>)
 800293a:	1939      	adds	r1, r7, r4
 800293c:	4815      	ldr	r0, [pc, #84]	; (8002994 <decode_packet+0x17c>)
 800293e:	f005 f9d9 	bl	8007cf4 <HAL_UART_Transmit>
			spin_motor(&dc_motor_1, tmp);
 8002942:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002944:	4b15      	ldr	r3, [pc, #84]	; (800299c <decode_packet+0x184>)
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f7ff feb0 	bl	80026ae <spin_motor>
		}
			break;
 800294e:	e01a      	b.n	8002986 <decode_packet+0x16e>


		default:
			memset(tmp_buf, 0, sizeof(tmp_buf));
 8002950:	2408      	movs	r4, #8
 8002952:	193b      	adds	r3, r7, r4
 8002954:	2232      	movs	r2, #50	; 0x32
 8002956:	2100      	movs	r1, #0
 8002958:	0018      	movs	r0, r3
 800295a:	f006 fc74 	bl	8009246 <memset>
			snprintf(tmp_buf, 50, "unknown command: '%c'\n", rx_msg[0]);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <decode_packet+0x188>)
 8002964:	1938      	adds	r0, r7, r4
 8002966:	2132      	movs	r1, #50	; 0x32
 8002968:	f006 fc76 	bl	8009258 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *)&tmp_buf, strlen(tmp_buf), 0xFFFF);
 800296c:	193b      	adds	r3, r7, r4
 800296e:	0018      	movs	r0, r3
 8002970:	f7fd fbca 	bl	8000108 <strlen>
 8002974:	0003      	movs	r3, r0
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b05      	ldr	r3, [pc, #20]	; (8002990 <decode_packet+0x178>)
 800297a:	1939      	adds	r1, r7, r4
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <decode_packet+0x17c>)
 800297e:	f005 f9b9 	bl	8007cf4 <HAL_UART_Transmit>
			break;
 8002982:	e000      	b.n	8002986 <decode_packet+0x16e>
		return;
 8002984:	46c0      	nop			; (mov r8, r8)
	}
}
 8002986:	46bd      	mov	sp, r7
 8002988:	b01a      	add	sp, #104	; 0x68
 800298a:	bdb0      	pop	{r4, r5, r7, pc}
 800298c:	0800c018 	.word	0x0800c018
 8002990:	0000ffff 	.word	0x0000ffff
 8002994:	200005ec 	.word	0x200005ec
 8002998:	0800c02c 	.word	0x0800c02c
 800299c:	200006b4 	.word	0x200006b4
 80029a0:	0800c040 	.word	0x0800c040

080029a4 <split_command>:

void split_command(char * packet, int len, char * arg1, char* arg2)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
    int index = 0, prev_index = 1;
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	2301      	movs	r3, #1
 80029b8:	613b      	str	r3, [r7, #16]

    index = getposition(packet, 0, ',');
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	222c      	movs	r2, #44	; 0x2c
 80029be:	2100      	movs	r1, #0
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 f885 	bl	8002ad0 <getposition>
 80029c6:	0003      	movs	r3, r0
 80029c8:	617b      	str	r3, [r7, #20]

    if(index > 0)   //if found a ','
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	dd44      	ble.n	8002a5a <split_command+0xb6>
    {
        memcpy(arg1, packet + prev_index, index-1);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	18d1      	adds	r1, r2, r3
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	3b01      	subs	r3, #1
 80029da:	001a      	movs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	0018      	movs	r0, r3
 80029e0:	f006 fc28 	bl	8009234 <memcpy>
        prev_index = index + 1;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	613b      	str	r3, [r7, #16]


        index = getposition(packet + prev_index, 0, '\r');
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	18d3      	adds	r3, r2, r3
 80029f0:	220d      	movs	r2, #13
 80029f2:	2100      	movs	r1, #0
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f86b 	bl	8002ad0 <getposition>
 80029fa:	0003      	movs	r3, r0
 80029fc:	617b      	str	r3, [r7, #20]
        if(index >= 0)   //if theres \r
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db08      	blt.n	8002a16 <split_command+0x72>
        {
            memcpy(arg2, packet + prev_index, index);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	18d1      	adds	r1, r2, r3
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f006 fc10 	bl	8009234 <memcpy>
            {
                memcpy(arg1, packet + prev_index, len - prev_index);
            }
        }
    }
}
 8002a14:	e058      	b.n	8002ac8 <split_command+0x124>
            index = getposition(packet + prev_index, 0, '\n');
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	18d3      	adds	r3, r2, r3
 8002a1c:	220a      	movs	r2, #10
 8002a1e:	2100      	movs	r1, #0
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f855 	bl	8002ad0 <getposition>
 8002a26:	0003      	movs	r3, r0
 8002a28:	617b      	str	r3, [r7, #20]
            if(index >= 0)   //if theres \n and its not in the first char
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	db08      	blt.n	8002a42 <split_command+0x9e>
                memcpy(arg2, packet + prev_index, index);
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	18d1      	adds	r1, r2, r3
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f006 fbfa 	bl	8009234 <memcpy>
}
 8002a40:	e042      	b.n	8002ac8 <split_command+0x124>
                memcpy(arg2, packet + prev_index, len - prev_index);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	18d1      	adds	r1, r2, r3
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	001a      	movs	r2, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f006 fbee 	bl	8009234 <memcpy>
}
 8002a58:	e036      	b.n	8002ac8 <split_command+0x124>
        index = getposition(packet, 0, '\r');
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	220d      	movs	r2, #13
 8002a5e:	2100      	movs	r1, #0
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 f835 	bl	8002ad0 <getposition>
 8002a66:	0003      	movs	r3, r0
 8002a68:	617b      	str	r3, [r7, #20]
        if(index >= 1)   //if theres \r and its not in the first char
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	dd0a      	ble.n	8002a86 <split_command+0xe2>
            memcpy(arg1, packet + prev_index, index-1);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	18d1      	adds	r1, r2, r3
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	001a      	movs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f006 fbd8 	bl	8009234 <memcpy>
}
 8002a84:	e020      	b.n	8002ac8 <split_command+0x124>
            index = getposition(packet, 0, '\n');
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	220a      	movs	r2, #10
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	f000 f81f 	bl	8002ad0 <getposition>
 8002a92:	0003      	movs	r3, r0
 8002a94:	617b      	str	r3, [r7, #20]
            if(index >= 1)   //if theres \n and its not in the first char
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	dd0a      	ble.n	8002ab2 <split_command+0x10e>
                memcpy(arg1, packet + prev_index, index-1);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	18d1      	adds	r1, r2, r3
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f006 fbc2 	bl	8009234 <memcpy>
}
 8002ab0:	e00a      	b.n	8002ac8 <split_command+0x124>
                memcpy(arg1, packet + prev_index, len - prev_index);
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	18d1      	adds	r1, r2, r3
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	001a      	movs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f006 fbb6 	bl	8009234 <memcpy>
}
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b006      	add	sp, #24
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <getposition>:

int getposition(const char *array, size_t size, char c)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	1dfb      	adds	r3, r7, #7
 8002adc:	701a      	strb	r2, [r3, #0]
    char *ret = strchr(array, c);
 8002ade:	1dfb      	adds	r3, r7, #7
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	0011      	movs	r1, r2
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f006 fc0a 	bl	8009300 <strchr>
 8002aec:	0003      	movs	r3, r0
 8002aee:	617b      	str	r3, [r7, #20]
    if(ret != NULL)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <getposition+0x2e>
        return ret - array;
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	e001      	b.n	8002b02 <getposition+0x32>
    else
        return -1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	425b      	negs	r3, r3
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b006      	add	sp, #24
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <current_check>:
int lower_ms_pin=0; // 0 - open position, 1 - pressed position
int push_button_pin=1;// 1 - open position, 0 - pressed position
int push_flag=0;

int current_check()
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
	float calc_current = (3.3 * (float)adc_buffer[3]) / (1.5 * 1023) ;
 8002b12:	4b27      	ldr	r3, [pc, #156]	; (8002bb0 <current_check+0xa4>)
 8002b14:	88db      	ldrh	r3, [r3, #6]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7fd fdb0 	bl	800067c <__aeabi_ui2f>
 8002b1c:	1c03      	adds	r3, r0, #0
 8002b1e:	1c18      	adds	r0, r3, #0
 8002b20:	f7ff fbb6 	bl	8002290 <__aeabi_f2d>
 8002b24:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <current_check+0xa8>)
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <current_check+0xac>)
 8002b28:	f7fe fd28 	bl	800157c <__aeabi_dmul>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	000b      	movs	r3, r1
 8002b30:	0010      	movs	r0, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	2200      	movs	r2, #0
 8002b36:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <current_check+0xb0>)
 8002b38:	f7fe f91e 	bl	8000d78 <__aeabi_ddiv>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	000b      	movs	r3, r1
 8002b40:	0010      	movs	r0, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	f7ff fbec 	bl	8002320 <__aeabi_d2f>
 8002b48:	1c03      	adds	r3, r0, #0
 8002b4a:	607b      	str	r3, [r7, #4]

	if(calc_current>=dc_motor_1.max_current_in_move)
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <current_check+0xb4>)
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	1c19      	adds	r1, r3, #0
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fd fcd8 	bl	8000508 <__aeabi_fcmpge>
 8002b58:	1e03      	subs	r3, r0, #0
 8002b5a:	d002      	beq.n	8002b62 <current_check+0x56>
		dc_motor_1.max_current_in_move=calc_current;
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <current_check+0xb4>)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	61da      	str	r2, [r3, #28]
	if(dc_motor_1.max_current_in_move>=dc_motor_1.max_allowed_current)
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <current_check+0xb4>)
 8002b64:	69da      	ldr	r2, [r3, #28]
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <current_check+0xb4>)
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	1c19      	adds	r1, r3, #0
 8002b6c:	1c10      	adds	r0, r2, #0
 8002b6e:	f7fd fccb 	bl	8000508 <__aeabi_fcmpge>
 8002b72:	1e03      	subs	r3, r0, #0
 8002b74:	d017      	beq.n	8002ba6 <current_check+0x9a>
	{
		sprintf(buf, "MAX CURRENT DETECTED! STOPPING DC MOTOR...\r\n");
 8002b76:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <current_check+0xb8>)
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <current_check+0xbc>)
 8002b7a:	0011      	movs	r1, r2
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f006 fb9f 	bl	80092c0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&buf, strlen(buf), 0xFFFF);
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <current_check+0xbc>)
 8002b84:	0018      	movs	r0, r3
 8002b86:	f7fd fabf 	bl	8000108 <strlen>
 8002b8a:	0003      	movs	r3, r0
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <current_check+0xc0>)
 8002b90:	490d      	ldr	r1, [pc, #52]	; (8002bc8 <current_check+0xbc>)
 8002b92:	480f      	ldr	r0, [pc, #60]	; (8002bd0 <current_check+0xc4>)
 8002b94:	f005 f8ae 	bl	8007cf4 <HAL_UART_Transmit>
		spin_motor(&dc_motor_1,0);
 8002b98:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <current_check+0xb4>)
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7ff fd86 	bl	80026ae <spin_motor>
		return 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <current_check+0x9c>
	}
	return 0;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	0018      	movs	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b002      	add	sp, #8
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200006e4 	.word	0x200006e4
 8002bb4:	66666666 	.word	0x66666666
 8002bb8:	400a6666 	.word	0x400a6666
 8002bbc:	4097fa00 	.word	0x4097fa00
 8002bc0:	200006b4 	.word	0x200006b4
 8002bc4:	0800c058 	.word	0x0800c058
 8002bc8:	20000724 	.word	0x20000724
 8002bcc:	0000ffff 	.word	0x0000ffff
 8002bd0:	200005ec 	.word	0x200005ec

08002bd4 <motor_timeout_check>:

int motor_timeout_check()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	if(HAL_GetTick()-preMillis>=timeout_time)
 8002bd8:	f001 fbda 	bl	8004390 <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <motor_timeout_check+0x50>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	4a10      	ldr	r2, [pc, #64]	; (8002c28 <motor_timeout_check+0x54>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d918      	bls.n	8002c1c <motor_timeout_check+0x48>
	{
		preMillis=HAL_GetTick();
 8002bea:	f001 fbd1 	bl	8004390 <HAL_GetTick>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	001a      	movs	r2, r3
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <motor_timeout_check+0x50>)
 8002bf4:	601a      	str	r2, [r3, #0]
		sprintf(buf, "Motor movement timeout... \r\n");
 8002bf6:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <motor_timeout_check+0x58>)
 8002bf8:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <motor_timeout_check+0x5c>)
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f006 fb5f 	bl	80092c0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&buf, strlen(buf), 0xFFFF);
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <motor_timeout_check+0x5c>)
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7fd fa7f 	bl	8000108 <strlen>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <motor_timeout_check+0x60>)
 8002c10:	4907      	ldr	r1, [pc, #28]	; (8002c30 <motor_timeout_check+0x5c>)
 8002c12:	4809      	ldr	r0, [pc, #36]	; (8002c38 <motor_timeout_check+0x64>)
 8002c14:	f005 f86e 	bl	8007cf4 <HAL_UART_Transmit>
		return 1;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <motor_timeout_check+0x4a>
	}
	return 0;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	0018      	movs	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	20000924 	.word	0x20000924
 8002c28:	0000270f 	.word	0x0000270f
 8002c2c:	0800c088 	.word	0x0800c088
 8002c30:	20000724 	.word	0x20000724
 8002c34:	0000ffff 	.word	0x0000ffff
 8002c38:	200005ec 	.word	0x200005ec

08002c3c <sequence_start>:


void sequence_start()
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
	int speed=100;
 8002c42:	2364      	movs	r3, #100	; 0x64
 8002c44:	60fb      	str	r3, [r7, #12]
	char current_output[5];
	lower_ms_pin=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10);
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	4aa0      	ldr	r2, [pc, #640]	; (8002ecc <sequence_start+0x290>)
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	0010      	movs	r0, r2
 8002c50:	f002 fcf0 	bl	8005634 <HAL_GPIO_ReadPin>
 8002c54:	0003      	movs	r3, r0
 8002c56:	001a      	movs	r2, r3
 8002c58:	4b9d      	ldr	r3, [pc, #628]	; (8002ed0 <sequence_start+0x294>)
 8002c5a:	601a      	str	r2, [r3, #0]
	upper_ms_pin=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	005a      	lsls	r2, r3, #1
 8002c60:	2390      	movs	r3, #144	; 0x90
 8002c62:	05db      	lsls	r3, r3, #23
 8002c64:	0011      	movs	r1, r2
 8002c66:	0018      	movs	r0, r3
 8002c68:	f002 fce4 	bl	8005634 <HAL_GPIO_ReadPin>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	001a      	movs	r2, r3
 8002c70:	4b98      	ldr	r3, [pc, #608]	; (8002ed4 <sequence_start+0x298>)
 8002c72:	601a      	str	r2, [r3, #0]
	push_button_pin=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_9);
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	009a      	lsls	r2, r3, #2
 8002c78:	2390      	movs	r3, #144	; 0x90
 8002c7a:	05db      	lsls	r3, r3, #23
 8002c7c:	0011      	movs	r1, r2
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f002 fcd8 	bl	8005634 <HAL_GPIO_ReadPin>
 8002c84:	0003      	movs	r3, r0
 8002c86:	001a      	movs	r2, r3
 8002c88:	4b93      	ldr	r3, [pc, #588]	; (8002ed8 <sequence_start+0x29c>)
 8002c8a:	601a      	str	r2, [r3, #0]
	if(!push_button_pin)
 8002c8c:	4b92      	ldr	r3, [pc, #584]	; (8002ed8 <sequence_start+0x29c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10c      	bne.n	8002cae <sequence_start+0x72>
	{
		set_color(0, 0, 0, 0);
 8002c94:	2300      	movs	r3, #0
 8002c96:	2200      	movs	r2, #0
 8002c98:	2100      	movs	r1, #0
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7ff fc0c 	bl	80024b8 <set_color>
		led_display(&led_indicator);
 8002ca0:	4b8e      	ldr	r3, [pc, #568]	; (8002edc <sequence_start+0x2a0>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7ff fcac 	bl	8002600 <led_display>
		push_flag=1;
 8002ca8:	4b8d      	ldr	r3, [pc, #564]	; (8002ee0 <sequence_start+0x2a4>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
	}

	if(push_flag)      //start sequence
 8002cae:	4b8c      	ldr	r3, [pc, #560]	; (8002ee0 <sequence_start+0x2a4>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d100      	bne.n	8002cb8 <sequence_start+0x7c>
 8002cb6:	e105      	b.n	8002ec4 <sequence_start+0x288>
	{
		sprintf(buf, "Push button was pressed. Starting calibration sequence  \r\n");
 8002cb8:	4a8a      	ldr	r2, [pc, #552]	; (8002ee4 <sequence_start+0x2a8>)
 8002cba:	4b8b      	ldr	r3, [pc, #556]	; (8002ee8 <sequence_start+0x2ac>)
 8002cbc:	0011      	movs	r1, r2
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f006 fafe 	bl	80092c0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&buf, strlen(buf), 0xFFFF);
 8002cc4:	4b88      	ldr	r3, [pc, #544]	; (8002ee8 <sequence_start+0x2ac>)
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7fd fa1e 	bl	8000108 <strlen>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	4b86      	ldr	r3, [pc, #536]	; (8002eec <sequence_start+0x2b0>)
 8002cd2:	4985      	ldr	r1, [pc, #532]	; (8002ee8 <sequence_start+0x2ac>)
 8002cd4:	4886      	ldr	r0, [pc, #536]	; (8002ef0 <sequence_start+0x2b4>)
 8002cd6:	f005 f80d 	bl	8007cf4 <HAL_UART_Transmit>

		while(!upper_ms_pin)
 8002cda:	e042      	b.n	8002d62 <sequence_start+0x126>
		{
			spin_motor(&dc_motor_1,speed);
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4b85      	ldr	r3, [pc, #532]	; (8002ef4 <sequence_start+0x2b8>)
 8002ce0:	0011      	movs	r1, r2
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f7ff fce3 	bl	80026ae <spin_motor>
			speed++;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
			HAL_Delay(speed_increase_delay);
 8002cee:	2023      	movs	r0, #35	; 0x23
 8002cf0:	f001 fb58 	bl	80043a4 <HAL_Delay>
			if(speed>255)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2bff      	cmp	r3, #255	; 0xff
 8002cf8:	dd01      	ble.n	8002cfe <sequence_start+0xc2>
				speed=255;
 8002cfa:	23ff      	movs	r3, #255	; 0xff
 8002cfc:	60fb      	str	r3, [r7, #12]
			if(current_check())
 8002cfe:	f7ff ff05 	bl	8002b0c <current_check>
 8002d02:	1e03      	subs	r3, r0, #0
 8002d04:	d00a      	beq.n	8002d1c <sequence_start+0xe0>
			{
				set_color(255, 0, 0, 0);
 8002d06:	2300      	movs	r3, #0
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	20ff      	movs	r0, #255	; 0xff
 8002d0e:	f7ff fbd3 	bl	80024b8 <set_color>
				led_display(&led_indicator);
 8002d12:	4b72      	ldr	r3, [pc, #456]	; (8002edc <sequence_start+0x2a0>)
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff fc73 	bl	8002600 <led_display>
				return;
 8002d1a:	e0d3      	b.n	8002ec4 <sequence_start+0x288>
			}
			if(motor_timeout_check())
 8002d1c:	f7ff ff5a 	bl	8002bd4 <motor_timeout_check>
 8002d20:	1e03      	subs	r3, r0, #0
 8002d22:	d012      	beq.n	8002d4a <sequence_start+0x10e>
			{
				spin_motor(&dc_motor_1,0);
 8002d24:	4b73      	ldr	r3, [pc, #460]	; (8002ef4 <sequence_start+0x2b8>)
 8002d26:	2100      	movs	r1, #0
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7ff fcc0 	bl	80026ae <spin_motor>
				set_color(255, 100, 0, 0);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2200      	movs	r2, #0
 8002d32:	2164      	movs	r1, #100	; 0x64
 8002d34:	20ff      	movs	r0, #255	; 0xff
 8002d36:	f7ff fbbf 	bl	80024b8 <set_color>
				led_display(&led_indicator);
 8002d3a:	4b68      	ldr	r3, [pc, #416]	; (8002edc <sequence_start+0x2a0>)
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff fc5f 	bl	8002600 <led_display>
				push_flag=0;// in loop need to reset when timeout
 8002d42:	4b67      	ldr	r3, [pc, #412]	; (8002ee0 <sequence_start+0x2a4>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
				return;
 8002d48:	e0bc      	b.n	8002ec4 <sequence_start+0x288>
			}
			upper_ms_pin=HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8);
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	005a      	lsls	r2, r3, #1
 8002d4e:	2390      	movs	r3, #144	; 0x90
 8002d50:	05db      	lsls	r3, r3, #23
 8002d52:	0011      	movs	r1, r2
 8002d54:	0018      	movs	r0, r3
 8002d56:	f002 fc6d 	bl	8005634 <HAL_GPIO_ReadPin>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	4b5d      	ldr	r3, [pc, #372]	; (8002ed4 <sequence_start+0x298>)
 8002d60:	601a      	str	r2, [r3, #0]
		while(!upper_ms_pin)
 8002d62:	4b5c      	ldr	r3, [pc, #368]	; (8002ed4 <sequence_start+0x298>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0b8      	beq.n	8002cdc <sequence_start+0xa0>
		}
		sprintf(buf, "Upper micro-swith is pressed. motor reached upper position \r\n");
 8002d6a:	4a63      	ldr	r2, [pc, #396]	; (8002ef8 <sequence_start+0x2bc>)
 8002d6c:	4b5e      	ldr	r3, [pc, #376]	; (8002ee8 <sequence_start+0x2ac>)
 8002d6e:	0011      	movs	r1, r2
 8002d70:	0018      	movs	r0, r3
 8002d72:	f006 faa5 	bl	80092c0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&buf, strlen(buf), 0xFFFF);
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <sequence_start+0x2ac>)
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f7fd f9c5 	bl	8000108 <strlen>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	4b5a      	ldr	r3, [pc, #360]	; (8002eec <sequence_start+0x2b0>)
 8002d84:	4958      	ldr	r1, [pc, #352]	; (8002ee8 <sequence_start+0x2ac>)
 8002d86:	485a      	ldr	r0, [pc, #360]	; (8002ef0 <sequence_start+0x2b4>)
 8002d88:	f004 ffb4 	bl	8007cf4 <HAL_UART_Transmit>

		spin_motor(&dc_motor_1,0);
 8002d8c:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <sequence_start+0x2b8>)
 8002d8e:	2100      	movs	r1, #0
 8002d90:	0018      	movs	r0, r3
 8002d92:	f7ff fc8c 	bl	80026ae <spin_motor>
		HAL_Delay(500);
 8002d96:	23fa      	movs	r3, #250	; 0xfa
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f001 fb02 	bl	80043a4 <HAL_Delay>
		speed=100;
 8002da0:	2364      	movs	r3, #100	; 0x64
 8002da2:	60fb      	str	r3, [r7, #12]
		preMillis=HAL_GetTick();
 8002da4:	f001 faf4 	bl	8004390 <HAL_GetTick>
 8002da8:	0003      	movs	r3, r0
 8002daa:	001a      	movs	r2, r3
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <sequence_start+0x2c0>)
 8002dae:	601a      	str	r2, [r3, #0]

		while(!lower_ms_pin)
 8002db0:	e042      	b.n	8002e38 <sequence_start+0x1fc>
		{
			spin_motor(&dc_motor_1,-1*speed);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	425a      	negs	r2, r3
 8002db6:	4b4f      	ldr	r3, [pc, #316]	; (8002ef4 <sequence_start+0x2b8>)
 8002db8:	0011      	movs	r1, r2
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7ff fc77 	bl	80026ae <spin_motor>
			speed++;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
			HAL_Delay(speed_increase_delay);
 8002dc6:	2023      	movs	r0, #35	; 0x23
 8002dc8:	f001 faec 	bl	80043a4 <HAL_Delay>
			if(speed>255)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2bff      	cmp	r3, #255	; 0xff
 8002dd0:	dd01      	ble.n	8002dd6 <sequence_start+0x19a>
				speed=255;
 8002dd2:	23ff      	movs	r3, #255	; 0xff
 8002dd4:	60fb      	str	r3, [r7, #12]
			if(current_check())
 8002dd6:	f7ff fe99 	bl	8002b0c <current_check>
 8002dda:	1e03      	subs	r3, r0, #0
 8002ddc:	d00a      	beq.n	8002df4 <sequence_start+0x1b8>
			{
				set_color(255, 0, 0, 0);
 8002dde:	2300      	movs	r3, #0
 8002de0:	2200      	movs	r2, #0
 8002de2:	2100      	movs	r1, #0
 8002de4:	20ff      	movs	r0, #255	; 0xff
 8002de6:	f7ff fb67 	bl	80024b8 <set_color>
				led_display(&led_indicator);
 8002dea:	4b3c      	ldr	r3, [pc, #240]	; (8002edc <sequence_start+0x2a0>)
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7ff fc07 	bl	8002600 <led_display>
				return;
 8002df2:	e067      	b.n	8002ec4 <sequence_start+0x288>
			}
			if(motor_timeout_check())
 8002df4:	f7ff feee 	bl	8002bd4 <motor_timeout_check>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d012      	beq.n	8002e22 <sequence_start+0x1e6>
			{
				spin_motor(&dc_motor_1,0);
 8002dfc:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <sequence_start+0x2b8>)
 8002dfe:	2100      	movs	r1, #0
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff fc54 	bl	80026ae <spin_motor>
				set_color(255, 100, 0, 0);
 8002e06:	2300      	movs	r3, #0
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2164      	movs	r1, #100	; 0x64
 8002e0c:	20ff      	movs	r0, #255	; 0xff
 8002e0e:	f7ff fb53 	bl	80024b8 <set_color>
				led_display(&led_indicator);
 8002e12:	4b32      	ldr	r3, [pc, #200]	; (8002edc <sequence_start+0x2a0>)
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff fbf3 	bl	8002600 <led_display>
				push_flag=0;// in loop need to reset when timeout
 8002e1a:	4b31      	ldr	r3, [pc, #196]	; (8002ee0 <sequence_start+0x2a4>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
				return;
 8002e20:	e050      	b.n	8002ec4 <sequence_start+0x288>
			}
			lower_ms_pin=HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_10);
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <sequence_start+0x290>)
 8002e28:	0019      	movs	r1, r3
 8002e2a:	0010      	movs	r0, r2
 8002e2c:	f002 fc02 	bl	8005634 <HAL_GPIO_ReadPin>
 8002e30:	0003      	movs	r3, r0
 8002e32:	001a      	movs	r2, r3
 8002e34:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <sequence_start+0x294>)
 8002e36:	601a      	str	r2, [r3, #0]
		while(!lower_ms_pin)
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <sequence_start+0x294>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0b8      	beq.n	8002db2 <sequence_start+0x176>
		}
		sprintf(buf, "Lower micro-swith is pressed. motor reached lower position \r\n");
 8002e40:	4a2f      	ldr	r2, [pc, #188]	; (8002f00 <sequence_start+0x2c4>)
 8002e42:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <sequence_start+0x2ac>)
 8002e44:	0011      	movs	r1, r2
 8002e46:	0018      	movs	r0, r3
 8002e48:	f006 fa3a 	bl	80092c0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&buf, strlen(buf), 0xFFFF);
 8002e4c:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <sequence_start+0x2ac>)
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f7fd f95a 	bl	8000108 <strlen>
 8002e54:	0003      	movs	r3, r0
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	4b24      	ldr	r3, [pc, #144]	; (8002eec <sequence_start+0x2b0>)
 8002e5a:	4923      	ldr	r1, [pc, #140]	; (8002ee8 <sequence_start+0x2ac>)
 8002e5c:	4824      	ldr	r0, [pc, #144]	; (8002ef0 <sequence_start+0x2b4>)
 8002e5e:	f004 ff49 	bl	8007cf4 <HAL_UART_Transmit>
		spin_motor(&dc_motor_1,0);
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <sequence_start+0x2b8>)
 8002e64:	2100      	movs	r1, #0
 8002e66:	0018      	movs	r0, r3
 8002e68:	f7ff fc21 	bl	80026ae <spin_motor>
		HAL_Delay(500);
 8002e6c:	23fa      	movs	r3, #250	; 0xfa
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	0018      	movs	r0, r3
 8002e72:	f001 fa97 	bl	80043a4 <HAL_Delay>
		push_flag=0;
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <sequence_start+0x2a4>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

		gcvt(dc_motor_1.max_current_in_move,5,current_output);
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <sequence_start+0x2b8>)
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	1c18      	adds	r0, r3, #0
 8002e82:	f7ff fa05 	bl	8002290 <__aeabi_f2d>
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2205      	movs	r2, #5
 8002e8a:	f006 f983 	bl	8009194 <gcvt>
		sprintf(buf, "\nSequence Finished Successfully , Max Current detected:%s \r\n\n",current_output);
 8002e8e:	1d3a      	adds	r2, r7, #4
 8002e90:	491c      	ldr	r1, [pc, #112]	; (8002f04 <sequence_start+0x2c8>)
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <sequence_start+0x2ac>)
 8002e94:	0018      	movs	r0, r3
 8002e96:	f006 fa13 	bl	80092c0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)&buf, strlen(buf), 0xFFFF);
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <sequence_start+0x2ac>)
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7fd f933 	bl	8000108 <strlen>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <sequence_start+0x2b0>)
 8002ea8:	490f      	ldr	r1, [pc, #60]	; (8002ee8 <sequence_start+0x2ac>)
 8002eaa:	4811      	ldr	r0, [pc, #68]	; (8002ef0 <sequence_start+0x2b4>)
 8002eac:	f004 ff22 	bl	8007cf4 <HAL_UART_Transmit>
		set_color(0, 255, 0, 0);
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	21ff      	movs	r1, #255	; 0xff
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7ff fafe 	bl	80024b8 <set_color>
		led_display(&led_indicator);
 8002ebc:	4b07      	ldr	r3, [pc, #28]	; (8002edc <sequence_start+0x2a0>)
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7ff fb9e 	bl	8002600 <led_display>
	}
}
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b004      	add	sp, #16
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	48000400 	.word	0x48000400
 8002ed0:	20000368 	.word	0x20000368
 8002ed4:	20000364 	.word	0x20000364
 8002ed8:	20000004 	.word	0x20000004
 8002edc:	200006ec 	.word	0x200006ec
 8002ee0:	2000036c 	.word	0x2000036c
 8002ee4:	0800c0a8 	.word	0x0800c0a8
 8002ee8:	20000724 	.word	0x20000724
 8002eec:	0000ffff 	.word	0x0000ffff
 8002ef0:	200005ec 	.word	0x200005ec
 8002ef4:	200006b4 	.word	0x200006b4
 8002ef8:	0800c0e4 	.word	0x0800c0e4
 8002efc:	20000924 	.word	0x20000924
 8002f00:	0800c124 	.word	0x0800c124
 8002f04:	0800c164 	.word	0x0800c164

08002f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b0c8      	sub	sp, #288	; 0x120
 8002f0c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f0e:	f001 f9e5 	bl	80042dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f12:	f000 f885 	bl	8003020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f16:	f000 fc11 	bl	800373c <MX_GPIO_Init>
  MX_DMA_Init();
 8002f1a:	f000 fbe1 	bl	80036e0 <MX_DMA_Init>
  MX_ADC_Init();
 8002f1e:	f000 f8fb 	bl	8003118 <MX_ADC_Init>
  MX_TIM2_Init();
 8002f22:	f000 f9bb 	bl	800329c <MX_TIM2_Init>
  MX_TIM16_Init();
 8002f26:	f000 faff 	bl	8003528 <MX_TIM16_Init>
  MX_TIM3_Init();
 8002f2a:	f000 fa19 	bl	8003360 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8002f2e:	f000 fba7 	bl	8003680 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8002f32:	f000 fb7d 	bl	8003630 <MX_TIM17_Init>
  MX_TIM14_Init();
 8002f36:	f000 faa9 	bl	800348c <MX_TIM14_Init>
  MX_I2C1_Init();
 8002f3a:	f000 f96f 	bl	800321c <MX_I2C1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002f3e:	f000 f8dd 	bl	80030fc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

//------------------------------------------------ADC

  HAL_ADCEx_Calibration_Start(&hadc);
 8002f42:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <main+0xf0>)
 8002f44:	0018      	movs	r0, r3
 8002f46:	f001 fe41 	bl	8004bcc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t*)adc_buffer, 4);
 8002f4a:	492c      	ldr	r1, [pc, #176]	; (8002ffc <main+0xf4>)
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <main+0xf0>)
 8002f4e:	2204      	movs	r2, #4
 8002f50:	0018      	movs	r0, r3
 8002f52:	f001 fb8b 	bl	800466c <HAL_ADC_Start_DMA>
//  __HAL_DMA_DISABLE_IT(&hdma_adc, DMA_IT_TC | DMA_IT_HT);

//------------------------------------------------UART

  setup_uart();
 8002f56:	f001 f8fb 	bl	8004150 <setup_uart>

//-------------------------------------------------motor init

  motor_init(&dc_motor_1, &htim14, TIM_CHANNEL_1, GPIOB, GPIO_PIN_7, GPIOB, GPIO_PIN_6, 1, 2.79);		//timer, direction, sleep, reverse 1 = normal -1 = reverse
 8002f5a:	4a29      	ldr	r2, [pc, #164]	; (8003000 <main+0xf8>)
 8002f5c:	4929      	ldr	r1, [pc, #164]	; (8003004 <main+0xfc>)
 8002f5e:	482a      	ldr	r0, [pc, #168]	; (8003008 <main+0x100>)
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <main+0x104>)
 8002f62:	9304      	str	r3, [sp, #16]
 8002f64:	2301      	movs	r3, #1
 8002f66:	9303      	str	r3, [sp, #12]
 8002f68:	2340      	movs	r3, #64	; 0x40
 8002f6a:	9302      	str	r3, [sp, #8]
 8002f6c:	4b24      	ldr	r3, [pc, #144]	; (8003000 <main+0xf8>)
 8002f6e:	9301      	str	r3, [sp, #4]
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	0013      	movs	r3, r2
 8002f76:	2200      	movs	r2, #0
 8002f78:	f7ff fb5a 	bl	8002630 <motor_init>
  motor_mode(&dc_motor_1, 1);
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <main+0x100>)
 8002f7e:	2101      	movs	r1, #1
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7ff fc2b 	bl	80027dc <motor_mode>
  spin_motor(&dc_motor_1,0);
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <main+0x100>)
 8002f88:	2100      	movs	r1, #0
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7ff fb8f 	bl	80026ae <spin_motor>

//-------------------------------------------------leds

  leds_init(&led_indicator, &htim16, TIM_CHANNEL_1); //only 1 led logic in sequence
 8002f90:	491f      	ldr	r1, [pc, #124]	; (8003010 <main+0x108>)
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <main+0x10c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff fa68 	bl	800246c <leds_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(IsDataAvailable())
 8002f9c:	f001 f8fa 	bl	8004194 <IsDataAvailable>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d01c      	beq.n	8002fde <main+0xd6>
	  {
		  char rxBuf[255] = {0};
 8002fa4:	4b1c      	ldr	r3, [pc, #112]	; (8003018 <main+0x110>)
 8002fa6:	2284      	movs	r2, #132	; 0x84
 8002fa8:	0052      	lsls	r2, r2, #1
 8002faa:	189b      	adds	r3, r3, r2
 8002fac:	19db      	adds	r3, r3, r7
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	22fb      	movs	r2, #251	; 0xfb
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f006 f944 	bl	8009246 <memset>
	 	  int len = read_serial_all(rxBuf);
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f001 f8ff 	bl	80041c4 <read_serial_all>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	1d7a      	adds	r2, r7, #5
 8002fca:	32ff      	adds	r2, #255	; 0xff
 8002fcc:	6013      	str	r3, [r2, #0]
		  decode_packet(rxBuf, len);
 8002fce:	1d7b      	adds	r3, r7, #5
 8002fd0:	33ff      	adds	r3, #255	; 0xff
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7ff fc1d 	bl	8002818 <decode_packet>
	  }
	  dc_motor_1.max_current_in_move=0;    //reset after sequence
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <main+0x100>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	61da      	str	r2, [r3, #28]
	  preMillis=HAL_GetTick();;
 8002fe4:	f001 f9d4 	bl	8004390 <HAL_GetTick>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	001a      	movs	r2, r3
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <main+0x114>)
 8002fee:	601a      	str	r2, [r3, #0]
	  sequence_start();
 8002ff0:	f7ff fe24 	bl	8002c3c <sequence_start>
	  if(IsDataAvailable())
 8002ff4:	e7d2      	b.n	8002f9c <main+0x94>
 8002ff6:	46c0      	nop			; (mov r8, r8)
 8002ff8:	20000370 	.word	0x20000370
 8002ffc:	200006e4 	.word	0x200006e4
 8003000:	48000400 	.word	0x48000400
 8003004:	200004d0 	.word	0x200004d0
 8003008:	200006b4 	.word	0x200006b4
 800300c:	40328f5c 	.word	0x40328f5c
 8003010:	20000518 	.word	0x20000518
 8003014:	200006ec 	.word	0x200006ec
 8003018:	fffffefc 	.word	0xfffffefc
 800301c:	20000924 	.word	0x20000924

08003020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b099      	sub	sp, #100	; 0x64
 8003024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003026:	242c      	movs	r4, #44	; 0x2c
 8003028:	193b      	adds	r3, r7, r4
 800302a:	0018      	movs	r0, r3
 800302c:	2334      	movs	r3, #52	; 0x34
 800302e:	001a      	movs	r2, r3
 8003030:	2100      	movs	r1, #0
 8003032:	f006 f908 	bl	8009246 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003036:	231c      	movs	r3, #28
 8003038:	18fb      	adds	r3, r7, r3
 800303a:	0018      	movs	r0, r3
 800303c:	2310      	movs	r3, #16
 800303e:	001a      	movs	r2, r3
 8003040:	2100      	movs	r1, #0
 8003042:	f006 f900 	bl	8009246 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003046:	003b      	movs	r3, r7
 8003048:	0018      	movs	r0, r3
 800304a:	231c      	movs	r3, #28
 800304c:	001a      	movs	r2, r3
 800304e:	2100      	movs	r1, #0
 8003050:	f006 f8f9 	bl	8009246 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8003054:	0021      	movs	r1, r4
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2213      	movs	r2, #19
 800305a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800305c:	187b      	adds	r3, r7, r1
 800305e:	2201      	movs	r2, #1
 8003060:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003062:	187b      	adds	r3, r7, r1
 8003064:	2201      	movs	r2, #1
 8003066:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003068:	187b      	adds	r3, r7, r1
 800306a:	2201      	movs	r2, #1
 800306c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800306e:	187b      	adds	r3, r7, r1
 8003070:	2210      	movs	r2, #16
 8003072:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003074:	187b      	adds	r3, r7, r1
 8003076:	2210      	movs	r2, #16
 8003078:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800307a:	187b      	adds	r3, r7, r1
 800307c:	2202      	movs	r2, #2
 800307e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003080:	187b      	adds	r3, r7, r1
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	0252      	lsls	r2, r2, #9
 8003086:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003088:	187b      	adds	r3, r7, r1
 800308a:	2280      	movs	r2, #128	; 0x80
 800308c:	0352      	lsls	r2, r2, #13
 800308e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003090:	187b      	adds	r3, r7, r1
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003096:	187b      	adds	r3, r7, r1
 8003098:	0018      	movs	r0, r3
 800309a:	f002 fc59 	bl	8005950 <HAL_RCC_OscConfig>
 800309e:	1e03      	subs	r3, r0, #0
 80030a0:	d001      	beq.n	80030a6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80030a2:	f000 fbe1 	bl	8003868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030a6:	211c      	movs	r1, #28
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	2207      	movs	r2, #7
 80030ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	2202      	movs	r2, #2
 80030b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2200      	movs	r2, #0
 80030b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2200      	movs	r2, #0
 80030be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	2101      	movs	r1, #1
 80030c4:	0018      	movs	r0, r3
 80030c6:	f002 ffc9 	bl	800605c <HAL_RCC_ClockConfig>
 80030ca:	1e03      	subs	r3, r0, #0
 80030cc:	d001      	beq.n	80030d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80030ce:	f000 fbcb 	bl	8003868 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80030d2:	003b      	movs	r3, r7
 80030d4:	2222      	movs	r2, #34	; 0x22
 80030d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80030d8:	003b      	movs	r3, r7
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80030de:	003b      	movs	r3, r7
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e4:	003b      	movs	r3, r7
 80030e6:	0018      	movs	r0, r3
 80030e8:	f003 f932 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 80030ec:	1e03      	subs	r3, r0, #0
 80030ee:	d001      	beq.n	80030f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80030f0:	f000 fbba 	bl	8003868 <Error_Handler>
  }
}
 80030f4:	46c0      	nop			; (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b019      	add	sp, #100	; 0x64
 80030fa:	bd90      	pop	{r4, r7, pc}

080030fc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003100:	2200      	movs	r2, #0
 8003102:	2100      	movs	r1, #0
 8003104:	201c      	movs	r0, #28
 8003106:	f001 fec7 	bl	8004e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800310a:	201c      	movs	r0, #28
 800310c:	f001 fed9 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	0018      	movs	r0, r3
 8003122:	230c      	movs	r3, #12
 8003124:	001a      	movs	r2, r3
 8003126:	2100      	movs	r1, #0
 8003128:	f006 f88d 	bl	8009246 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800312c:	4b39      	ldr	r3, [pc, #228]	; (8003214 <MX_ADC_Init+0xfc>)
 800312e:	4a3a      	ldr	r2, [pc, #232]	; (8003218 <MX_ADC_Init+0x100>)
 8003130:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003132:	4b38      	ldr	r3, [pc, #224]	; (8003214 <MX_ADC_Init+0xfc>)
 8003134:	2200      	movs	r2, #0
 8003136:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 8003138:	4b36      	ldr	r3, [pc, #216]	; (8003214 <MX_ADC_Init+0xfc>)
 800313a:	2208      	movs	r2, #8
 800313c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800313e:	4b35      	ldr	r3, [pc, #212]	; (8003214 <MX_ADC_Init+0xfc>)
 8003140:	2200      	movs	r2, #0
 8003142:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003144:	4b33      	ldr	r3, [pc, #204]	; (8003214 <MX_ADC_Init+0xfc>)
 8003146:	2201      	movs	r2, #1
 8003148:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800314a:	4b32      	ldr	r3, [pc, #200]	; (8003214 <MX_ADC_Init+0xfc>)
 800314c:	2204      	movs	r2, #4
 800314e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003150:	4b30      	ldr	r3, [pc, #192]	; (8003214 <MX_ADC_Init+0xfc>)
 8003152:	2200      	movs	r2, #0
 8003154:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003156:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <MX_ADC_Init+0xfc>)
 8003158:	2200      	movs	r2, #0
 800315a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800315c:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <MX_ADC_Init+0xfc>)
 800315e:	2201      	movs	r2, #1
 8003160:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003162:	4b2c      	ldr	r3, [pc, #176]	; (8003214 <MX_ADC_Init+0xfc>)
 8003164:	2200      	movs	r2, #0
 8003166:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003168:	4b2a      	ldr	r3, [pc, #168]	; (8003214 <MX_ADC_Init+0xfc>)
 800316a:	22c2      	movs	r2, #194	; 0xc2
 800316c:	32ff      	adds	r2, #255	; 0xff
 800316e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003170:	4b28      	ldr	r3, [pc, #160]	; (8003214 <MX_ADC_Init+0xfc>)
 8003172:	2200      	movs	r2, #0
 8003174:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003176:	4b27      	ldr	r3, [pc, #156]	; (8003214 <MX_ADC_Init+0xfc>)
 8003178:	2224      	movs	r2, #36	; 0x24
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800317e:	4b25      	ldr	r3, [pc, #148]	; (8003214 <MX_ADC_Init+0xfc>)
 8003180:	2201      	movs	r2, #1
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003184:	4b23      	ldr	r3, [pc, #140]	; (8003214 <MX_ADC_Init+0xfc>)
 8003186:	0018      	movs	r0, r3
 8003188:	f001 f930 	bl	80043ec <HAL_ADC_Init>
 800318c:	1e03      	subs	r3, r0, #0
 800318e:	d001      	beq.n	8003194 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003190:	f000 fb6a 	bl	8003868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	2203      	movs	r2, #3
 8003198:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800319a:	1d3b      	adds	r3, r7, #4
 800319c:	2280      	movs	r2, #128	; 0x80
 800319e:	0152      	lsls	r2, r2, #5
 80031a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80031a2:	1d3b      	adds	r3, r7, #4
 80031a4:	2206      	movs	r2, #6
 80031a6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80031a8:	1d3a      	adds	r2, r7, #4
 80031aa:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <MX_ADC_Init+0xfc>)
 80031ac:	0011      	movs	r1, r2
 80031ae:	0018      	movs	r0, r3
 80031b0:	f001 faf6 	bl	80047a0 <HAL_ADC_ConfigChannel>
 80031b4:	1e03      	subs	r3, r0, #0
 80031b6:	d001      	beq.n	80031bc <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80031b8:	f000 fb56 	bl	8003868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80031bc:	1d3b      	adds	r3, r7, #4
 80031be:	2204      	movs	r2, #4
 80031c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80031c2:	1d3a      	adds	r2, r7, #4
 80031c4:	4b13      	ldr	r3, [pc, #76]	; (8003214 <MX_ADC_Init+0xfc>)
 80031c6:	0011      	movs	r1, r2
 80031c8:	0018      	movs	r0, r3
 80031ca:	f001 fae9 	bl	80047a0 <HAL_ADC_ConfigChannel>
 80031ce:	1e03      	subs	r3, r0, #0
 80031d0:	d001      	beq.n	80031d6 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80031d2:	f000 fb49 	bl	8003868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80031d6:	1d3b      	adds	r3, r7, #4
 80031d8:	2205      	movs	r2, #5
 80031da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80031dc:	1d3a      	adds	r2, r7, #4
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <MX_ADC_Init+0xfc>)
 80031e0:	0011      	movs	r1, r2
 80031e2:	0018      	movs	r0, r3
 80031e4:	f001 fadc 	bl	80047a0 <HAL_ADC_ConfigChannel>
 80031e8:	1e03      	subs	r3, r0, #0
 80031ea:	d001      	beq.n	80031f0 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80031ec:	f000 fb3c 	bl	8003868 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	2207      	movs	r2, #7
 80031f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80031f6:	1d3a      	adds	r2, r7, #4
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <MX_ADC_Init+0xfc>)
 80031fa:	0011      	movs	r1, r2
 80031fc:	0018      	movs	r0, r3
 80031fe:	f001 facf 	bl	80047a0 <HAL_ADC_ConfigChannel>
 8003202:	1e03      	subs	r3, r0, #0
 8003204:	d001      	beq.n	800320a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8003206:	f000 fb2f 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b004      	add	sp, #16
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	20000370 	.word	0x20000370
 8003218:	40012400 	.word	0x40012400

0800321c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003220:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <MX_I2C1_Init+0x74>)
 8003222:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <MX_I2C1_Init+0x78>)
 8003224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <MX_I2C1_Init+0x74>)
 8003228:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <MX_I2C1_Init+0x7c>)
 800322a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800322c:	4b18      	ldr	r3, [pc, #96]	; (8003290 <MX_I2C1_Init+0x74>)
 800322e:	2200      	movs	r2, #0
 8003230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003232:	4b17      	ldr	r3, [pc, #92]	; (8003290 <MX_I2C1_Init+0x74>)
 8003234:	2201      	movs	r2, #1
 8003236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <MX_I2C1_Init+0x74>)
 800323a:	2200      	movs	r2, #0
 800323c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800323e:	4b14      	ldr	r3, [pc, #80]	; (8003290 <MX_I2C1_Init+0x74>)
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <MX_I2C1_Init+0x74>)
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <MX_I2C1_Init+0x74>)
 800324c:	2200      	movs	r2, #0
 800324e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <MX_I2C1_Init+0x74>)
 8003252:	2200      	movs	r2, #0
 8003254:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <MX_I2C1_Init+0x74>)
 8003258:	0018      	movs	r0, r3
 800325a:	f002 fa4b 	bl	80056f4 <HAL_I2C_Init>
 800325e:	1e03      	subs	r3, r0, #0
 8003260:	d001      	beq.n	8003266 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003262:	f000 fb01 	bl	8003868 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <MX_I2C1_Init+0x74>)
 8003268:	2100      	movs	r1, #0
 800326a:	0018      	movs	r0, r3
 800326c:	f002 fad8 	bl	8005820 <HAL_I2CEx_ConfigAnalogFilter>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d001      	beq.n	8003278 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003274:	f000 faf8 	bl	8003868 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <MX_I2C1_Init+0x74>)
 800327a:	2100      	movs	r1, #0
 800327c:	0018      	movs	r0, r3
 800327e:	f002 fb1b 	bl	80058b8 <HAL_I2CEx_ConfigDigitalFilter>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d001      	beq.n	800328a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003286:	f000 faef 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	200003f4 	.word	0x200003f4
 8003294:	40005400 	.word	0x40005400
 8003298:	2000090e 	.word	0x2000090e

0800329c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800329c:	b590      	push	{r4, r7, lr}
 800329e:	b08d      	sub	sp, #52	; 0x34
 80032a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032a2:	240c      	movs	r4, #12
 80032a4:	193b      	adds	r3, r7, r4
 80032a6:	0018      	movs	r0, r3
 80032a8:	2324      	movs	r3, #36	; 0x24
 80032aa:	001a      	movs	r2, r3
 80032ac:	2100      	movs	r1, #0
 80032ae:	f005 ffca 	bl	8009246 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b2:	1d3b      	adds	r3, r7, #4
 80032b4:	0018      	movs	r0, r3
 80032b6:	2308      	movs	r3, #8
 80032b8:	001a      	movs	r2, r3
 80032ba:	2100      	movs	r1, #0
 80032bc:	f005 ffc3 	bl	8009246 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80032c0:	4b26      	ldr	r3, [pc, #152]	; (800335c <MX_TIM2_Init+0xc0>)
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	05d2      	lsls	r2, r2, #23
 80032c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032c8:	4b24      	ldr	r3, [pc, #144]	; (800335c <MX_TIM2_Init+0xc0>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032ce:	4b23      	ldr	r3, [pc, #140]	; (800335c <MX_TIM2_Init+0xc0>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80032d4:	4b21      	ldr	r3, [pc, #132]	; (800335c <MX_TIM2_Init+0xc0>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	4252      	negs	r2, r2
 80032da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032dc:	4b1f      	ldr	r3, [pc, #124]	; (800335c <MX_TIM2_Init+0xc0>)
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032e2:	4b1e      	ldr	r3, [pc, #120]	; (800335c <MX_TIM2_Init+0xc0>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80032e8:	0021      	movs	r1, r4
 80032ea:	187b      	adds	r3, r7, r1
 80032ec:	2203      	movs	r2, #3
 80032ee:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	2200      	movs	r2, #0
 80032f4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032f6:	187b      	adds	r3, r7, r1
 80032f8:	2201      	movs	r2, #1
 80032fa:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	2200      	movs	r2, #0
 8003300:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003308:	187b      	adds	r3, r7, r1
 800330a:	2200      	movs	r2, #0
 800330c:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800330e:	187b      	adds	r3, r7, r1
 8003310:	2201      	movs	r2, #1
 8003312:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003314:	187b      	adds	r3, r7, r1
 8003316:	2200      	movs	r2, #0
 8003318:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800331a:	187b      	adds	r3, r7, r1
 800331c:	2200      	movs	r2, #0
 800331e:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003320:	187a      	adds	r2, r7, r1
 8003322:	4b0e      	ldr	r3, [pc, #56]	; (800335c <MX_TIM2_Init+0xc0>)
 8003324:	0011      	movs	r1, r2
 8003326:	0018      	movs	r0, r3
 8003328:	f003 fc26 	bl	8006b78 <HAL_TIM_Encoder_Init>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003330:	f000 fa9a 	bl	8003868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333a:	1d3b      	adds	r3, r7, #4
 800333c:	2200      	movs	r2, #0
 800333e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003340:	1d3a      	adds	r2, r7, #4
 8003342:	4b06      	ldr	r3, [pc, #24]	; (800335c <MX_TIM2_Init+0xc0>)
 8003344:	0011      	movs	r1, r2
 8003346:	0018      	movs	r0, r3
 8003348:	f004 fbb4 	bl	8007ab4 <HAL_TIMEx_MasterConfigSynchronization>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d001      	beq.n	8003354 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8003350:	f000 fa8a 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003354:	46c0      	nop			; (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b00d      	add	sp, #52	; 0x34
 800335a:	bd90      	pop	{r4, r7, pc}
 800335c:	20000440 	.word	0x20000440

08003360 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	; 0x38
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003366:	2328      	movs	r3, #40	; 0x28
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	0018      	movs	r0, r3
 800336c:	2310      	movs	r3, #16
 800336e:	001a      	movs	r2, r3
 8003370:	2100      	movs	r1, #0
 8003372:	f005 ff68 	bl	8009246 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003376:	2320      	movs	r3, #32
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	0018      	movs	r0, r3
 800337c:	2308      	movs	r3, #8
 800337e:	001a      	movs	r2, r3
 8003380:	2100      	movs	r1, #0
 8003382:	f005 ff60 	bl	8009246 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	0018      	movs	r0, r3
 800338a:	231c      	movs	r3, #28
 800338c:	001a      	movs	r2, r3
 800338e:	2100      	movs	r1, #0
 8003390:	f005 ff59 	bl	8009246 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003394:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <MX_TIM3_Init+0x120>)
 8003396:	4a3b      	ldr	r2, [pc, #236]	; (8003484 <MX_TIM3_Init+0x124>)
 8003398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479;
 800339a:	4b39      	ldr	r3, [pc, #228]	; (8003480 <MX_TIM3_Init+0x120>)
 800339c:	22e0      	movs	r2, #224	; 0xe0
 800339e:	32ff      	adds	r2, #255	; 0xff
 80033a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a2:	4b37      	ldr	r3, [pc, #220]	; (8003480 <MX_TIM3_Init+0x120>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 80033a8:	4b35      	ldr	r3, [pc, #212]	; (8003480 <MX_TIM3_Init+0x120>)
 80033aa:	4a37      	ldr	r2, [pc, #220]	; (8003488 <MX_TIM3_Init+0x128>)
 80033ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ae:	4b34      	ldr	r3, [pc, #208]	; (8003480 <MX_TIM3_Init+0x120>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033b4:	4b32      	ldr	r3, [pc, #200]	; (8003480 <MX_TIM3_Init+0x120>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80033ba:	4b31      	ldr	r3, [pc, #196]	; (8003480 <MX_TIM3_Init+0x120>)
 80033bc:	0018      	movs	r0, r3
 80033be:	f003 f8c5 	bl	800654c <HAL_TIM_Base_Init>
 80033c2:	1e03      	subs	r3, r0, #0
 80033c4:	d001      	beq.n	80033ca <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80033c6:	f000 fa4f 	bl	8003868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ca:	2128      	movs	r1, #40	; 0x28
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	2280      	movs	r2, #128	; 0x80
 80033d0:	0152      	lsls	r2, r2, #5
 80033d2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80033d4:	187a      	adds	r2, r7, r1
 80033d6:	4b2a      	ldr	r3, [pc, #168]	; (8003480 <MX_TIM3_Init+0x120>)
 80033d8:	0011      	movs	r1, r2
 80033da:	0018      	movs	r0, r3
 80033dc:	f003 fe50 	bl	8007080 <HAL_TIM_ConfigClockSource>
 80033e0:	1e03      	subs	r3, r0, #0
 80033e2:	d001      	beq.n	80033e8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80033e4:	f000 fa40 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <MX_TIM3_Init+0x120>)
 80033ea:	0018      	movs	r0, r3
 80033ec:	f003 f8fe 	bl	80065ec <HAL_TIM_PWM_Init>
 80033f0:	1e03      	subs	r3, r0, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80033f4:	f000 fa38 	bl	8003868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f8:	2120      	movs	r1, #32
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003400:	187b      	adds	r3, r7, r1
 8003402:	2200      	movs	r2, #0
 8003404:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003406:	187a      	adds	r2, r7, r1
 8003408:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <MX_TIM3_Init+0x120>)
 800340a:	0011      	movs	r1, r2
 800340c:	0018      	movs	r0, r3
 800340e:	f004 fb51 	bl	8007ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8003412:	1e03      	subs	r3, r0, #0
 8003414:	d001      	beq.n	800341a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8003416:	f000 fa27 	bl	8003868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	2260      	movs	r2, #96	; 0x60
 800341e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	2232      	movs	r2, #50	; 0x32
 8003424:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003426:	1d3b      	adds	r3, r7, #4
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	2200      	movs	r2, #0
 8003430:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003432:	1d39      	adds	r1, r7, #4
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <MX_TIM3_Init+0x120>)
 8003436:	2200      	movs	r2, #0
 8003438:	0018      	movs	r0, r3
 800343a:	f003 fd5b 	bl	8006ef4 <HAL_TIM_PWM_ConfigChannel>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8003442:	f000 fa11 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003446:	1d39      	adds	r1, r7, #4
 8003448:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <MX_TIM3_Init+0x120>)
 800344a:	2204      	movs	r2, #4
 800344c:	0018      	movs	r0, r3
 800344e:	f003 fd51 	bl	8006ef4 <HAL_TIM_PWM_ConfigChannel>
 8003452:	1e03      	subs	r3, r0, #0
 8003454:	d001      	beq.n	800345a <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8003456:	f000 fa07 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800345a:	1d39      	adds	r1, r7, #4
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <MX_TIM3_Init+0x120>)
 800345e:	2208      	movs	r2, #8
 8003460:	0018      	movs	r0, r3
 8003462:	f003 fd47 	bl	8006ef4 <HAL_TIM_PWM_ConfigChannel>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 800346a:	f000 f9fd 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800346e:	4b04      	ldr	r3, [pc, #16]	; (8003480 <MX_TIM3_Init+0x120>)
 8003470:	0018      	movs	r0, r3
 8003472:	f000 fbc7 	bl	8003c04 <HAL_TIM_MspPostInit>

}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	b00e      	add	sp, #56	; 0x38
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	20000488 	.word	0x20000488
 8003484:	40000400 	.word	0x40000400
 8003488:	000007cf 	.word	0x000007cf

0800348c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	0018      	movs	r0, r3
 8003496:	231c      	movs	r3, #28
 8003498:	001a      	movs	r2, r3
 800349a:	2100      	movs	r1, #0
 800349c:	f005 fed3 	bl	8009246 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80034a0:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <MX_TIM14_Init+0x94>)
 80034a2:	4a20      	ldr	r2, [pc, #128]	; (8003524 <MX_TIM14_Init+0x98>)
 80034a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2;
 80034a6:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <MX_TIM14_Init+0x94>)
 80034a8:	2202      	movs	r2, #2
 80034aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ac:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <MX_TIM14_Init+0x94>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 255;
 80034b2:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <MX_TIM14_Init+0x94>)
 80034b4:	22ff      	movs	r2, #255	; 0xff
 80034b6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <MX_TIM14_Init+0x94>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <MX_TIM14_Init+0x94>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80034c4:	4b16      	ldr	r3, [pc, #88]	; (8003520 <MX_TIM14_Init+0x94>)
 80034c6:	0018      	movs	r0, r3
 80034c8:	f003 f840 	bl	800654c <HAL_TIM_Base_Init>
 80034cc:	1e03      	subs	r3, r0, #0
 80034ce:	d001      	beq.n	80034d4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80034d0:	f000 f9ca 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <MX_TIM14_Init+0x94>)
 80034d6:	0018      	movs	r0, r3
 80034d8:	f003 f888 	bl	80065ec <HAL_TIM_PWM_Init>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d001      	beq.n	80034e4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80034e0:	f000 f9c2 	bl	8003868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	2260      	movs	r2, #96	; 0x60
 80034e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80034ea:	1d3b      	adds	r3, r7, #4
 80034ec:	2200      	movs	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034f0:	1d3b      	adds	r3, r7, #4
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	2200      	movs	r2, #0
 80034fa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034fc:	1d39      	adds	r1, r7, #4
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <MX_TIM14_Init+0x94>)
 8003500:	2200      	movs	r2, #0
 8003502:	0018      	movs	r0, r3
 8003504:	f003 fcf6 	bl	8006ef4 <HAL_TIM_PWM_ConfigChannel>
 8003508:	1e03      	subs	r3, r0, #0
 800350a:	d001      	beq.n	8003510 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800350c:	f000 f9ac 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <MX_TIM14_Init+0x94>)
 8003512:	0018      	movs	r0, r3
 8003514:	f000 fb76 	bl	8003c04 <HAL_TIM_MspPostInit>

}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b008      	add	sp, #32
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200004d0 	.word	0x200004d0
 8003524:	40002000 	.word	0x40002000

08003528 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b090      	sub	sp, #64	; 0x40
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800352e:	2324      	movs	r3, #36	; 0x24
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	0018      	movs	r0, r3
 8003534:	231c      	movs	r3, #28
 8003536:	001a      	movs	r2, r3
 8003538:	2100      	movs	r1, #0
 800353a:	f005 fe84 	bl	8009246 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800353e:	1d3b      	adds	r3, r7, #4
 8003540:	0018      	movs	r0, r3
 8003542:	2320      	movs	r3, #32
 8003544:	001a      	movs	r2, r3
 8003546:	2100      	movs	r1, #0
 8003548:	f005 fe7d 	bl	8009246 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800354c:	4b36      	ldr	r3, [pc, #216]	; (8003628 <MX_TIM16_Init+0x100>)
 800354e:	4a37      	ldr	r2, [pc, #220]	; (800362c <MX_TIM16_Init+0x104>)
 8003550:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8003552:	4b35      	ldr	r3, [pc, #212]	; (8003628 <MX_TIM16_Init+0x100>)
 8003554:	2200      	movs	r2, #0
 8003556:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003558:	4b33      	ldr	r3, [pc, #204]	; (8003628 <MX_TIM16_Init+0x100>)
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 59;
 800355e:	4b32      	ldr	r3, [pc, #200]	; (8003628 <MX_TIM16_Init+0x100>)
 8003560:	223b      	movs	r2, #59	; 0x3b
 8003562:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003564:	4b30      	ldr	r3, [pc, #192]	; (8003628 <MX_TIM16_Init+0x100>)
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800356a:	4b2f      	ldr	r3, [pc, #188]	; (8003628 <MX_TIM16_Init+0x100>)
 800356c:	2200      	movs	r2, #0
 800356e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003570:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <MX_TIM16_Init+0x100>)
 8003572:	2200      	movs	r2, #0
 8003574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003576:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <MX_TIM16_Init+0x100>)
 8003578:	0018      	movs	r0, r3
 800357a:	f002 ffe7 	bl	800654c <HAL_TIM_Base_Init>
 800357e:	1e03      	subs	r3, r0, #0
 8003580:	d001      	beq.n	8003586 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003582:	f000 f971 	bl	8003868 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003586:	4b28      	ldr	r3, [pc, #160]	; (8003628 <MX_TIM16_Init+0x100>)
 8003588:	0018      	movs	r0, r3
 800358a:	f003 f82f 	bl	80065ec <HAL_TIM_PWM_Init>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d001      	beq.n	8003596 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003592:	f000 f969 	bl	8003868 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003596:	2124      	movs	r1, #36	; 0x24
 8003598:	187b      	adds	r3, r7, r1
 800359a:	2260      	movs	r2, #96	; 0x60
 800359c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 15;
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	220f      	movs	r2, #15
 80035a2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	2200      	movs	r2, #0
 80035ae:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035b0:	187b      	adds	r3, r7, r1
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	2200      	movs	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	2200      	movs	r2, #0
 80035c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035c2:	1879      	adds	r1, r7, r1
 80035c4:	4b18      	ldr	r3, [pc, #96]	; (8003628 <MX_TIM16_Init+0x100>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	0018      	movs	r0, r3
 80035ca:	f003 fc93 	bl	8006ef4 <HAL_TIM_PWM_ConfigChannel>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80035d2:	f000 f949 	bl	8003868 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	2200      	movs	r2, #0
 80035e0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035ee:	1d3b      	adds	r3, r7, #4
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035f4:	1d3b      	adds	r3, r7, #4
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	0192      	lsls	r2, r2, #6
 80035fa:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	2200      	movs	r2, #0
 8003600:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003602:	1d3a      	adds	r2, r7, #4
 8003604:	4b08      	ldr	r3, [pc, #32]	; (8003628 <MX_TIM16_Init+0x100>)
 8003606:	0011      	movs	r1, r2
 8003608:	0018      	movs	r0, r3
 800360a:	f004 fab1 	bl	8007b70 <HAL_TIMEx_ConfigBreakDeadTime>
 800360e:	1e03      	subs	r3, r0, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8003612:	f000 f929 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003616:	4b04      	ldr	r3, [pc, #16]	; (8003628 <MX_TIM16_Init+0x100>)
 8003618:	0018      	movs	r0, r3
 800361a:	f000 faf3 	bl	8003c04 <HAL_TIM_MspPostInit>

}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b010      	add	sp, #64	; 0x40
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	20000518 	.word	0x20000518
 800362c:	40014400 	.word	0x40014400

08003630 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003634:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <MX_TIM17_Init+0x44>)
 8003636:	4a10      	ldr	r2, [pc, #64]	; (8003678 <MX_TIM17_Init+0x48>)
 8003638:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4799;
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <MX_TIM17_Init+0x44>)
 800363c:	4a0f      	ldr	r2, [pc, #60]	; (800367c <MX_TIM17_Init+0x4c>)
 800363e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003640:	4b0c      	ldr	r3, [pc, #48]	; (8003674 <MX_TIM17_Init+0x44>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 99;
 8003646:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <MX_TIM17_Init+0x44>)
 8003648:	2263      	movs	r2, #99	; 0x63
 800364a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800364c:	4b09      	ldr	r3, [pc, #36]	; (8003674 <MX_TIM17_Init+0x44>)
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003652:	4b08      	ldr	r3, [pc, #32]	; (8003674 <MX_TIM17_Init+0x44>)
 8003654:	2200      	movs	r2, #0
 8003656:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <MX_TIM17_Init+0x44>)
 800365a:	2200      	movs	r2, #0
 800365c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <MX_TIM17_Init+0x44>)
 8003660:	0018      	movs	r0, r3
 8003662:	f002 ff73 	bl	800654c <HAL_TIM_Base_Init>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800366a:	f000 f8fd 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	20000560 	.word	0x20000560
 8003678:	40014800 	.word	0x40014800
 800367c:	000012bf 	.word	0x000012bf

08003680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 8003686:	4a15      	ldr	r2, [pc, #84]	; (80036dc <MX_USART2_UART_Init+0x5c>)
 8003688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 800368c:	22e1      	movs	r2, #225	; 0xe1
 800368e:	0252      	lsls	r2, r2, #9
 8003690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 800369a:	2200      	movs	r2, #0
 800369c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 80036a6:	220c      	movs	r2, #12
 80036a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 80036be:	2200      	movs	r2, #0
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <MX_USART2_UART_Init+0x58>)
 80036c4:	0018      	movs	r0, r3
 80036c6:	f004 fac1 	bl	8007c4c <HAL_UART_Init>
 80036ca:	1e03      	subs	r3, r0, #0
 80036cc:	d001      	beq.n	80036d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80036ce:	f000 f8cb 	bl	8003868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	200005ec 	.word	0x200005ec
 80036dc:	40004400 	.word	0x40004400

080036e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <MX_DMA_Init+0x58>)
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <MX_DMA_Init+0x58>)
 80036ec:	2101      	movs	r1, #1
 80036ee:	430a      	orrs	r2, r1
 80036f0:	615a      	str	r2, [r3, #20]
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <MX_DMA_Init+0x58>)
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2201      	movs	r2, #1
 80036f8:	4013      	ands	r3, r2
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	2009      	movs	r0, #9
 8003704:	f001 fbc8 	bl	8004e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003708:	2009      	movs	r0, #9
 800370a:	f001 fbda 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2100      	movs	r1, #0
 8003712:	200a      	movs	r0, #10
 8003714:	f001 fbc0 	bl	8004e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003718:	200a      	movs	r0, #10
 800371a:	f001 fbd2 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800371e:	2200      	movs	r2, #0
 8003720:	2100      	movs	r1, #0
 8003722:	200b      	movs	r0, #11
 8003724:	f001 fbb8 	bl	8004e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003728:	200b      	movs	r0, #11
 800372a:	f001 fbca 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	40021000 	.word	0x40021000

0800373c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b089      	sub	sp, #36	; 0x24
 8003740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003742:	240c      	movs	r4, #12
 8003744:	193b      	adds	r3, r7, r4
 8003746:	0018      	movs	r0, r3
 8003748:	2314      	movs	r3, #20
 800374a:	001a      	movs	r2, r3
 800374c:	2100      	movs	r1, #0
 800374e:	f005 fd7a 	bl	8009246 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003752:	4b42      	ldr	r3, [pc, #264]	; (800385c <MX_GPIO_Init+0x120>)
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	4b41      	ldr	r3, [pc, #260]	; (800385c <MX_GPIO_Init+0x120>)
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	03c9      	lsls	r1, r1, #15
 800375c:	430a      	orrs	r2, r1
 800375e:	615a      	str	r2, [r3, #20]
 8003760:	4b3e      	ldr	r3, [pc, #248]	; (800385c <MX_GPIO_Init+0x120>)
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	03db      	lsls	r3, r3, #15
 8003768:	4013      	ands	r3, r2
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <MX_GPIO_Init+0x120>)
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	4b3a      	ldr	r3, [pc, #232]	; (800385c <MX_GPIO_Init+0x120>)
 8003774:	2180      	movs	r1, #128	; 0x80
 8003776:	0289      	lsls	r1, r1, #10
 8003778:	430a      	orrs	r2, r1
 800377a:	615a      	str	r2, [r3, #20]
 800377c:	4b37      	ldr	r3, [pc, #220]	; (800385c <MX_GPIO_Init+0x120>)
 800377e:	695a      	ldr	r2, [r3, #20]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	029b      	lsls	r3, r3, #10
 8003784:	4013      	ands	r3, r2
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800378a:	4b34      	ldr	r3, [pc, #208]	; (800385c <MX_GPIO_Init+0x120>)
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	4b33      	ldr	r3, [pc, #204]	; (800385c <MX_GPIO_Init+0x120>)
 8003790:	2180      	movs	r1, #128	; 0x80
 8003792:	02c9      	lsls	r1, r1, #11
 8003794:	430a      	orrs	r2, r1
 8003796:	615a      	str	r2, [r3, #20]
 8003798:	4b30      	ldr	r3, [pc, #192]	; (800385c <MX_GPIO_Init+0x120>)
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	02db      	lsls	r3, r3, #11
 80037a0:	4013      	ands	r3, r2
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, servo_en1_Pin|servo_en2_Pin|servo_en3_Pin|dcmotor_mode_Pin
 80037a6:	492e      	ldr	r1, [pc, #184]	; (8003860 <MX_GPIO_Init+0x124>)
 80037a8:	4b2e      	ldr	r3, [pc, #184]	; (8003864 <MX_GPIO_Init+0x128>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	0018      	movs	r0, r3
 80037ae:	f001 ff5e 	bl	800566e <HAL_GPIO_WritePin>
                          |user_led_Pin|dcmotor_sleep_n_Pin|dcmotor_in2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : servo_en1_Pin servo_en2_Pin servo_en3_Pin dcmotor_mode_Pin
                           user_led_Pin dcmotor_sleep_n_Pin dcmotor_in2_Pin */
  GPIO_InitStruct.Pin = servo_en1_Pin|servo_en2_Pin|servo_en3_Pin|dcmotor_mode_Pin
 80037b2:	193b      	adds	r3, r7, r4
 80037b4:	4a2a      	ldr	r2, [pc, #168]	; (8003860 <MX_GPIO_Init+0x124>)
 80037b6:	601a      	str	r2, [r3, #0]
                          |user_led_Pin|dcmotor_sleep_n_Pin|dcmotor_in2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b8:	193b      	adds	r3, r7, r4
 80037ba:	2201      	movs	r2, #1
 80037bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	193b      	adds	r3, r7, r4
 80037c0:	2200      	movs	r2, #0
 80037c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	2200      	movs	r2, #0
 80037c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ca:	193b      	adds	r3, r7, r4
 80037cc:	4a25      	ldr	r2, [pc, #148]	; (8003864 <MX_GPIO_Init+0x128>)
 80037ce:	0019      	movs	r1, r3
 80037d0:	0010      	movs	r0, r2
 80037d2:	f001 fdb7 	bl	8005344 <HAL_GPIO_Init>

  /*Configure GPIO pin : dcmotor_flt_n_Pin */
  GPIO_InitStruct.Pin = dcmotor_flt_n_Pin;
 80037d6:	0021      	movs	r1, r4
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	2280      	movs	r2, #128	; 0x80
 80037dc:	0212      	lsls	r2, r2, #8
 80037de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037e0:	000c      	movs	r4, r1
 80037e2:	193b      	adds	r3, r7, r4
 80037e4:	2200      	movs	r2, #0
 80037e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	193b      	adds	r3, r7, r4
 80037ea:	2200      	movs	r2, #0
 80037ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(dcmotor_flt_n_GPIO_Port, &GPIO_InitStruct);
 80037ee:	193b      	adds	r3, r7, r4
 80037f0:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <MX_GPIO_Init+0x128>)
 80037f2:	0019      	movs	r1, r3
 80037f4:	0010      	movs	r0, r2
 80037f6:	f001 fda5 	bl	8005344 <HAL_GPIO_Init>

  /*Configure GPIO pins : microswitch0_Pin microswitch1_Pin */
  GPIO_InitStruct.Pin = microswitch0_Pin|microswitch1_Pin;
 80037fa:	193b      	adds	r3, r7, r4
 80037fc:	22c0      	movs	r2, #192	; 0xc0
 80037fe:	0092      	lsls	r2, r2, #2
 8003800:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2200      	movs	r2, #0
 8003806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	193b      	adds	r3, r7, r4
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380e:	193a      	adds	r2, r7, r4
 8003810:	2390      	movs	r3, #144	; 0x90
 8003812:	05db      	lsls	r3, r3, #23
 8003814:	0011      	movs	r1, r2
 8003816:	0018      	movs	r0, r3
 8003818:	f001 fd94 	bl	8005344 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800381c:	0021      	movs	r1, r4
 800381e:	187b      	adds	r3, r7, r1
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	00d2      	lsls	r2, r2, #3
 8003824:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003826:	187b      	adds	r3, r7, r1
 8003828:	2288      	movs	r2, #136	; 0x88
 800382a:	0352      	lsls	r2, r2, #13
 800382c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	187b      	adds	r3, r7, r1
 8003830:	2200      	movs	r2, #0
 8003832:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003834:	187a      	adds	r2, r7, r1
 8003836:	2390      	movs	r3, #144	; 0x90
 8003838:	05db      	lsls	r3, r3, #23
 800383a:	0011      	movs	r1, r2
 800383c:	0018      	movs	r0, r3
 800383e:	f001 fd81 	bl	8005344 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003842:	2200      	movs	r2, #0
 8003844:	2100      	movs	r1, #0
 8003846:	2007      	movs	r0, #7
 8003848:	f001 fb26 	bl	8004e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800384c:	2007      	movs	r0, #7
 800384e:	f001 fb38 	bl	8004ec2 <HAL_NVIC_EnableIRQ>

}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b009      	add	sp, #36	; 0x24
 8003858:	bd90      	pop	{r4, r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	40021000 	.word	0x40021000
 8003860:	000078c8 	.word	0x000078c8
 8003864:	48000400 	.word	0x48000400

08003868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800386c:	b672      	cpsid	i
}
 800386e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003870:	e7fe      	b.n	8003870 <Error_Handler+0x8>
	...

08003874 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <HAL_MspInit+0x44>)
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <HAL_MspInit+0x44>)
 8003880:	2101      	movs	r1, #1
 8003882:	430a      	orrs	r2, r1
 8003884:	619a      	str	r2, [r3, #24]
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <HAL_MspInit+0x44>)
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2201      	movs	r2, #1
 800388c:	4013      	ands	r3, r2
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <HAL_MspInit+0x44>)
 8003894:	69da      	ldr	r2, [r3, #28]
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <HAL_MspInit+0x44>)
 8003898:	2180      	movs	r1, #128	; 0x80
 800389a:	0549      	lsls	r1, r1, #21
 800389c:	430a      	orrs	r2, r1
 800389e:	61da      	str	r2, [r3, #28]
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_MspInit+0x44>)
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	2380      	movs	r3, #128	; 0x80
 80038a6:	055b      	lsls	r3, r3, #21
 80038a8:	4013      	ands	r3, r2
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b002      	add	sp, #8
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	40021000 	.word	0x40021000

080038bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b08b      	sub	sp, #44	; 0x2c
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	2414      	movs	r4, #20
 80038c6:	193b      	adds	r3, r7, r4
 80038c8:	0018      	movs	r0, r3
 80038ca:	2314      	movs	r3, #20
 80038cc:	001a      	movs	r2, r3
 80038ce:	2100      	movs	r1, #0
 80038d0:	f005 fcb9 	bl	8009246 <memset>
  if(hadc->Instance==ADC1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2d      	ldr	r2, [pc, #180]	; (8003990 <HAL_ADC_MspInit+0xd4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d153      	bne.n	8003986 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038de:	4b2d      	ldr	r3, [pc, #180]	; (8003994 <HAL_ADC_MspInit+0xd8>)
 80038e0:	699a      	ldr	r2, [r3, #24]
 80038e2:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <HAL_ADC_MspInit+0xd8>)
 80038e4:	2180      	movs	r1, #128	; 0x80
 80038e6:	0089      	lsls	r1, r1, #2
 80038e8:	430a      	orrs	r2, r1
 80038ea:	619a      	str	r2, [r3, #24]
 80038ec:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_ADC_MspInit+0xd8>)
 80038ee:	699a      	ldr	r2, [r3, #24]
 80038f0:	2380      	movs	r3, #128	; 0x80
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4013      	ands	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <HAL_ADC_MspInit+0xd8>)
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	4b25      	ldr	r3, [pc, #148]	; (8003994 <HAL_ADC_MspInit+0xd8>)
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	0289      	lsls	r1, r1, #10
 8003904:	430a      	orrs	r2, r1
 8003906:	615a      	str	r2, [r3, #20]
 8003908:	4b22      	ldr	r3, [pc, #136]	; (8003994 <HAL_ADC_MspInit+0xd8>)
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	2380      	movs	r3, #128	; 0x80
 800390e:	029b      	lsls	r3, r3, #10
 8003910:	4013      	ands	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = IR_0_Pin|IR_1_Pin|IR_2_Pin|DC_I_PROP_Pin;
 8003916:	193b      	adds	r3, r7, r4
 8003918:	22b8      	movs	r2, #184	; 0xb8
 800391a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800391c:	193b      	adds	r3, r7, r4
 800391e:	2203      	movs	r2, #3
 8003920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	193b      	adds	r3, r7, r4
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003928:	193a      	adds	r2, r7, r4
 800392a:	2390      	movs	r3, #144	; 0x90
 800392c:	05db      	lsls	r3, r3, #23
 800392e:	0011      	movs	r1, r2
 8003930:	0018      	movs	r0, r3
 8003932:	f001 fd07 	bl	8005344 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003936:	4b18      	ldr	r3, [pc, #96]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 8003938:	4a18      	ldr	r2, [pc, #96]	; (800399c <HAL_ADC_MspInit+0xe0>)
 800393a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800393c:	4b16      	ldr	r3, [pc, #88]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 800393e:	2200      	movs	r2, #0
 8003940:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003942:	4b15      	ldr	r3, [pc, #84]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 8003944:	2200      	movs	r2, #0
 8003946:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 800394a:	2280      	movs	r2, #128	; 0x80
 800394c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800394e:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	0052      	lsls	r2, r2, #1
 8003954:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 8003958:	2280      	movs	r2, #128	; 0x80
 800395a:	00d2      	lsls	r2, r2, #3
 800395c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 8003960:	2220      	movs	r2, #32
 8003962:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 8003966:	2200      	movs	r2, #0
 8003968:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 800396c:	0018      	movs	r0, r3
 800396e:	f001 fac9 	bl	8004f04 <HAL_DMA_Init>
 8003972:	1e03      	subs	r3, r0, #0
 8003974:	d001      	beq.n	800397a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8003976:	f7ff ff77 	bl	8003868 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a06      	ldr	r2, [pc, #24]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_ADC_MspInit+0xdc>)
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	b00b      	add	sp, #44	; 0x2c
 800398c:	bd90      	pop	{r4, r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	40012400 	.word	0x40012400
 8003994:	40021000 	.word	0x40021000
 8003998:	200003b0 	.word	0x200003b0
 800399c:	40020008 	.word	0x40020008

080039a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b08b      	sub	sp, #44	; 0x2c
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a8:	2414      	movs	r4, #20
 80039aa:	193b      	adds	r3, r7, r4
 80039ac:	0018      	movs	r0, r3
 80039ae:	2314      	movs	r3, #20
 80039b0:	001a      	movs	r2, r3
 80039b2:	2100      	movs	r1, #0
 80039b4:	f005 fc47 	bl	8009246 <memset>
  if(hi2c->Instance==I2C1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <HAL_I2C_MspInit+0x90>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d132      	bne.n	8003a28 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c2:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <HAL_I2C_MspInit+0x94>)
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_I2C_MspInit+0x94>)
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	02c9      	lsls	r1, r1, #11
 80039cc:	430a      	orrs	r2, r1
 80039ce:	615a      	str	r2, [r3, #20]
 80039d0:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <HAL_I2C_MspInit+0x94>)
 80039d2:	695a      	ldr	r2, [r3, #20]
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	02db      	lsls	r3, r3, #11
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039de:	193b      	adds	r3, r7, r4
 80039e0:	22c0      	movs	r2, #192	; 0xc0
 80039e2:	0092      	lsls	r2, r2, #2
 80039e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039e6:	0021      	movs	r1, r4
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	2212      	movs	r2, #18
 80039ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	2201      	movs	r2, #1
 80039f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039f4:	187b      	adds	r3, r7, r1
 80039f6:	2203      	movs	r2, #3
 80039f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80039fa:	187b      	adds	r3, r7, r1
 80039fc:	2201      	movs	r2, #1
 80039fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a00:	187b      	adds	r3, r7, r1
 8003a02:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <HAL_I2C_MspInit+0x98>)
 8003a04:	0019      	movs	r1, r3
 8003a06:	0010      	movs	r0, r2
 8003a08:	f001 fc9c 	bl	8005344 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_I2C_MspInit+0x94>)
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <HAL_I2C_MspInit+0x94>)
 8003a12:	2180      	movs	r1, #128	; 0x80
 8003a14:	0389      	lsls	r1, r1, #14
 8003a16:	430a      	orrs	r2, r1
 8003a18:	61da      	str	r2, [r3, #28]
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_I2C_MspInit+0x94>)
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	039b      	lsls	r3, r3, #14
 8003a22:	4013      	ands	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b00b      	add	sp, #44	; 0x2c
 8003a2e:	bd90      	pop	{r4, r7, pc}
 8003a30:	40005400 	.word	0x40005400
 8003a34:	40021000 	.word	0x40021000
 8003a38:	48000400 	.word	0x48000400

08003a3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b08b      	sub	sp, #44	; 0x2c
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a44:	2414      	movs	r4, #20
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	0018      	movs	r0, r3
 8003a4a:	2314      	movs	r3, #20
 8003a4c:	001a      	movs	r2, r3
 8003a4e:	2100      	movs	r1, #0
 8003a50:	f005 fbf9 	bl	8009246 <memset>
  if(htim_encoder->Instance==TIM2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	05db      	lsls	r3, r3, #23
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d130      	bne.n	8003ac2 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <HAL_TIM_Encoder_MspInit+0x90>)
 8003a62:	69da      	ldr	r2, [r3, #28]
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_TIM_Encoder_MspInit+0x90>)
 8003a66:	2101      	movs	r1, #1
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	61da      	str	r2, [r3, #28]
 8003a6c:	4b17      	ldr	r3, [pc, #92]	; (8003acc <HAL_TIM_Encoder_MspInit+0x90>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	2201      	movs	r2, #1
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <HAL_TIM_Encoder_MspInit+0x90>)
 8003a7a:	695a      	ldr	r2, [r3, #20]
 8003a7c:	4b13      	ldr	r3, [pc, #76]	; (8003acc <HAL_TIM_Encoder_MspInit+0x90>)
 8003a7e:	2180      	movs	r1, #128	; 0x80
 8003a80:	0289      	lsls	r1, r1, #10
 8003a82:	430a      	orrs	r2, r1
 8003a84:	615a      	str	r2, [r3, #20]
 8003a86:	4b11      	ldr	r3, [pc, #68]	; (8003acc <HAL_TIM_Encoder_MspInit+0x90>)
 8003a88:	695a      	ldr	r2, [r3, #20]
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	029b      	lsls	r3, r3, #10
 8003a8e:	4013      	ands	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003a94:	0021      	movs	r1, r4
 8003a96:	187b      	adds	r3, r7, r1
 8003a98:	2203      	movs	r2, #3
 8003a9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa8:	187b      	adds	r3, r7, r1
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003aae:	187b      	adds	r3, r7, r1
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab4:	187a      	adds	r2, r7, r1
 8003ab6:	2390      	movs	r3, #144	; 0x90
 8003ab8:	05db      	lsls	r3, r3, #23
 8003aba:	0011      	movs	r1, r2
 8003abc:	0018      	movs	r0, r3
 8003abe:	f001 fc41 	bl	8005344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b00b      	add	sp, #44	; 0x2c
 8003ac8:	bd90      	pop	{r4, r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	40021000 	.word	0x40021000

08003ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a42      	ldr	r2, [pc, #264]	; (8003be8 <HAL_TIM_Base_MspInit+0x118>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10c      	bne.n	8003afc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ae2:	4b42      	ldr	r3, [pc, #264]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	4b41      	ldr	r3, [pc, #260]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003ae8:	2102      	movs	r1, #2
 8003aea:	430a      	orrs	r2, r1
 8003aec:	61da      	str	r2, [r3, #28]
 8003aee:	4b3f      	ldr	r3, [pc, #252]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	2202      	movs	r2, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003afa:	e071      	b.n	8003be0 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM14)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a3b      	ldr	r2, [pc, #236]	; (8003bf0 <HAL_TIM_Base_MspInit+0x120>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d10e      	bne.n	8003b24 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003b06:	4b39      	ldr	r3, [pc, #228]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003b08:	69da      	ldr	r2, [r3, #28]
 8003b0a:	4b38      	ldr	r3, [pc, #224]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003b0c:	2180      	movs	r1, #128	; 0x80
 8003b0e:	0049      	lsls	r1, r1, #1
 8003b10:	430a      	orrs	r2, r1
 8003b12:	61da      	str	r2, [r3, #28]
 8003b14:	4b35      	ldr	r3, [pc, #212]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
}
 8003b22:	e05d      	b.n	8003be0 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM16)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a32      	ldr	r2, [pc, #200]	; (8003bf4 <HAL_TIM_Base_MspInit+0x124>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d13d      	bne.n	8003baa <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003b2e:	4b2f      	ldr	r3, [pc, #188]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003b34:	2180      	movs	r1, #128	; 0x80
 8003b36:	0289      	lsls	r1, r1, #10
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	619a      	str	r2, [r3, #24]
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	2380      	movs	r3, #128	; 0x80
 8003b42:	029b      	lsls	r3, r3, #10
 8003b44:	4013      	ands	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
    hdma_tim16_ch1_up.Instance = DMA1_Channel3;
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b4c:	4a2b      	ldr	r2, [pc, #172]	; (8003bfc <HAL_TIM_Base_MspInit+0x12c>)
 8003b4e:	601a      	str	r2, [r3, #0]
    hdma_tim16_ch1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b50:	4b29      	ldr	r3, [pc, #164]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b52:	2210      	movs	r2, #16
 8003b54:	605a      	str	r2, [r3, #4]
    hdma_tim16_ch1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b56:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	609a      	str	r2, [r3, #8]
    hdma_tim16_ch1_up.Init.MemInc = DMA_MINC_ENABLE;
 8003b5c:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b5e:	2280      	movs	r2, #128	; 0x80
 8003b60:	60da      	str	r2, [r3, #12]
    hdma_tim16_ch1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003b62:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b64:	2280      	movs	r2, #128	; 0x80
 8003b66:	0052      	lsls	r2, r2, #1
 8003b68:	611a      	str	r2, [r3, #16]
    hdma_tim16_ch1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b6a:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b6c:	2280      	movs	r2, #128	; 0x80
 8003b6e:	00d2      	lsls	r2, r2, #3
 8003b70:	615a      	str	r2, [r3, #20]
    hdma_tim16_ch1_up.Init.Mode = DMA_NORMAL;
 8003b72:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	619a      	str	r2, [r3, #24]
    hdma_tim16_ch1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b78:	4b1f      	ldr	r3, [pc, #124]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b7a:	22c0      	movs	r2, #192	; 0xc0
 8003b7c:	0192      	lsls	r2, r2, #6
 8003b7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim16_ch1_up) != HAL_OK)
 8003b80:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b82:	0018      	movs	r0, r3
 8003b84:	f001 f9be 	bl	8004f04 <HAL_DMA_Init>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_TIM_Base_MspInit+0xc0>
      Error_Handler();
 8003b8c:	f7ff fe6c 	bl	8003868 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim16_ch1_up);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24
 8003b96:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim16_ch1_up);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003ba0:	621a      	str	r2, [r3, #32]
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <HAL_TIM_Base_MspInit+0x128>)
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003ba8:	e01a      	b.n	8003be0 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM17)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a14      	ldr	r2, [pc, #80]	; (8003c00 <HAL_TIM_Base_MspInit+0x130>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d115      	bne.n	8003be0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003bb4:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003bb6:	699a      	ldr	r2, [r3, #24]
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003bba:	2180      	movs	r1, #128	; 0x80
 8003bbc:	02c9      	lsls	r1, r1, #11
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	619a      	str	r2, [r3, #24]
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <HAL_TIM_Base_MspInit+0x11c>)
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	02db      	lsls	r3, r3, #11
 8003bca:	4013      	ands	r3, r2
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	2016      	movs	r0, #22
 8003bd6:	f001 f95f 	bl	8004e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003bda:	2016      	movs	r0, #22
 8003bdc:	f001 f971 	bl	8004ec2 <HAL_NVIC_EnableIRQ>
}
 8003be0:	46c0      	nop			; (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b006      	add	sp, #24
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40002000 	.word	0x40002000
 8003bf4:	40014400 	.word	0x40014400
 8003bf8:	200005a8 	.word	0x200005a8
 8003bfc:	40020030 	.word	0x40020030
 8003c00:	40014800 	.word	0x40014800

08003c04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c04:	b590      	push	{r4, r7, lr}
 8003c06:	b08b      	sub	sp, #44	; 0x2c
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0c:	2414      	movs	r4, #20
 8003c0e:	193b      	adds	r3, r7, r4
 8003c10:	0018      	movs	r0, r3
 8003c12:	2314      	movs	r3, #20
 8003c14:	001a      	movs	r2, r3
 8003c16:	2100      	movs	r1, #0
 8003c18:	f005 fb15 	bl	8009246 <memset>
  if(htim->Instance==TIM3)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3f      	ldr	r2, [pc, #252]	; (8003d20 <HAL_TIM_MspPostInit+0x11c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d124      	bne.n	8003c70 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c26:	4b3f      	ldr	r3, [pc, #252]	; (8003d24 <HAL_TIM_MspPostInit+0x120>)
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <HAL_TIM_MspPostInit+0x120>)
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	02c9      	lsls	r1, r1, #11
 8003c30:	430a      	orrs	r2, r1
 8003c32:	615a      	str	r2, [r3, #20]
 8003c34:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <HAL_TIM_MspPostInit+0x120>)
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	02db      	lsls	r3, r3, #11
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = tim3ch3_servo3_Pin|tim3ch1_servo1_Pin|tim3ch2_servo2_Pin;
 8003c42:	0021      	movs	r1, r4
 8003c44:	187b      	adds	r3, r7, r1
 8003c46:	2231      	movs	r2, #49	; 0x31
 8003c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4a:	187b      	adds	r3, r7, r1
 8003c4c:	2202      	movs	r2, #2
 8003c4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	187b      	adds	r3, r7, r1
 8003c52:	2200      	movs	r2, #0
 8003c54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c56:	187b      	adds	r3, r7, r1
 8003c58:	2200      	movs	r2, #0
 8003c5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003c5c:	187b      	adds	r3, r7, r1
 8003c5e:	2201      	movs	r2, #1
 8003c60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c62:	187b      	adds	r3, r7, r1
 8003c64:	4a30      	ldr	r2, [pc, #192]	; (8003d28 <HAL_TIM_MspPostInit+0x124>)
 8003c66:	0019      	movs	r1, r3
 8003c68:	0010      	movs	r0, r2
 8003c6a:	f001 fb6b 	bl	8005344 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003c6e:	e053      	b.n	8003d18 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM14)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a2d      	ldr	r2, [pc, #180]	; (8003d2c <HAL_TIM_MspPostInit+0x128>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d124      	bne.n	8003cc4 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7a:	4b2a      	ldr	r3, [pc, #168]	; (8003d24 <HAL_TIM_MspPostInit+0x120>)
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <HAL_TIM_MspPostInit+0x120>)
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	02c9      	lsls	r1, r1, #11
 8003c84:	430a      	orrs	r2, r1
 8003c86:	615a      	str	r2, [r3, #20]
 8003c88:	4b26      	ldr	r3, [pc, #152]	; (8003d24 <HAL_TIM_MspPostInit+0x120>)
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	02db      	lsls	r3, r3, #11
 8003c90:	4013      	ands	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c96:	2114      	movs	r1, #20
 8003c98:	187b      	adds	r3, r7, r1
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9e:	187b      	adds	r3, r7, r1
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003caa:	187b      	adds	r3, r7, r1
 8003cac:	2200      	movs	r2, #0
 8003cae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM14;
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_TIM_MspPostInit+0x124>)
 8003cba:	0019      	movs	r1, r3
 8003cbc:	0010      	movs	r0, r2
 8003cbe:	f001 fb41 	bl	8005344 <HAL_GPIO_Init>
}
 8003cc2:	e029      	b.n	8003d18 <HAL_TIM_MspPostInit+0x114>
  else if(htim->Instance==TIM16)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <HAL_TIM_MspPostInit+0x12c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d124      	bne.n	8003d18 <HAL_TIM_MspPostInit+0x114>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cce:	4b15      	ldr	r3, [pc, #84]	; (8003d24 <HAL_TIM_MspPostInit+0x120>)
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <HAL_TIM_MspPostInit+0x120>)
 8003cd4:	2180      	movs	r1, #128	; 0x80
 8003cd6:	0289      	lsls	r1, r1, #10
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	615a      	str	r2, [r3, #20]
 8003cdc:	4b11      	ldr	r3, [pc, #68]	; (8003d24 <HAL_TIM_MspPostInit+0x120>)
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = tim16ch1_rgb_leds_Pin;
 8003cea:	2114      	movs	r1, #20
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	2240      	movs	r2, #64	; 0x40
 8003cf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	2203      	movs	r2, #3
 8003d02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8003d04:	187b      	adds	r3, r7, r1
 8003d06:	2205      	movs	r2, #5
 8003d08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(tim16ch1_rgb_leds_GPIO_Port, &GPIO_InitStruct);
 8003d0a:	187a      	adds	r2, r7, r1
 8003d0c:	2390      	movs	r3, #144	; 0x90
 8003d0e:	05db      	lsls	r3, r3, #23
 8003d10:	0011      	movs	r1, r2
 8003d12:	0018      	movs	r0, r3
 8003d14:	f001 fb16 	bl	8005344 <HAL_GPIO_Init>
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b00b      	add	sp, #44	; 0x2c
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	40000400 	.word	0x40000400
 8003d24:	40021000 	.word	0x40021000
 8003d28:	48000400 	.word	0x48000400
 8003d2c:	40002000 	.word	0x40002000
 8003d30:	40014400 	.word	0x40014400

08003d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b08b      	sub	sp, #44	; 0x2c
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3c:	2414      	movs	r4, #20
 8003d3e:	193b      	adds	r3, r7, r4
 8003d40:	0018      	movs	r0, r3
 8003d42:	2314      	movs	r3, #20
 8003d44:	001a      	movs	r2, r3
 8003d46:	2100      	movs	r1, #0
 8003d48:	f005 fa7d 	bl	8009246 <memset>
  if(huart->Instance==USART2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2f      	ldr	r2, [pc, #188]	; (8003e10 <HAL_UART_MspInit+0xdc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d158      	bne.n	8003e08 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d56:	4b2f      	ldr	r3, [pc, #188]	; (8003e14 <HAL_UART_MspInit+0xe0>)
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	4b2e      	ldr	r3, [pc, #184]	; (8003e14 <HAL_UART_MspInit+0xe0>)
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	0289      	lsls	r1, r1, #10
 8003d60:	430a      	orrs	r2, r1
 8003d62:	61da      	str	r2, [r3, #28]
 8003d64:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_UART_MspInit+0xe0>)
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	029b      	lsls	r3, r3, #10
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d72:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <HAL_UART_MspInit+0xe0>)
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_UART_MspInit+0xe0>)
 8003d78:	2180      	movs	r1, #128	; 0x80
 8003d7a:	0289      	lsls	r1, r1, #10
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	615a      	str	r2, [r3, #20]
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_UART_MspInit+0xe0>)
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	029b      	lsls	r3, r3, #10
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8003d8e:	0021      	movs	r1, r4
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	4a21      	ldr	r2, [pc, #132]	; (8003e18 <HAL_UART_MspInit+0xe4>)
 8003d94:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	2202      	movs	r2, #2
 8003d9a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	2200      	movs	r2, #0
 8003da0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003da2:	187b      	adds	r3, r7, r1
 8003da4:	2203      	movs	r2, #3
 8003da6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	2201      	movs	r2, #1
 8003dac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dae:	187a      	adds	r2, r7, r1
 8003db0:	2390      	movs	r3, #144	; 0x90
 8003db2:	05db      	lsls	r3, r3, #23
 8003db4:	0011      	movs	r1, r2
 8003db6:	0018      	movs	r0, r3
 8003db8:	f001 fac4 	bl	8005344 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8003dbc:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003dbe:	4a18      	ldr	r2, [pc, #96]	; (8003e20 <HAL_UART_MspInit+0xec>)
 8003dc0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dc2:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dce:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dda:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003de0:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003dee:	0018      	movs	r0, r3
 8003df0:	f001 f888 	bl	8004f04 <HAL_DMA_Init>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8003df8:	f7ff fd36 	bl	8003868 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a07      	ldr	r2, [pc, #28]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003e00:	671a      	str	r2, [r3, #112]	; 0x70
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_UART_MspInit+0xe8>)
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b00b      	add	sp, #44	; 0x2c
 8003e0e:	bd90      	pop	{r4, r7, pc}
 8003e10:	40004400 	.word	0x40004400
 8003e14:	40021000 	.word	0x40021000
 8003e18:	00008004 	.word	0x00008004
 8003e1c:	20000670 	.word	0x20000670
 8003e20:	40020058 	.word	0x40020058

08003e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e28:	e7fe      	b.n	8003e28 <NMI_Handler+0x4>

08003e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e2e:	e7fe      	b.n	8003e2e <HardFault_Handler+0x4>

08003e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e48:	f000 fa90 	bl	800436c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f001 fc24 	bl	80056a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003e60:	46c0      	nop			; (mov r8, r8)
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003e6c:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <DMA1_Channel1_IRQHandler+0x14>)
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f001 f973 	bl	800515a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	200003b0 	.word	0x200003b0

08003e80 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim16_ch1_up);
 8003e84:	4b03      	ldr	r3, [pc, #12]	; (8003e94 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003e86:	0018      	movs	r0, r3
 8003e88:	f001 f967 	bl	800515a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	200005a8 	.word	0x200005a8

08003e98 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f001 f95b 	bl	800515a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	20000670 	.word	0x20000670

08003eb0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <TIM17_IRQHandler+0x14>)
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f002 ff06 	bl	8006cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003ebc:	46c0      	nop			; (mov r8, r8)
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	20000560 	.word	0x20000560

08003ec8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <USART2_IRQHandler+0x1c>)
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f004 f8aa 	bl	8008028 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  USER_UART_IRQHandler(&huart2);
 8003ed4:	4b03      	ldr	r3, [pc, #12]	; (8003ee4 <USART2_IRQHandler+0x1c>)
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f000 f8ca 	bl	8004070 <USER_UART_IRQHandler>

  /* USER CODE END USART2_IRQn 1 */
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	200005ec 	.word	0x200005ec

08003ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	return 1;
 8003eec:	2301      	movs	r3, #1
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <_kill>:

int _kill(int pid, int sig)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003efe:	f005 f96f 	bl	80091e0 <__errno>
 8003f02:	0003      	movs	r3, r0
 8003f04:	2216      	movs	r2, #22
 8003f06:	601a      	str	r2, [r3, #0]
	return -1;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	425b      	negs	r3, r3
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <_exit>:

void _exit (int status)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	425a      	negs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	0011      	movs	r1, r2
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7ff ffe5 	bl	8003ef4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f2a:	e7fe      	b.n	8003f2a <_exit+0x16>

08003f2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e00a      	b.n	8003f54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f3e:	e000      	b.n	8003f42 <_read+0x16>
 8003f40:	bf00      	nop
 8003f42:	0001      	movs	r1, r0
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	60ba      	str	r2, [r7, #8]
 8003f4a:	b2ca      	uxtb	r2, r1
 8003f4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	3301      	adds	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	dbf0      	blt.n	8003f3e <_read+0x12>
	}

return len;
 8003f5c:	687b      	ldr	r3, [r7, #4]
}
 8003f5e:	0018      	movs	r0, r3
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b006      	add	sp, #24
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e009      	b.n	8003f8c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	60ba      	str	r2, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	0018      	movs	r0, r3
 8003f82:	e000      	b.n	8003f86 <_write+0x20>
 8003f84:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	dbf1      	blt.n	8003f78 <_write+0x12>
	}
	return len;
 8003f94:	687b      	ldr	r3, [r7, #4]
}
 8003f96:	0018      	movs	r0, r3
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b006      	add	sp, #24
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <_close>:

int _close(int file)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
	return -1;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	425b      	negs	r3, r3
}
 8003faa:	0018      	movs	r0, r3
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b002      	add	sp, #8
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2280      	movs	r2, #128	; 0x80
 8003fc0:	0192      	lsls	r2, r2, #6
 8003fc2:	605a      	str	r2, [r3, #4]
	return 0;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b002      	add	sp, #8
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <_isatty>:

int _isatty(int file)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
	return 1;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
	return 0;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	0018      	movs	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b004      	add	sp, #16
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004000:	4a14      	ldr	r2, [pc, #80]	; (8004054 <_sbrk+0x5c>)
 8004002:	4b15      	ldr	r3, [pc, #84]	; (8004058 <_sbrk+0x60>)
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800400c:	4b13      	ldr	r3, [pc, #76]	; (800405c <_sbrk+0x64>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004014:	4b11      	ldr	r3, [pc, #68]	; (800405c <_sbrk+0x64>)
 8004016:	4a12      	ldr	r2, [pc, #72]	; (8004060 <_sbrk+0x68>)
 8004018:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800401a:	4b10      	ldr	r3, [pc, #64]	; (800405c <_sbrk+0x64>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	18d3      	adds	r3, r2, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	429a      	cmp	r2, r3
 8004026:	d207      	bcs.n	8004038 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004028:	f005 f8da 	bl	80091e0 <__errno>
 800402c:	0003      	movs	r3, r0
 800402e:	220c      	movs	r2, #12
 8004030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004032:	2301      	movs	r3, #1
 8004034:	425b      	negs	r3, r3
 8004036:	e009      	b.n	800404c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004038:	4b08      	ldr	r3, [pc, #32]	; (800405c <_sbrk+0x64>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800403e:	4b07      	ldr	r3, [pc, #28]	; (800405c <_sbrk+0x64>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	18d2      	adds	r2, r2, r3
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <_sbrk+0x64>)
 8004048:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	0018      	movs	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	b006      	add	sp, #24
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20004000 	.word	0x20004000
 8004058:	00000400 	.word	0x00000400
 800405c:	20000928 	.word	0x20000928
 8004060:	20000e48 	.word	0x20000e48

08004064 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <USER_UART_IRQHandler>:

int head = 0, tail = 0;


void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    if(USART2 == huart2.Instance)
 8004078:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <USER_UART_IRQHandler+0xc4>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2e      	ldr	r2, [pc, #184]	; (8004138 <USER_UART_IRQHandler+0xc8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d153      	bne.n	800412a <USER_UART_IRQHandler+0xba>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE))
 8004082:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <USER_UART_IRQHandler+0xc4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	2210      	movs	r2, #16
 800408a:	4013      	ands	r3, r2
 800408c:	2b10      	cmp	r3, #16
 800408e:	d14c      	bne.n	800412a <USER_UART_IRQHandler+0xba>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8004090:	4b28      	ldr	r3, [pc, #160]	; (8004134 <USER_UART_IRQHandler+0xc4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2210      	movs	r2, #16
 8004096:	621a      	str	r2, [r3, #32]
//            USAR_UART_IDLECallback(huart);
            HAL_UART_DMAStop(&huart2);
 8004098:	4b26      	ldr	r3, [pc, #152]	; (8004134 <USER_UART_IRQHandler+0xc4>)
 800409a:	0018      	movs	r0, r3
 800409c:	f003 ff34 	bl	8007f08 <HAL_UART_DMAStop>
			int new_data_length  = DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart2_rx);
 80040a0:	4b26      	ldr	r3, [pc, #152]	; (800413c <USER_UART_IRQHandler+0xcc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	22ff      	movs	r2, #255	; 0xff
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	60fb      	str	r3, [r7, #12]
			//TODO check if data_length is bigger than 255

			//circular buffer implementation
			if(head + new_data_length > CIRCULAR_BUFFER_SIZE)	//if roll over
 80040ac:	4b24      	ldr	r3, [pc, #144]	; (8004140 <USER_UART_IRQHandler+0xd0>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	18d2      	adds	r2, r2, r3
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	429a      	cmp	r2, r3
 80040ba:	db1a      	blt.n	80040f2 <USER_UART_IRQHandler+0x82>
			{
				int data_len_to_cpy = CIRCULAR_BUFFER_SIZE - head;
 80040bc:	4b20      	ldr	r3, [pc, #128]	; (8004140 <USER_UART_IRQHandler+0xd0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a20      	ldr	r2, [pc, #128]	; (8004144 <USER_UART_IRQHandler+0xd4>)
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	60bb      	str	r3, [r7, #8]
				memcpy(circular_rx_buffer + head, DMA_rx_buffer, data_len_to_cpy);
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <USER_UART_IRQHandler+0xd0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	001a      	movs	r2, r3
 80040cc:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <USER_UART_IRQHandler+0xd8>)
 80040ce:	18d3      	adds	r3, r2, r3
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	491e      	ldr	r1, [pc, #120]	; (800414c <USER_UART_IRQHandler+0xdc>)
 80040d4:	0018      	movs	r0, r3
 80040d6:	f005 f8ad 	bl	8009234 <memcpy>
				memcpy(circular_rx_buffer, DMA_rx_buffer + data_len_to_cpy, new_data_length - data_len_to_cpy);
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <USER_UART_IRQHandler+0xdc>)
 80040de:	18d1      	adds	r1, r2, r3
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	001a      	movs	r2, r3
 80040e8:	4b17      	ldr	r3, [pc, #92]	; (8004148 <USER_UART_IRQHandler+0xd8>)
 80040ea:	0018      	movs	r0, r3
 80040ec:	f005 f8a2 	bl	8009234 <memcpy>
 80040f0:	e009      	b.n	8004106 <USER_UART_IRQHandler+0x96>
			}
			else
			{
				memcpy(circular_rx_buffer + head, DMA_rx_buffer, new_data_length);
 80040f2:	4b13      	ldr	r3, [pc, #76]	; (8004140 <USER_UART_IRQHandler+0xd0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	001a      	movs	r2, r3
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <USER_UART_IRQHandler+0xd8>)
 80040fa:	18d3      	adds	r3, r2, r3
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4913      	ldr	r1, [pc, #76]	; (800414c <USER_UART_IRQHandler+0xdc>)
 8004100:	0018      	movs	r0, r3
 8004102:	f005 f897 	bl	8009234 <memcpy>
			}

			head = (head + new_data_length) % CIRCULAR_BUFFER_SIZE;
 8004106:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <USER_UART_IRQHandler+0xd0>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	18d3      	adds	r3, r2, r3
 800410e:	490d      	ldr	r1, [pc, #52]	; (8004144 <USER_UART_IRQHandler+0xd4>)
 8004110:	0018      	movs	r0, r3
 8004112:	f7fc f985 	bl	8000420 <__aeabi_idivmod>
 8004116:	000b      	movs	r3, r1
 8004118:	001a      	movs	r2, r3
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <USER_UART_IRQHandler+0xd0>)
 800411c:	601a      	str	r2, [r3, #0]

			HAL_UART_Receive_DMA(&huart2, (uint8_t*)DMA_rx_buffer, DMA_BUFFER_SIZE);
 800411e:	490b      	ldr	r1, [pc, #44]	; (800414c <USER_UART_IRQHandler+0xdc>)
 8004120:	4b04      	ldr	r3, [pc, #16]	; (8004134 <USER_UART_IRQHandler+0xc4>)
 8004122:	22ff      	movs	r2, #255	; 0xff
 8004124:	0018      	movs	r0, r3
 8004126:	f003 fe8e 	bl	8007e46 <HAL_UART_Receive_DMA>
        }
    }
}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	46bd      	mov	sp, r7
 800412e:	b004      	add	sp, #16
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	200005ec 	.word	0x200005ec
 8004138:	40004400 	.word	0x40004400
 800413c:	20000670 	.word	0x20000670
 8004140:	20000e2c 	.word	0x20000e2c
 8004144:	000003ff 	.word	0x000003ff
 8004148:	20000a2c 	.word	0x20000a2c
 800414c:	2000092c 	.word	0x2000092c

08004150 <setup_uart>:


void setup_uart()
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <setup_uart+0x34>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <setup_uart+0x34>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2110      	movs	r1, #16
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)DMA_rx_buffer, 255);
 8004164:	4908      	ldr	r1, [pc, #32]	; (8004188 <setup_uart+0x38>)
 8004166:	4b07      	ldr	r3, [pc, #28]	; (8004184 <setup_uart+0x34>)
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	0018      	movs	r0, r3
 800416c:	f003 fe6b 	bl	8007e46 <HAL_UART_Receive_DMA>

	memset(circular_rx_buffer,0 , sizeof(circular_rx_buffer));
 8004170:	4a06      	ldr	r2, [pc, #24]	; (800418c <setup_uart+0x3c>)
 8004172:	4b07      	ldr	r3, [pc, #28]	; (8004190 <setup_uart+0x40>)
 8004174:	2100      	movs	r1, #0
 8004176:	0018      	movs	r0, r3
 8004178:	f005 f865 	bl	8009246 <memset>
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	200005ec 	.word	0x200005ec
 8004188:	2000092c 	.word	0x2000092c
 800418c:	000003ff 	.word	0x000003ff
 8004190:	20000a2c 	.word	0x20000a2c

08004194 <IsDataAvailable>:

int IsDataAvailable()
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  return (CIRCULAR_BUFFER_SIZE + head - tail) % CIRCULAR_BUFFER_SIZE;
 8004198:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <IsDataAvailable+0x24>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a07      	ldr	r2, [pc, #28]	; (80041bc <IsDataAvailable+0x28>)
 800419e:	189a      	adds	r2, r3, r2
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <IsDataAvailable+0x2c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	4905      	ldr	r1, [pc, #20]	; (80041bc <IsDataAvailable+0x28>)
 80041a8:	0018      	movs	r0, r3
 80041aa:	f7fc f939 	bl	8000420 <__aeabi_idivmod>
 80041ae:	000b      	movs	r3, r1
}
 80041b0:	0018      	movs	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	20000e2c 	.word	0x20000e2c
 80041bc:	000003ff 	.word	0x000003ff
 80041c0:	20000e30 	.word	0x20000e30

080041c4 <read_serial_all>:

//maybe do a read_until function
int read_serial_all(char * rxBuffer)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	//get data from circular buffer
	int length = (CIRCULAR_BUFFER_SIZE + head - tail) % CIRCULAR_BUFFER_SIZE;
 80041cc:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <read_serial_all+0xb4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a2a      	ldr	r2, [pc, #168]	; (800427c <read_serial_all+0xb8>)
 80041d2:	189a      	adds	r2, r3, r2
 80041d4:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <read_serial_all+0xbc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	4928      	ldr	r1, [pc, #160]	; (800427c <read_serial_all+0xb8>)
 80041dc:	0018      	movs	r0, r3
 80041de:	f7fc f91f 	bl	8000420 <__aeabi_idivmod>
 80041e2:	000b      	movs	r3, r1
 80041e4:	60fb      	str	r3, [r7, #12]
	if(length < 0)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	da02      	bge.n	80041f2 <read_serial_all+0x2e>
		return -1;
 80041ec:	2301      	movs	r3, #1
 80041ee:	425b      	negs	r3, r3
 80041f0:	e03d      	b.n	800426e <read_serial_all+0xaa>

	memset(rxBuffer, 0, sizeof(rxBuffer));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2204      	movs	r2, #4
 80041f6:	2100      	movs	r1, #0
 80041f8:	0018      	movs	r0, r3
 80041fa:	f005 f824 	bl	8009246 <memset>

	if(head > tail)	//if didn't roll over yet
 80041fe:	4b1e      	ldr	r3, [pc, #120]	; (8004278 <read_serial_all+0xb4>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <read_serial_all+0xbc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	dd0f      	ble.n	800422a <read_serial_all+0x66>
	{
		memcpy(rxBuffer, circular_rx_buffer + tail, head - tail);
 800420a:	4b1d      	ldr	r3, [pc, #116]	; (8004280 <read_serial_all+0xbc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	001a      	movs	r2, r3
 8004210:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <read_serial_all+0xc0>)
 8004212:	18d1      	adds	r1, r2, r3
 8004214:	4b18      	ldr	r3, [pc, #96]	; (8004278 <read_serial_all+0xb4>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <read_serial_all+0xbc>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	001a      	movs	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	0018      	movs	r0, r3
 8004224:	f005 f806 	bl	8009234 <memcpy>
 8004228:	e01c      	b.n	8004264 <read_serial_all+0xa0>
	}
	else			//if roll over occurred
	{
		int data_len_to_cpy = CIRCULAR_BUFFER_SIZE - tail;
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <read_serial_all+0xbc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a13      	ldr	r2, [pc, #76]	; (800427c <read_serial_all+0xb8>)
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	60bb      	str	r3, [r7, #8]
		memcpy(rxBuffer, circular_rx_buffer + tail, data_len_to_cpy);
 8004234:	4b12      	ldr	r3, [pc, #72]	; (8004280 <read_serial_all+0xbc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	001a      	movs	r2, r3
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <read_serial_all+0xc0>)
 800423c:	18d1      	adds	r1, r2, r3
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0018      	movs	r0, r3
 8004244:	f004 fff6 	bl	8009234 <memcpy>
		memcpy(rxBuffer + data_len_to_cpy, circular_rx_buffer, IsDataAvailable() - data_len_to_cpy);
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	18d4      	adds	r4, r2, r3
 800424e:	f7ff ffa1 	bl	8004194 <IsDataAvailable>
 8004252:	0002      	movs	r2, r0
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	001a      	movs	r2, r3
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <read_serial_all+0xc0>)
 800425c:	0019      	movs	r1, r3
 800425e:	0020      	movs	r0, r4
 8004260:	f004 ffe8 	bl	8009234 <memcpy>

	}

	tail = head;
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <read_serial_all+0xb4>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <read_serial_all+0xbc>)
 800426a:	601a      	str	r2, [r3, #0]

	return length;
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	0018      	movs	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	b005      	add	sp, #20
 8004274:	bd90      	pop	{r4, r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	20000e2c 	.word	0x20000e2c
 800427c:	000003ff 	.word	0x000003ff
 8004280:	20000e30 	.word	0x20000e30
 8004284:	20000a2c 	.word	0x20000a2c

08004288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004288:	480d      	ldr	r0, [pc, #52]	; (80042c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800428a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800428c:	480d      	ldr	r0, [pc, #52]	; (80042c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800428e:	490e      	ldr	r1, [pc, #56]	; (80042c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004290:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <LoopForever+0xe>)
  movs r3, #0
 8004292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004294:	e002      	b.n	800429c <LoopCopyDataInit>

08004296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800429a:	3304      	adds	r3, #4

0800429c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800429c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800429e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042a0:	d3f9      	bcc.n	8004296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042a2:	4a0b      	ldr	r2, [pc, #44]	; (80042d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80042a4:	4c0b      	ldr	r4, [pc, #44]	; (80042d4 <LoopForever+0x16>)
  movs r3, #0
 80042a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042a8:	e001      	b.n	80042ae <LoopFillZerobss>

080042aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042ac:	3204      	adds	r2, #4

080042ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042b0:	d3fb      	bcc.n	80042aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80042b2:	f7ff fed7 	bl	8004064 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80042b6:	f004 ff99 	bl	80091ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80042ba:	f7fe fe25 	bl	8002f08 <main>

080042be <LoopForever>:

LoopForever:
    b LoopForever
 80042be:	e7fe      	b.n	80042be <LoopForever>
  ldr   r0, =_estack
 80042c0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80042c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80042cc:	0800c628 	.word	0x0800c628
  ldr r2, =_sbss
 80042d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80042d4:	20000e48 	.word	0x20000e48

080042d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042d8:	e7fe      	b.n	80042d8 <ADC1_COMP_IRQHandler>
	...

080042dc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e0:	4b07      	ldr	r3, [pc, #28]	; (8004300 <HAL_Init+0x24>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <HAL_Init+0x24>)
 80042e6:	2110      	movs	r1, #16
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80042ec:	2000      	movs	r0, #0
 80042ee:	f000 f809 	bl	8004304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042f2:	f7ff fabf 	bl	8003874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	0018      	movs	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			; (mov r8, r8)
 8004300:	40022000 	.word	0x40022000

08004304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <HAL_InitTick+0x5c>)
 800430e:	681c      	ldr	r4, [r3, #0]
 8004310:	4b14      	ldr	r3, [pc, #80]	; (8004364 <HAL_InitTick+0x60>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	0019      	movs	r1, r3
 8004316:	23fa      	movs	r3, #250	; 0xfa
 8004318:	0098      	lsls	r0, r3, #2
 800431a:	f7fb ff11 	bl	8000140 <__udivsi3>
 800431e:	0003      	movs	r3, r0
 8004320:	0019      	movs	r1, r3
 8004322:	0020      	movs	r0, r4
 8004324:	f7fb ff0c 	bl	8000140 <__udivsi3>
 8004328:	0003      	movs	r3, r0
 800432a:	0018      	movs	r0, r3
 800432c:	f000 fddd 	bl	8004eea <HAL_SYSTICK_Config>
 8004330:	1e03      	subs	r3, r0, #0
 8004332:	d001      	beq.n	8004338 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e00f      	b.n	8004358 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d80b      	bhi.n	8004356 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	2301      	movs	r3, #1
 8004342:	425b      	negs	r3, r3
 8004344:	2200      	movs	r2, #0
 8004346:	0018      	movs	r0, r3
 8004348:	f000 fda6 	bl	8004e98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_InitTick+0x64>)
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e000      	b.n	8004358 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	b003      	add	sp, #12
 800435e:	bd90      	pop	{r4, r7, pc}
 8004360:	20000008 	.word	0x20000008
 8004364:	20000010 	.word	0x20000010
 8004368:	2000000c 	.word	0x2000000c

0800436c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <HAL_IncTick+0x1c>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	001a      	movs	r2, r3
 8004376:	4b05      	ldr	r3, [pc, #20]	; (800438c <HAL_IncTick+0x20>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	18d2      	adds	r2, r2, r3
 800437c:	4b03      	ldr	r3, [pc, #12]	; (800438c <HAL_IncTick+0x20>)
 800437e:	601a      	str	r2, [r3, #0]
}
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	20000010 	.word	0x20000010
 800438c:	20000e34 	.word	0x20000e34

08004390 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  return uwTick;
 8004394:	4b02      	ldr	r3, [pc, #8]	; (80043a0 <HAL_GetTick+0x10>)
 8004396:	681b      	ldr	r3, [r3, #0]
}
 8004398:	0018      	movs	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	20000e34 	.word	0x20000e34

080043a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043ac:	f7ff fff0 	bl	8004390 <HAL_GetTick>
 80043b0:	0003      	movs	r3, r0
 80043b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3301      	adds	r3, #1
 80043bc:	d005      	beq.n	80043ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <HAL_Delay+0x44>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	001a      	movs	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	f7ff ffe0 	bl	8004390 <HAL_GetTick>
 80043d0:	0002      	movs	r2, r0
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d8f7      	bhi.n	80043cc <HAL_Delay+0x28>
  {
  }
}
 80043dc:	46c0      	nop			; (mov r8, r8)
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b004      	add	sp, #16
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	20000010 	.word	0x20000010

080043ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f4:	230f      	movs	r3, #15
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e125      	b.n	8004656 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10a      	bne.n	8004428 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2234      	movs	r2, #52	; 0x34
 800441c:	2100      	movs	r1, #0
 800441e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	0018      	movs	r0, r3
 8004424:	f7ff fa4a 	bl	80038bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442c:	2210      	movs	r2, #16
 800442e:	4013      	ands	r3, r2
 8004430:	d000      	beq.n	8004434 <HAL_ADC_Init+0x48>
 8004432:	e103      	b.n	800463c <HAL_ADC_Init+0x250>
 8004434:	230f      	movs	r3, #15
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d000      	beq.n	8004440 <HAL_ADC_Init+0x54>
 800443e:	e0fd      	b.n	800463c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2204      	movs	r2, #4
 8004448:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800444a:	d000      	beq.n	800444e <HAL_ADC_Init+0x62>
 800444c:	e0f6      	b.n	800463c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004452:	4a83      	ldr	r2, [pc, #524]	; (8004660 <HAL_ADC_Init+0x274>)
 8004454:	4013      	ands	r3, r2
 8004456:	2202      	movs	r2, #2
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2203      	movs	r2, #3
 8004466:	4013      	ands	r3, r2
 8004468:	2b01      	cmp	r3, #1
 800446a:	d112      	bne.n	8004492 <HAL_ADC_Init+0xa6>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2201      	movs	r2, #1
 8004474:	4013      	ands	r3, r2
 8004476:	2b01      	cmp	r3, #1
 8004478:	d009      	beq.n	800448e <HAL_ADC_Init+0xa2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	2380      	movs	r3, #128	; 0x80
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	401a      	ands	r2, r3
 8004486:	2380      	movs	r3, #128	; 0x80
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	429a      	cmp	r2, r3
 800448c:	d101      	bne.n	8004492 <HAL_ADC_Init+0xa6>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_ADC_Init+0xa8>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2218      	movs	r2, #24
 80044a0:	4393      	bics	r3, r2
 80044a2:	0019      	movs	r1, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	0899      	lsrs	r1, r3, #2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	430a      	orrs	r2, r1
 80044c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4964      	ldr	r1, [pc, #400]	; (8004664 <HAL_ADC_Init+0x278>)
 80044d2:	400a      	ands	r2, r1
 80044d4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7e1b      	ldrb	r3, [r3, #24]
 80044da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	7e5b      	ldrb	r3, [r3, #25]
 80044e0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7e9b      	ldrb	r3, [r3, #26]
 80044e8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80044ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d002      	beq.n	80044fa <HAL_ADC_Init+0x10e>
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	015b      	lsls	r3, r3, #5
 80044f8:	e000      	b.n	80044fc <HAL_ADC_Init+0x110>
 80044fa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044fc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004502:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d101      	bne.n	8004510 <HAL_ADC_Init+0x124>
 800450c:	2304      	movs	r3, #4
 800450e:	e000      	b.n	8004512 <HAL_ADC_Init+0x126>
 8004510:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004512:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2124      	movs	r1, #36	; 0x24
 8004518:	5c5b      	ldrb	r3, [r3, r1]
 800451a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800451c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4313      	orrs	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	7edb      	ldrb	r3, [r3, #27]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d115      	bne.n	8004558 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	7e9b      	ldrb	r3, [r3, #26]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	0252      	lsls	r2, r2, #9
 800453a:	4313      	orrs	r3, r2
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	e00b      	b.n	8004558 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	2220      	movs	r2, #32
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004550:	2201      	movs	r2, #1
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	23c2      	movs	r3, #194	; 0xc2
 800455e:	33ff      	adds	r3, #255	; 0xff
 8004560:	429a      	cmp	r2, r3
 8004562:	d007      	beq.n	8004574 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800456c:	4313      	orrs	r3, r2
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	4313      	orrs	r3, r2
 8004572:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68d9      	ldr	r1, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	430a      	orrs	r2, r1
 8004582:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	055b      	lsls	r3, r3, #21
 800458c:	429a      	cmp	r2, r3
 800458e:	d01b      	beq.n	80045c8 <HAL_ADC_Init+0x1dc>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	2b01      	cmp	r3, #1
 8004596:	d017      	beq.n	80045c8 <HAL_ADC_Init+0x1dc>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	2b02      	cmp	r3, #2
 800459e:	d013      	beq.n	80045c8 <HAL_ADC_Init+0x1dc>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d00f      	beq.n	80045c8 <HAL_ADC_Init+0x1dc>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d00b      	beq.n	80045c8 <HAL_ADC_Init+0x1dc>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d007      	beq.n	80045c8 <HAL_ADC_Init+0x1dc>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	2b06      	cmp	r3, #6
 80045be:	d003      	beq.n	80045c8 <HAL_ADC_Init+0x1dc>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	2b07      	cmp	r3, #7
 80045c6:	d112      	bne.n	80045ee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2107      	movs	r1, #7
 80045d4:	438a      	bics	r2, r1
 80045d6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6959      	ldr	r1, [r3, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	2207      	movs	r2, #7
 80045e4:	401a      	ands	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <HAL_ADC_Init+0x27c>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d10b      	bne.n	8004616 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	2203      	movs	r2, #3
 800460a:	4393      	bics	r3, r2
 800460c:	2201      	movs	r2, #1
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004614:	e01c      	b.n	8004650 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	2212      	movs	r2, #18
 800461c:	4393      	bics	r3, r2
 800461e:	2210      	movs	r2, #16
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800462a:	2201      	movs	r2, #1
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004632:	230f      	movs	r3, #15
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	2201      	movs	r2, #1
 8004638:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800463a:	e009      	b.n	8004650 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	2210      	movs	r2, #16
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004648:	230f      	movs	r3, #15
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	2201      	movs	r2, #1
 800464e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004650:	230f      	movs	r3, #15
 8004652:	18fb      	adds	r3, r7, r3
 8004654:	781b      	ldrb	r3, [r3, #0]
}
 8004656:	0018      	movs	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	b004      	add	sp, #16
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	fffffefd 	.word	0xfffffefd
 8004664:	fffe0219 	.word	0xfffe0219
 8004668:	833fffe7 	.word	0x833fffe7

0800466c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800466c:	b590      	push	{r4, r7, lr}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004678:	2317      	movs	r3, #23
 800467a:	18fb      	adds	r3, r7, r3
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	2204      	movs	r2, #4
 8004688:	4013      	ands	r3, r2
 800468a:	d15e      	bne.n	800474a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2234      	movs	r2, #52	; 0x34
 8004690:	5c9b      	ldrb	r3, [r3, r2]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_ADC_Start_DMA+0x2e>
 8004696:	2302      	movs	r3, #2
 8004698:	e05e      	b.n	8004758 <HAL_ADC_Start_DMA+0xec>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2234      	movs	r2, #52	; 0x34
 800469e:	2101      	movs	r1, #1
 80046a0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	7e5b      	ldrb	r3, [r3, #25]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d007      	beq.n	80046ba <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80046aa:	2317      	movs	r3, #23
 80046ac:	18fc      	adds	r4, r7, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f000 f983 	bl	80049bc <ADC_Enable>
 80046b6:	0003      	movs	r3, r0
 80046b8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80046ba:	2317      	movs	r3, #23
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d146      	bne.n	8004752 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c8:	4a25      	ldr	r2, [pc, #148]	; (8004760 <HAL_ADC_Start_DMA+0xf4>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	2280      	movs	r2, #128	; 0x80
 80046ce:	0052      	lsls	r2, r2, #1
 80046d0:	431a      	orrs	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2234      	movs	r2, #52	; 0x34
 80046e0:	2100      	movs	r1, #0
 80046e2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <HAL_ADC_Start_DMA+0xf8>)
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	4a1d      	ldr	r2, [pc, #116]	; (8004768 <HAL_ADC_Start_DMA+0xfc>)
 80046f2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	4a1c      	ldr	r2, [pc, #112]	; (800476c <HAL_ADC_Start_DMA+0x100>)
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	221c      	movs	r2, #28
 8004702:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2110      	movs	r1, #16
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2101      	movs	r1, #1
 8004720:	430a      	orrs	r2, r1
 8004722:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3340      	adds	r3, #64	; 0x40
 800472e:	0019      	movs	r1, r3
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f000 fc2e 	bl	8004f94 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2104      	movs	r1, #4
 8004744:	430a      	orrs	r2, r1
 8004746:	609a      	str	r2, [r3, #8]
 8004748:	e003      	b.n	8004752 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800474a:	2317      	movs	r3, #23
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	2202      	movs	r2, #2
 8004750:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004752:	2317      	movs	r3, #23
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	781b      	ldrb	r3, [r3, #0]
}
 8004758:	0018      	movs	r0, r3
 800475a:	46bd      	mov	sp, r7
 800475c:	b007      	add	sp, #28
 800475e:	bd90      	pop	{r4, r7, pc}
 8004760:	fffff0fe 	.word	0xfffff0fe
 8004764:	08004ac5 	.word	0x08004ac5
 8004768:	08004b79 	.word	0x08004b79
 800476c:	08004b97 	.word	0x08004b97

08004770 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b002      	add	sp, #8
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	46bd      	mov	sp, r7
 800478c:	b002      	add	sp, #8
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b002      	add	sp, #8
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047aa:	230f      	movs	r3, #15
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	055b      	lsls	r3, r3, #21
 80047be:	429a      	cmp	r2, r3
 80047c0:	d011      	beq.n	80047e6 <HAL_ADC_ConfigChannel+0x46>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d00d      	beq.n	80047e6 <HAL_ADC_ConfigChannel+0x46>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d009      	beq.n	80047e6 <HAL_ADC_ConfigChannel+0x46>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d005      	beq.n	80047e6 <HAL_ADC_ConfigChannel+0x46>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d001      	beq.n	80047e6 <HAL_ADC_ConfigChannel+0x46>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2234      	movs	r2, #52	; 0x34
 80047ea:	5c9b      	ldrb	r3, [r3, r2]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x54>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e0d0      	b.n	8004996 <HAL_ADC_ConfigChannel+0x1f6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2234      	movs	r2, #52	; 0x34
 80047f8:	2101      	movs	r1, #1
 80047fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2204      	movs	r2, #4
 8004804:	4013      	ands	r3, r2
 8004806:	d000      	beq.n	800480a <HAL_ADC_ConfigChannel+0x6a>
 8004808:	e0b4      	b.n	8004974 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4a64      	ldr	r2, [pc, #400]	; (80049a0 <HAL_ADC_ConfigChannel+0x200>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d100      	bne.n	8004816 <HAL_ADC_ConfigChannel+0x76>
 8004814:	e082      	b.n	800491c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2201      	movs	r2, #1
 8004822:	409a      	lsls	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004830:	2380      	movs	r3, #128	; 0x80
 8004832:	055b      	lsls	r3, r3, #21
 8004834:	429a      	cmp	r2, r3
 8004836:	d037      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x108>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d033      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x108>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	2b02      	cmp	r3, #2
 8004846:	d02f      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x108>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	2b03      	cmp	r3, #3
 800484e:	d02b      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x108>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	2b04      	cmp	r3, #4
 8004856:	d027      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x108>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	2b05      	cmp	r3, #5
 800485e:	d023      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x108>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004864:	2b06      	cmp	r3, #6
 8004866:	d01f      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x108>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	2b07      	cmp	r3, #7
 800486e:	d01b      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	2107      	movs	r1, #7
 800487c:	400b      	ands	r3, r1
 800487e:	429a      	cmp	r2, r3
 8004880:	d012      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2107      	movs	r1, #7
 800488e:	438a      	bics	r2, r1
 8004890:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6959      	ldr	r1, [r3, #20]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2207      	movs	r2, #7
 800489e:	401a      	ands	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d007      	beq.n	80048c0 <HAL_ADC_ConfigChannel+0x120>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b11      	cmp	r3, #17
 80048b6:	d003      	beq.n	80048c0 <HAL_ADC_ConfigChannel+0x120>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b12      	cmp	r3, #18
 80048be:	d163      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80048c0:	4b38      	ldr	r3, [pc, #224]	; (80049a4 <HAL_ADC_ConfigChannel+0x204>)
 80048c2:	6819      	ldr	r1, [r3, #0]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d009      	beq.n	80048e0 <HAL_ADC_ConfigChannel+0x140>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b11      	cmp	r3, #17
 80048d2:	d102      	bne.n	80048da <HAL_ADC_ConfigChannel+0x13a>
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	03db      	lsls	r3, r3, #15
 80048d8:	e004      	b.n	80048e4 <HAL_ADC_ConfigChannel+0x144>
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	045b      	lsls	r3, r3, #17
 80048de:	e001      	b.n	80048e4 <HAL_ADC_ConfigChannel+0x144>
 80048e0:	2380      	movs	r3, #128	; 0x80
 80048e2:	041b      	lsls	r3, r3, #16
 80048e4:	4a2f      	ldr	r2, [pc, #188]	; (80049a4 <HAL_ADC_ConfigChannel+0x204>)
 80048e6:	430b      	orrs	r3, r1
 80048e8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b10      	cmp	r3, #16
 80048f0:	d14a      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80048f2:	4b2d      	ldr	r3, [pc, #180]	; (80049a8 <HAL_ADC_ConfigChannel+0x208>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	492d      	ldr	r1, [pc, #180]	; (80049ac <HAL_ADC_ConfigChannel+0x20c>)
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7fb fc21 	bl	8000140 <__udivsi3>
 80048fe:	0003      	movs	r3, r0
 8004900:	001a      	movs	r2, r3
 8004902:	0013      	movs	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	189b      	adds	r3, r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800490c:	e002      	b.n	8004914 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	3b01      	subs	r3, #1
 8004912:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f9      	bne.n	800490e <HAL_ADC_ConfigChannel+0x16e>
 800491a:	e035      	b.n	8004988 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2101      	movs	r1, #1
 8004928:	4099      	lsls	r1, r3
 800492a:	000b      	movs	r3, r1
 800492c:	43d9      	mvns	r1, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	400a      	ands	r2, r1
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b10      	cmp	r3, #16
 800493c:	d007      	beq.n	800494e <HAL_ADC_ConfigChannel+0x1ae>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b11      	cmp	r3, #17
 8004944:	d003      	beq.n	800494e <HAL_ADC_ConfigChannel+0x1ae>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b12      	cmp	r3, #18
 800494c:	d11c      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800494e:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <HAL_ADC_ConfigChannel+0x204>)
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b10      	cmp	r3, #16
 8004958:	d007      	beq.n	800496a <HAL_ADC_ConfigChannel+0x1ca>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b11      	cmp	r3, #17
 8004960:	d101      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x1c6>
 8004962:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_ADC_ConfigChannel+0x210>)
 8004964:	e002      	b.n	800496c <HAL_ADC_ConfigChannel+0x1cc>
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <HAL_ADC_ConfigChannel+0x214>)
 8004968:	e000      	b.n	800496c <HAL_ADC_ConfigChannel+0x1cc>
 800496a:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <HAL_ADC_ConfigChannel+0x218>)
 800496c:	4a0d      	ldr	r2, [pc, #52]	; (80049a4 <HAL_ADC_ConfigChannel+0x204>)
 800496e:	400b      	ands	r3, r1
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	e009      	b.n	8004988 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	2220      	movs	r2, #32
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004980:	230f      	movs	r3, #15
 8004982:	18fb      	adds	r3, r7, r3
 8004984:	2201      	movs	r2, #1
 8004986:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2234      	movs	r2, #52	; 0x34
 800498c:	2100      	movs	r1, #0
 800498e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004990:	230f      	movs	r3, #15
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	781b      	ldrb	r3, [r3, #0]
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b004      	add	sp, #16
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	00001001 	.word	0x00001001
 80049a4:	40012708 	.word	0x40012708
 80049a8:	20000008 	.word	0x20000008
 80049ac:	000f4240 	.word	0x000f4240
 80049b0:	ffbfffff 	.word	0xffbfffff
 80049b4:	feffffff 	.word	0xfeffffff
 80049b8:	ff7fffff 	.word	0xff7fffff

080049bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	2203      	movs	r2, #3
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d112      	bne.n	8004a00 <ADC_Enable+0x44>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d009      	beq.n	80049fc <ADC_Enable+0x40>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	2380      	movs	r3, #128	; 0x80
 80049f0:	021b      	lsls	r3, r3, #8
 80049f2:	401a      	ands	r2, r3
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	021b      	lsls	r3, r3, #8
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d101      	bne.n	8004a00 <ADC_Enable+0x44>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <ADC_Enable+0x46>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d152      	bne.n	8004aac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4a2a      	ldr	r2, [pc, #168]	; (8004ab8 <ADC_Enable+0xfc>)
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d00d      	beq.n	8004a2e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	2210      	movs	r2, #16
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	2201      	movs	r2, #1
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e03f      	b.n	8004aae <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2101      	movs	r1, #1
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a3e:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <ADC_Enable+0x100>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	491f      	ldr	r1, [pc, #124]	; (8004ac0 <ADC_Enable+0x104>)
 8004a44:	0018      	movs	r0, r3
 8004a46:	f7fb fb7b 	bl	8000140 <__udivsi3>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a4e:	e002      	b.n	8004a56 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f9      	bne.n	8004a50 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004a5c:	f7ff fc98 	bl	8004390 <HAL_GetTick>
 8004a60:	0003      	movs	r3, r0
 8004a62:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a64:	e01b      	b.n	8004a9e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a66:	f7ff fc93 	bl	8004390 <HAL_GetTick>
 8004a6a:	0002      	movs	r2, r0
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d914      	bls.n	8004a9e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d00d      	beq.n	8004a9e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a86:	2210      	movs	r2, #16
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	2201      	movs	r2, #1
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e007      	b.n	8004aae <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d1dc      	bne.n	8004a66 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	0018      	movs	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	b004      	add	sp, #16
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	80000017 	.word	0x80000017
 8004abc:	20000008 	.word	0x20000008
 8004ac0:	000f4240 	.word	0x000f4240

08004ac4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	2250      	movs	r2, #80	; 0x50
 8004ad8:	4013      	ands	r3, r2
 8004ada:	d140      	bne.n	8004b5e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae0:	2280      	movs	r2, #128	; 0x80
 8004ae2:	0092      	lsls	r2, r2, #2
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	23c0      	movs	r3, #192	; 0xc0
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	4013      	ands	r3, r2
 8004af6:	d12d      	bne.n	8004b54 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d129      	bne.n	8004b54 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2208      	movs	r2, #8
 8004b08:	4013      	ands	r3, r2
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d122      	bne.n	8004b54 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2204      	movs	r2, #4
 8004b16:	4013      	ands	r3, r2
 8004b18:	d110      	bne.n	8004b3c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	210c      	movs	r1, #12
 8004b26:	438a      	bics	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	4a11      	ldr	r2, [pc, #68]	; (8004b74 <ADC_DMAConvCplt+0xb0>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	2201      	movs	r2, #1
 8004b34:	431a      	orrs	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38
 8004b3a:	e00b      	b.n	8004b54 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	2220      	movs	r2, #32
 8004b42:	431a      	orrs	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f7ff fe0a 	bl	8004770 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004b5c:	e005      	b.n	8004b6a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	0010      	movs	r0, r2
 8004b68:	4798      	blx	r3
}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b004      	add	sp, #16
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	fffffefe 	.word	0xfffffefe

08004b78 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7ff fdf9 	bl	8004780 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b004      	add	sp, #16
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b084      	sub	sp, #16
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	2240      	movs	r2, #64	; 0x40
 8004baa:	431a      	orrs	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7ff fde6 	bl	8004790 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b004      	add	sp, #16
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bd4:	2317      	movs	r3, #23
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2234      	movs	r2, #52	; 0x34
 8004be8:	5c9b      	ldrb	r3, [r3, r2]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADCEx_Calibration_Start+0x26>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e08d      	b.n	8004d0e <HAL_ADCEx_Calibration_Start+0x142>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2234      	movs	r2, #52	; 0x34
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2203      	movs	r2, #3
 8004c02:	4013      	ands	r3, r2
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d112      	bne.n	8004c2e <HAL_ADCEx_Calibration_Start+0x62>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d009      	beq.n	8004c2a <HAL_ADCEx_Calibration_Start+0x5e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	401a      	ands	r2, r3
 8004c22:	2380      	movs	r3, #128	; 0x80
 8004c24:	021b      	lsls	r3, r3, #8
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d101      	bne.n	8004c2e <HAL_ADCEx_Calibration_Start+0x62>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <HAL_ADCEx_Calibration_Start+0x64>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d15b      	bne.n	8004cec <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	4a37      	ldr	r2, [pc, #220]	; (8004d18 <HAL_ADCEx_Calibration_Start+0x14c>)
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2203      	movs	r2, #3
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68da      	ldr	r2, [r3, #12]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2103      	movs	r1, #3
 8004c5c:	438a      	bics	r2, r1
 8004c5e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2180      	movs	r1, #128	; 0x80
 8004c6c:	0609      	lsls	r1, r1, #24
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004c72:	f7ff fb8d 	bl	8004390 <HAL_GetTick>
 8004c76:	0003      	movs	r3, r0
 8004c78:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004c7a:	e01d      	b.n	8004cb8 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004c7c:	f7ff fb88 	bl	8004390 <HAL_GetTick>
 8004c80:	0002      	movs	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d916      	bls.n	8004cb8 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	0fdb      	lsrs	r3, r3, #31
 8004c92:	07da      	lsls	r2, r3, #31
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	061b      	lsls	r3, r3, #24
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	2212      	movs	r2, #18
 8004ca2:	4393      	bics	r3, r2
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2234      	movs	r2, #52	; 0x34
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e02a      	b.n	8004d0e <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0fdb      	lsrs	r3, r3, #31
 8004cc0:	07da      	lsls	r2, r3, #31
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d0d8      	beq.n	8004c7c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68d9      	ldr	r1, [r3, #12]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	2203      	movs	r2, #3
 8004ce0:	4393      	bics	r3, r2
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	639a      	str	r2, [r3, #56]	; 0x38
 8004cea:	e009      	b.n	8004d00 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004cf8:	2317      	movs	r3, #23
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2234      	movs	r2, #52	; 0x34
 8004d04:	2100      	movs	r1, #0
 8004d06:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004d08:	2317      	movs	r3, #23
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	781b      	ldrb	r3, [r3, #0]
}
 8004d0e:	0018      	movs	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b006      	add	sp, #24
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	fffffefd 	.word	0xfffffefd

08004d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	0002      	movs	r2, r0
 8004d24:	1dfb      	adds	r3, r7, #7
 8004d26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d28:	1dfb      	adds	r3, r7, #7
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d2e:	d809      	bhi.n	8004d44 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d30:	1dfb      	adds	r3, r7, #7
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	001a      	movs	r2, r3
 8004d36:	231f      	movs	r3, #31
 8004d38:	401a      	ands	r2, r3
 8004d3a:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <__NVIC_EnableIRQ+0x30>)
 8004d3c:	2101      	movs	r1, #1
 8004d3e:	4091      	lsls	r1, r2
 8004d40:	000a      	movs	r2, r1
 8004d42:	601a      	str	r2, [r3, #0]
  }
}
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	e000e100 	.word	0xe000e100

08004d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d50:	b590      	push	{r4, r7, lr}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	0002      	movs	r2, r0
 8004d58:	6039      	str	r1, [r7, #0]
 8004d5a:	1dfb      	adds	r3, r7, #7
 8004d5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d5e:	1dfb      	adds	r3, r7, #7
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b7f      	cmp	r3, #127	; 0x7f
 8004d64:	d828      	bhi.n	8004db8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d66:	4a2f      	ldr	r2, [pc, #188]	; (8004e24 <__NVIC_SetPriority+0xd4>)
 8004d68:	1dfb      	adds	r3, r7, #7
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	33c0      	adds	r3, #192	; 0xc0
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	589b      	ldr	r3, [r3, r2]
 8004d76:	1dfa      	adds	r2, r7, #7
 8004d78:	7812      	ldrb	r2, [r2, #0]
 8004d7a:	0011      	movs	r1, r2
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	400a      	ands	r2, r1
 8004d80:	00d2      	lsls	r2, r2, #3
 8004d82:	21ff      	movs	r1, #255	; 0xff
 8004d84:	4091      	lsls	r1, r2
 8004d86:	000a      	movs	r2, r1
 8004d88:	43d2      	mvns	r2, r2
 8004d8a:	401a      	ands	r2, r3
 8004d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	019b      	lsls	r3, r3, #6
 8004d92:	22ff      	movs	r2, #255	; 0xff
 8004d94:	401a      	ands	r2, r3
 8004d96:	1dfb      	adds	r3, r7, #7
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	4003      	ands	r3, r0
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004da4:	481f      	ldr	r0, [pc, #124]	; (8004e24 <__NVIC_SetPriority+0xd4>)
 8004da6:	1dfb      	adds	r3, r7, #7
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	b25b      	sxtb	r3, r3
 8004dac:	089b      	lsrs	r3, r3, #2
 8004dae:	430a      	orrs	r2, r1
 8004db0:	33c0      	adds	r3, #192	; 0xc0
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004db6:	e031      	b.n	8004e1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004db8:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <__NVIC_SetPriority+0xd8>)
 8004dba:	1dfb      	adds	r3, r7, #7
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	230f      	movs	r3, #15
 8004dc2:	400b      	ands	r3, r1
 8004dc4:	3b08      	subs	r3, #8
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	3306      	adds	r3, #6
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	18d3      	adds	r3, r2, r3
 8004dce:	3304      	adds	r3, #4
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	1dfa      	adds	r2, r7, #7
 8004dd4:	7812      	ldrb	r2, [r2, #0]
 8004dd6:	0011      	movs	r1, r2
 8004dd8:	2203      	movs	r2, #3
 8004dda:	400a      	ands	r2, r1
 8004ddc:	00d2      	lsls	r2, r2, #3
 8004dde:	21ff      	movs	r1, #255	; 0xff
 8004de0:	4091      	lsls	r1, r2
 8004de2:	000a      	movs	r2, r1
 8004de4:	43d2      	mvns	r2, r2
 8004de6:	401a      	ands	r2, r3
 8004de8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	019b      	lsls	r3, r3, #6
 8004dee:	22ff      	movs	r2, #255	; 0xff
 8004df0:	401a      	ands	r2, r3
 8004df2:	1dfb      	adds	r3, r7, #7
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	0018      	movs	r0, r3
 8004df8:	2303      	movs	r3, #3
 8004dfa:	4003      	ands	r3, r0
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e00:	4809      	ldr	r0, [pc, #36]	; (8004e28 <__NVIC_SetPriority+0xd8>)
 8004e02:	1dfb      	adds	r3, r7, #7
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	001c      	movs	r4, r3
 8004e08:	230f      	movs	r3, #15
 8004e0a:	4023      	ands	r3, r4
 8004e0c:	3b08      	subs	r3, #8
 8004e0e:	089b      	lsrs	r3, r3, #2
 8004e10:	430a      	orrs	r2, r1
 8004e12:	3306      	adds	r3, #6
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	18c3      	adds	r3, r0, r3
 8004e18:	3304      	adds	r3, #4
 8004e1a:	601a      	str	r2, [r3, #0]
}
 8004e1c:	46c0      	nop			; (mov r8, r8)
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	b003      	add	sp, #12
 8004e22:	bd90      	pop	{r4, r7, pc}
 8004e24:	e000e100 	.word	0xe000e100
 8004e28:	e000ed00 	.word	0xe000ed00

08004e2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004e30:	f3bf 8f4f 	dsb	sy
}
 8004e34:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e36:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <__NVIC_SystemReset+0x1c>)
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <__NVIC_SystemReset+0x20>)
 8004e3a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e3c:	f3bf 8f4f 	dsb	sy
}
 8004e40:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	e7fd      	b.n	8004e42 <__NVIC_SystemReset+0x16>
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	e000ed00 	.word	0xe000ed00
 8004e4c:	05fa0004 	.word	0x05fa0004

08004e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	1e5a      	subs	r2, r3, #1
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	045b      	lsls	r3, r3, #17
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d301      	bcc.n	8004e68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e64:	2301      	movs	r3, #1
 8004e66:	e010      	b.n	8004e8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <SysTick_Config+0x44>)
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	3a01      	subs	r2, #1
 8004e6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e70:	2301      	movs	r3, #1
 8004e72:	425b      	negs	r3, r3
 8004e74:	2103      	movs	r1, #3
 8004e76:	0018      	movs	r0, r3
 8004e78:	f7ff ff6a 	bl	8004d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <SysTick_Config+0x44>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e82:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <SysTick_Config+0x44>)
 8004e84:	2207      	movs	r2, #7
 8004e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b002      	add	sp, #8
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	e000e010 	.word	0xe000e010

08004e98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60b9      	str	r1, [r7, #8]
 8004ea0:	607a      	str	r2, [r7, #4]
 8004ea2:	210f      	movs	r1, #15
 8004ea4:	187b      	adds	r3, r7, r1
 8004ea6:	1c02      	adds	r2, r0, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	187b      	adds	r3, r7, r1
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	b25b      	sxtb	r3, r3
 8004eb2:	0011      	movs	r1, r2
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f7ff ff4b 	bl	8004d50 <__NVIC_SetPriority>
}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b004      	add	sp, #16
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	0002      	movs	r2, r0
 8004eca:	1dfb      	adds	r3, r7, #7
 8004ecc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ece:	1dfb      	adds	r3, r7, #7
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	b25b      	sxtb	r3, r3
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f7ff ff21 	bl	8004d1c <__NVIC_EnableIRQ>
}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b002      	add	sp, #8
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004ee6:	f7ff ffa1 	bl	8004e2c <__NVIC_SystemReset>

08004eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f7ff ffab 	bl	8004e50 <SysTick_Config>
 8004efa:	0003      	movs	r3, r0
}
 8004efc:	0018      	movs	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	b002      	add	sp, #8
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e036      	b.n	8004f88 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2221      	movs	r2, #33	; 0x21
 8004f1e:	2102      	movs	r1, #2
 8004f20:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <HAL_DMA_Init+0x8c>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f000 f9ce 	bl	800530c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2221      	movs	r2, #33	; 0x21
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	2100      	movs	r1, #0
 8004f84:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}  
 8004f88:	0018      	movs	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b004      	add	sp, #16
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	ffffc00f 	.word	0xffffc00f

08004f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
 8004fa0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2317      	movs	r3, #23
 8004fa4:	18fb      	adds	r3, r7, r3
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	5c9b      	ldrb	r3, [r3, r2]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_DMA_Start_IT+0x24>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e04f      	b.n	8005058 <HAL_DMA_Start_IT+0xc4>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	2101      	movs	r1, #1
 8004fbe:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2221      	movs	r2, #33	; 0x21
 8004fc4:	5c9b      	ldrb	r3, [r3, r2]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d13a      	bne.n	8005042 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2221      	movs	r2, #33	; 0x21
 8004fd0:	2102      	movs	r1, #2
 8004fd2:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	438a      	bics	r2, r1
 8004fe8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68b9      	ldr	r1, [r7, #8]
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 f95e 	bl	80052b2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	210e      	movs	r1, #14
 800500a:	430a      	orrs	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e00f      	b.n	8005030 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	210a      	movs	r1, #10
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2104      	movs	r1, #4
 800502c:	438a      	bics	r2, r1
 800502e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2101      	movs	r1, #1
 800503c:	430a      	orrs	r2, r1
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e007      	b.n	8005052 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2220      	movs	r2, #32
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800504a:	2317      	movs	r3, #23
 800504c:	18fb      	adds	r3, r7, r3
 800504e:	2202      	movs	r2, #2
 8005050:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8005052:	2317      	movs	r3, #23
 8005054:	18fb      	adds	r3, r7, r3
 8005056:	781b      	ldrb	r3, [r3, #0]
} 
 8005058:	0018      	movs	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	b006      	add	sp, #24
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2221      	movs	r2, #33	; 0x21
 800506c:	5c9b      	ldrb	r3, [r3, r2]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b02      	cmp	r3, #2
 8005072:	d008      	beq.n	8005086 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2204      	movs	r2, #4
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2220      	movs	r2, #32
 800507e:	2100      	movs	r1, #0
 8005080:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e020      	b.n	80050c8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	210e      	movs	r1, #14
 8005092:	438a      	bics	r2, r1
 8005094:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2101      	movs	r1, #1
 80050a2:	438a      	bics	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ae:	2101      	movs	r1, #1
 80050b0:	4091      	lsls	r1, r2
 80050b2:	000a      	movs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2221      	movs	r2, #33	; 0x21
 80050ba:	2101      	movs	r1, #1
 80050bc:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	2100      	movs	r1, #0
 80050c4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	0018      	movs	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	b002      	add	sp, #8
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050d8:	210f      	movs	r1, #15
 80050da:	187b      	adds	r3, r7, r1
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2221      	movs	r2, #33	; 0x21
 80050e4:	5c9b      	ldrb	r3, [r3, r2]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d006      	beq.n	80050fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2204      	movs	r2, #4
 80050f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80050f2:	187b      	adds	r3, r7, r1
 80050f4:	2201      	movs	r2, #1
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e028      	b.n	800514c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	210e      	movs	r1, #14
 8005106:	438a      	bics	r2, r1
 8005108:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2101      	movs	r1, #1
 8005116:	438a      	bics	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005122:	2101      	movs	r1, #1
 8005124:	4091      	lsls	r1, r2
 8005126:	000a      	movs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2221      	movs	r2, #33	; 0x21
 800512e:	2101      	movs	r1, #1
 8005130:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2220      	movs	r2, #32
 8005136:	2100      	movs	r1, #0
 8005138:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513e:	2b00      	cmp	r3, #0
 8005140:	d004      	beq.n	800514c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	0010      	movs	r0, r2
 800514a:	4798      	blx	r3
    } 
  }
  return status;
 800514c:	230f      	movs	r3, #15
 800514e:	18fb      	adds	r3, r7, r3
 8005150:	781b      	ldrb	r3, [r3, #0]
}
 8005152:	0018      	movs	r0, r3
 8005154:	46bd      	mov	sp, r7
 8005156:	b004      	add	sp, #16
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	2204      	movs	r2, #4
 8005178:	409a      	lsls	r2, r3
 800517a:	0013      	movs	r3, r2
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4013      	ands	r3, r2
 8005180:	d024      	beq.n	80051cc <HAL_DMA_IRQHandler+0x72>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2204      	movs	r2, #4
 8005186:	4013      	ands	r3, r2
 8005188:	d020      	beq.n	80051cc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2220      	movs	r2, #32
 8005192:	4013      	ands	r3, r2
 8005194:	d107      	bne.n	80051a6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2104      	movs	r1, #4
 80051a2:	438a      	bics	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	2104      	movs	r1, #4
 80051b0:	4091      	lsls	r1, r2
 80051b2:	000a      	movs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d100      	bne.n	80051c0 <HAL_DMA_IRQHandler+0x66>
 80051be:	e06a      	b.n	8005296 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	0010      	movs	r0, r2
 80051c8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80051ca:	e064      	b.n	8005296 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d0:	2202      	movs	r2, #2
 80051d2:	409a      	lsls	r2, r3
 80051d4:	0013      	movs	r3, r2
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4013      	ands	r3, r2
 80051da:	d02b      	beq.n	8005234 <HAL_DMA_IRQHandler+0xda>
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2202      	movs	r2, #2
 80051e0:	4013      	ands	r3, r2
 80051e2:	d027      	beq.n	8005234 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2220      	movs	r2, #32
 80051ec:	4013      	ands	r3, r2
 80051ee:	d10b      	bne.n	8005208 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	210a      	movs	r1, #10
 80051fc:	438a      	bics	r2, r1
 80051fe:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2221      	movs	r2, #33	; 0x21
 8005204:	2101      	movs	r1, #1
 8005206:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005210:	2102      	movs	r1, #2
 8005212:	4091      	lsls	r1, r2
 8005214:	000a      	movs	r2, r1
 8005216:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	2100      	movs	r1, #0
 800521e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	2b00      	cmp	r3, #0
 8005226:	d036      	beq.n	8005296 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	0010      	movs	r0, r2
 8005230:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005232:	e030      	b.n	8005296 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	2208      	movs	r2, #8
 800523a:	409a      	lsls	r2, r3
 800523c:	0013      	movs	r3, r2
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	4013      	ands	r3, r2
 8005242:	d028      	beq.n	8005296 <HAL_DMA_IRQHandler+0x13c>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2208      	movs	r2, #8
 8005248:	4013      	ands	r3, r2
 800524a:	d024      	beq.n	8005296 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	210e      	movs	r1, #14
 8005258:	438a      	bics	r2, r1
 800525a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005264:	2101      	movs	r1, #1
 8005266:	4091      	lsls	r1, r2
 8005268:	000a      	movs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2221      	movs	r2, #33	; 0x21
 8005276:	2101      	movs	r1, #1
 8005278:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	2100      	movs	r1, #0
 8005280:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	0010      	movs	r0, r2
 8005292:	4798      	blx	r3
    }
   }
}  
 8005294:	e7ff      	b.n	8005296 <HAL_DMA_IRQHandler+0x13c>
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	46bd      	mov	sp, r7
 800529a:	b004      	add	sp, #16
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80052aa:	0018      	movs	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b002      	add	sp, #8
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	2101      	movs	r1, #1
 80052ca:	4091      	lsls	r1, r2
 80052cc:	000a      	movs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d108      	bne.n	80052f2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052f0:	e007      	b.n	8005302 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	60da      	str	r2, [r3, #12]
}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	46bd      	mov	sp, r7
 8005306:	b004      	add	sp, #16
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a08      	ldr	r2, [pc, #32]	; (800533c <DMA_CalcBaseAndBitshift+0x30>)
 800531a:	4694      	mov	ip, r2
 800531c:	4463      	add	r3, ip
 800531e:	2114      	movs	r1, #20
 8005320:	0018      	movs	r0, r3
 8005322:	f7fa ff0d 	bl	8000140 <__udivsi3>
 8005326:	0003      	movs	r3, r0
 8005328:	009a      	lsls	r2, r3, #2
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a03      	ldr	r2, [pc, #12]	; (8005340 <DMA_CalcBaseAndBitshift+0x34>)
 8005332:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005334:	46c0      	nop			; (mov r8, r8)
 8005336:	46bd      	mov	sp, r7
 8005338:	b002      	add	sp, #8
 800533a:	bd80      	pop	{r7, pc}
 800533c:	bffdfff8 	.word	0xbffdfff8
 8005340:	40020000 	.word	0x40020000

08005344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005352:	e155      	b.n	8005600 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2101      	movs	r1, #1
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4091      	lsls	r1, r2
 800535e:	000a      	movs	r2, r1
 8005360:	4013      	ands	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d100      	bne.n	800536c <HAL_GPIO_Init+0x28>
 800536a:	e146      	b.n	80055fa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2203      	movs	r2, #3
 8005372:	4013      	ands	r3, r2
 8005374:	2b01      	cmp	r3, #1
 8005376:	d005      	beq.n	8005384 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2203      	movs	r2, #3
 800537e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005380:	2b02      	cmp	r3, #2
 8005382:	d130      	bne.n	80053e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	2203      	movs	r2, #3
 8005390:	409a      	lsls	r2, r3
 8005392:	0013      	movs	r3, r2
 8005394:	43da      	mvns	r2, r3
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	409a      	lsls	r2, r3
 80053a6:	0013      	movs	r3, r2
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053ba:	2201      	movs	r2, #1
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	409a      	lsls	r2, r3
 80053c0:	0013      	movs	r3, r2
 80053c2:	43da      	mvns	r2, r3
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4013      	ands	r3, r2
 80053c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	091b      	lsrs	r3, r3, #4
 80053d0:	2201      	movs	r2, #1
 80053d2:	401a      	ands	r2, r3
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	409a      	lsls	r2, r3
 80053d8:	0013      	movs	r3, r2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4313      	orrs	r3, r2
 80053de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2203      	movs	r2, #3
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d017      	beq.n	8005422 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	005b      	lsls	r3, r3, #1
 80053fc:	2203      	movs	r2, #3
 80053fe:	409a      	lsls	r2, r3
 8005400:	0013      	movs	r3, r2
 8005402:	43da      	mvns	r2, r3
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4013      	ands	r3, r2
 8005408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689a      	ldr	r2, [r3, #8]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	409a      	lsls	r2, r3
 8005414:	0013      	movs	r3, r2
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2203      	movs	r2, #3
 8005428:	4013      	ands	r3, r2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d123      	bne.n	8005476 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	08da      	lsrs	r2, r3, #3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3208      	adds	r2, #8
 8005436:	0092      	lsls	r2, r2, #2
 8005438:	58d3      	ldr	r3, [r2, r3]
 800543a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2207      	movs	r2, #7
 8005440:	4013      	ands	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	220f      	movs	r2, #15
 8005446:	409a      	lsls	r2, r3
 8005448:	0013      	movs	r3, r2
 800544a:	43da      	mvns	r2, r3
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4013      	ands	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	691a      	ldr	r2, [r3, #16]
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2107      	movs	r1, #7
 800545a:	400b      	ands	r3, r1
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	409a      	lsls	r2, r3
 8005460:	0013      	movs	r3, r2
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	08da      	lsrs	r2, r3, #3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	3208      	adds	r2, #8
 8005470:	0092      	lsls	r2, r2, #2
 8005472:	6939      	ldr	r1, [r7, #16]
 8005474:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	2203      	movs	r2, #3
 8005482:	409a      	lsls	r2, r3
 8005484:	0013      	movs	r3, r2
 8005486:	43da      	mvns	r2, r3
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	4013      	ands	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2203      	movs	r2, #3
 8005494:	401a      	ands	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	409a      	lsls	r2, r3
 800549c:	0013      	movs	r3, r2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	23c0      	movs	r3, #192	; 0xc0
 80054b0:	029b      	lsls	r3, r3, #10
 80054b2:	4013      	ands	r3, r2
 80054b4:	d100      	bne.n	80054b8 <HAL_GPIO_Init+0x174>
 80054b6:	e0a0      	b.n	80055fa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054b8:	4b57      	ldr	r3, [pc, #348]	; (8005618 <HAL_GPIO_Init+0x2d4>)
 80054ba:	699a      	ldr	r2, [r3, #24]
 80054bc:	4b56      	ldr	r3, [pc, #344]	; (8005618 <HAL_GPIO_Init+0x2d4>)
 80054be:	2101      	movs	r1, #1
 80054c0:	430a      	orrs	r2, r1
 80054c2:	619a      	str	r2, [r3, #24]
 80054c4:	4b54      	ldr	r3, [pc, #336]	; (8005618 <HAL_GPIO_Init+0x2d4>)
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80054d0:	4a52      	ldr	r2, [pc, #328]	; (800561c <HAL_GPIO_Init+0x2d8>)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	089b      	lsrs	r3, r3, #2
 80054d6:	3302      	adds	r3, #2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	589b      	ldr	r3, [r3, r2]
 80054dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2203      	movs	r2, #3
 80054e2:	4013      	ands	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	220f      	movs	r2, #15
 80054e8:	409a      	lsls	r2, r3
 80054ea:	0013      	movs	r3, r2
 80054ec:	43da      	mvns	r2, r3
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	4013      	ands	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	2390      	movs	r3, #144	; 0x90
 80054f8:	05db      	lsls	r3, r3, #23
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d019      	beq.n	8005532 <HAL_GPIO_Init+0x1ee>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a47      	ldr	r2, [pc, #284]	; (8005620 <HAL_GPIO_Init+0x2dc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_GPIO_Init+0x1ea>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a46      	ldr	r2, [pc, #280]	; (8005624 <HAL_GPIO_Init+0x2e0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00d      	beq.n	800552a <HAL_GPIO_Init+0x1e6>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a45      	ldr	r2, [pc, #276]	; (8005628 <HAL_GPIO_Init+0x2e4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <HAL_GPIO_Init+0x1e2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a44      	ldr	r2, [pc, #272]	; (800562c <HAL_GPIO_Init+0x2e8>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d101      	bne.n	8005522 <HAL_GPIO_Init+0x1de>
 800551e:	2304      	movs	r3, #4
 8005520:	e008      	b.n	8005534 <HAL_GPIO_Init+0x1f0>
 8005522:	2305      	movs	r3, #5
 8005524:	e006      	b.n	8005534 <HAL_GPIO_Init+0x1f0>
 8005526:	2303      	movs	r3, #3
 8005528:	e004      	b.n	8005534 <HAL_GPIO_Init+0x1f0>
 800552a:	2302      	movs	r3, #2
 800552c:	e002      	b.n	8005534 <HAL_GPIO_Init+0x1f0>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <HAL_GPIO_Init+0x1f0>
 8005532:	2300      	movs	r3, #0
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	2103      	movs	r1, #3
 8005538:	400a      	ands	r2, r1
 800553a:	0092      	lsls	r2, r2, #2
 800553c:	4093      	lsls	r3, r2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005544:	4935      	ldr	r1, [pc, #212]	; (800561c <HAL_GPIO_Init+0x2d8>)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	089b      	lsrs	r3, r3, #2
 800554a:	3302      	adds	r3, #2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005552:	4b37      	ldr	r3, [pc, #220]	; (8005630 <HAL_GPIO_Init+0x2ec>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	43da      	mvns	r2, r3
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4013      	ands	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	025b      	lsls	r3, r3, #9
 800556a:	4013      	ands	r3, r2
 800556c:	d003      	beq.n	8005576 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005576:	4b2e      	ldr	r3, [pc, #184]	; (8005630 <HAL_GPIO_Init+0x2ec>)
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800557c:	4b2c      	ldr	r3, [pc, #176]	; (8005630 <HAL_GPIO_Init+0x2ec>)
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	43da      	mvns	r2, r3
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4013      	ands	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	2380      	movs	r3, #128	; 0x80
 8005592:	029b      	lsls	r3, r3, #10
 8005594:	4013      	ands	r3, r2
 8005596:	d003      	beq.n	80055a0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80055a0:	4b23      	ldr	r3, [pc, #140]	; (8005630 <HAL_GPIO_Init+0x2ec>)
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055a6:	4b22      	ldr	r3, [pc, #136]	; (8005630 <HAL_GPIO_Init+0x2ec>)
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	43da      	mvns	r2, r3
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4013      	ands	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	035b      	lsls	r3, r3, #13
 80055be:	4013      	ands	r3, r2
 80055c0:	d003      	beq.n	80055ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80055ca:	4b19      	ldr	r3, [pc, #100]	; (8005630 <HAL_GPIO_Init+0x2ec>)
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80055d0:	4b17      	ldr	r3, [pc, #92]	; (8005630 <HAL_GPIO_Init+0x2ec>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	43da      	mvns	r2, r3
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	4013      	ands	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	039b      	lsls	r3, r3, #14
 80055e8:	4013      	ands	r3, r2
 80055ea:	d003      	beq.n	80055f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80055f4:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <HAL_GPIO_Init+0x2ec>)
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3301      	adds	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	40da      	lsrs	r2, r3
 8005608:	1e13      	subs	r3, r2, #0
 800560a:	d000      	beq.n	800560e <HAL_GPIO_Init+0x2ca>
 800560c:	e6a2      	b.n	8005354 <HAL_GPIO_Init+0x10>
  } 
}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b006      	add	sp, #24
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40021000 	.word	0x40021000
 800561c:	40010000 	.word	0x40010000
 8005620:	48000400 	.word	0x48000400
 8005624:	48000800 	.word	0x48000800
 8005628:	48000c00 	.word	0x48000c00
 800562c:	48001000 	.word	0x48001000
 8005630:	40010400 	.word	0x40010400

08005634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	000a      	movs	r2, r1
 800563e:	1cbb      	adds	r3, r7, #2
 8005640:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	1cba      	adds	r2, r7, #2
 8005648:	8812      	ldrh	r2, [r2, #0]
 800564a:	4013      	ands	r3, r2
 800564c:	d004      	beq.n	8005658 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800564e:	230f      	movs	r3, #15
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	2201      	movs	r2, #1
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	e003      	b.n	8005660 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005658:	230f      	movs	r3, #15
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005660:	230f      	movs	r3, #15
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	781b      	ldrb	r3, [r3, #0]
  }
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b004      	add	sp, #16
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	0008      	movs	r0, r1
 8005678:	0011      	movs	r1, r2
 800567a:	1cbb      	adds	r3, r7, #2
 800567c:	1c02      	adds	r2, r0, #0
 800567e:	801a      	strh	r2, [r3, #0]
 8005680:	1c7b      	adds	r3, r7, #1
 8005682:	1c0a      	adds	r2, r1, #0
 8005684:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005686:	1c7b      	adds	r3, r7, #1
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d004      	beq.n	8005698 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800568e:	1cbb      	adds	r3, r7, #2
 8005690:	881a      	ldrh	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005696:	e003      	b.n	80056a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005698:	1cbb      	adds	r3, r7, #2
 800569a:	881a      	ldrh	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056a0:	46c0      	nop			; (mov r8, r8)
 80056a2:	46bd      	mov	sp, r7
 80056a4:	b002      	add	sp, #8
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	0002      	movs	r2, r0
 80056b0:	1dbb      	adds	r3, r7, #6
 80056b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	1dba      	adds	r2, r7, #6
 80056ba:	8812      	ldrh	r2, [r2, #0]
 80056bc:	4013      	ands	r3, r2
 80056be:	d008      	beq.n	80056d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056c0:	4b06      	ldr	r3, [pc, #24]	; (80056dc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80056c2:	1dba      	adds	r2, r7, #6
 80056c4:	8812      	ldrh	r2, [r2, #0]
 80056c6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056c8:	1dbb      	adds	r3, r7, #6
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	0018      	movs	r0, r3
 80056ce:	f000 f807 	bl	80056e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	46bd      	mov	sp, r7
 80056d6:	b002      	add	sp, #8
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	46c0      	nop			; (mov r8, r8)
 80056dc:	40010400 	.word	0x40010400

080056e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	0002      	movs	r2, r0
 80056e8:	1dbb      	adds	r3, r7, #6
 80056ea:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80056ec:	46c0      	nop			; (mov r8, r8)
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b002      	add	sp, #8
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b082      	sub	sp, #8
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e082      	b.n	800580c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2241      	movs	r2, #65	; 0x41
 800570a:	5c9b      	ldrb	r3, [r3, r2]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d107      	bne.n	8005722 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2240      	movs	r2, #64	; 0x40
 8005716:	2100      	movs	r1, #0
 8005718:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	0018      	movs	r0, r3
 800571e:	f7fe f93f 	bl	80039a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2241      	movs	r2, #65	; 0x41
 8005726:	2124      	movs	r1, #36	; 0x24
 8005728:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2101      	movs	r1, #1
 8005736:	438a      	bics	r2, r1
 8005738:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4934      	ldr	r1, [pc, #208]	; (8005814 <HAL_I2C_Init+0x120>)
 8005744:	400a      	ands	r2, r1
 8005746:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4931      	ldr	r1, [pc, #196]	; (8005818 <HAL_I2C_Init+0x124>)
 8005754:	400a      	ands	r2, r1
 8005756:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d108      	bne.n	8005772 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	0209      	lsls	r1, r1, #8
 800576c:	430a      	orrs	r2, r1
 800576e:	609a      	str	r2, [r3, #8]
 8005770:	e007      	b.n	8005782 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2184      	movs	r1, #132	; 0x84
 800577c:	0209      	lsls	r1, r1, #8
 800577e:	430a      	orrs	r2, r1
 8005780:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d104      	bne.n	8005794 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2280      	movs	r2, #128	; 0x80
 8005790:	0112      	lsls	r2, r2, #4
 8005792:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	491f      	ldr	r1, [pc, #124]	; (800581c <HAL_I2C_Init+0x128>)
 80057a0:	430a      	orrs	r2, r1
 80057a2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	491a      	ldr	r1, [pc, #104]	; (8005818 <HAL_I2C_Init+0x124>)
 80057b0:	400a      	ands	r2, r1
 80057b2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	431a      	orrs	r2, r3
 80057be:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69d9      	ldr	r1, [r3, #28]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1a      	ldr	r2, [r3, #32]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2101      	movs	r1, #1
 80057ea:	430a      	orrs	r2, r1
 80057ec:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2241      	movs	r2, #65	; 0x41
 80057f8:	2120      	movs	r1, #32
 80057fa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2242      	movs	r2, #66	; 0x42
 8005806:	2100      	movs	r1, #0
 8005808:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	0018      	movs	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	b002      	add	sp, #8
 8005812:	bd80      	pop	{r7, pc}
 8005814:	f0ffffff 	.word	0xf0ffffff
 8005818:	ffff7fff 	.word	0xffff7fff
 800581c:	02008000 	.word	0x02008000

08005820 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2241      	movs	r2, #65	; 0x41
 800582e:	5c9b      	ldrb	r3, [r3, r2]
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b20      	cmp	r3, #32
 8005834:	d138      	bne.n	80058a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2240      	movs	r2, #64	; 0x40
 800583a:	5c9b      	ldrb	r3, [r3, r2]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005840:	2302      	movs	r3, #2
 8005842:	e032      	b.n	80058aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2240      	movs	r2, #64	; 0x40
 8005848:	2101      	movs	r1, #1
 800584a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2241      	movs	r2, #65	; 0x41
 8005850:	2124      	movs	r1, #36	; 0x24
 8005852:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2101      	movs	r1, #1
 8005860:	438a      	bics	r2, r1
 8005862:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4911      	ldr	r1, [pc, #68]	; (80058b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005870:	400a      	ands	r2, r1
 8005872:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6819      	ldr	r1, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2101      	movs	r1, #1
 8005890:	430a      	orrs	r2, r1
 8005892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2241      	movs	r2, #65	; 0x41
 8005898:	2120      	movs	r1, #32
 800589a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2240      	movs	r2, #64	; 0x40
 80058a0:	2100      	movs	r1, #0
 80058a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e000      	b.n	80058aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	0018      	movs	r0, r3
 80058ac:	46bd      	mov	sp, r7
 80058ae:	b002      	add	sp, #8
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	ffffefff 	.word	0xffffefff

080058b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2241      	movs	r2, #65	; 0x41
 80058c6:	5c9b      	ldrb	r3, [r3, r2]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d139      	bne.n	8005942 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2240      	movs	r2, #64	; 0x40
 80058d2:	5c9b      	ldrb	r3, [r3, r2]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058d8:	2302      	movs	r3, #2
 80058da:	e033      	b.n	8005944 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2240      	movs	r2, #64	; 0x40
 80058e0:	2101      	movs	r1, #1
 80058e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2241      	movs	r2, #65	; 0x41
 80058e8:	2124      	movs	r1, #36	; 0x24
 80058ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2101      	movs	r1, #1
 80058f8:	438a      	bics	r2, r1
 80058fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4a11      	ldr	r2, [pc, #68]	; (800594c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005908:	4013      	ands	r3, r2
 800590a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4313      	orrs	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2101      	movs	r1, #1
 800592a:	430a      	orrs	r2, r1
 800592c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2241      	movs	r2, #65	; 0x41
 8005932:	2120      	movs	r1, #32
 8005934:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2240      	movs	r2, #64	; 0x40
 800593a:	2100      	movs	r1, #0
 800593c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	e000      	b.n	8005944 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005942:	2302      	movs	r3, #2
  }
}
 8005944:	0018      	movs	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	b004      	add	sp, #16
 800594a:	bd80      	pop	{r7, pc}
 800594c:	fffff0ff 	.word	0xfffff0ff

08005950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b088      	sub	sp, #32
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	f000 fb76 	bl	8006050 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2201      	movs	r2, #1
 800596a:	4013      	ands	r3, r2
 800596c:	d100      	bne.n	8005970 <HAL_RCC_OscConfig+0x20>
 800596e:	e08e      	b.n	8005a8e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005970:	4bc5      	ldr	r3, [pc, #788]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	220c      	movs	r2, #12
 8005976:	4013      	ands	r3, r2
 8005978:	2b04      	cmp	r3, #4
 800597a:	d00e      	beq.n	800599a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800597c:	4bc2      	ldr	r3, [pc, #776]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	220c      	movs	r2, #12
 8005982:	4013      	ands	r3, r2
 8005984:	2b08      	cmp	r3, #8
 8005986:	d117      	bne.n	80059b8 <HAL_RCC_OscConfig+0x68>
 8005988:	4bbf      	ldr	r3, [pc, #764]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	23c0      	movs	r3, #192	; 0xc0
 800598e:	025b      	lsls	r3, r3, #9
 8005990:	401a      	ands	r2, r3
 8005992:	2380      	movs	r3, #128	; 0x80
 8005994:	025b      	lsls	r3, r3, #9
 8005996:	429a      	cmp	r2, r3
 8005998:	d10e      	bne.n	80059b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800599a:	4bbb      	ldr	r3, [pc, #748]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	029b      	lsls	r3, r3, #10
 80059a2:	4013      	ands	r3, r2
 80059a4:	d100      	bne.n	80059a8 <HAL_RCC_OscConfig+0x58>
 80059a6:	e071      	b.n	8005a8c <HAL_RCC_OscConfig+0x13c>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d000      	beq.n	80059b2 <HAL_RCC_OscConfig+0x62>
 80059b0:	e06c      	b.n	8005a8c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f000 fb4c 	bl	8006050 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d107      	bne.n	80059d0 <HAL_RCC_OscConfig+0x80>
 80059c0:	4bb1      	ldr	r3, [pc, #708]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4bb0      	ldr	r3, [pc, #704]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 80059c6:	2180      	movs	r1, #128	; 0x80
 80059c8:	0249      	lsls	r1, r1, #9
 80059ca:	430a      	orrs	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e02f      	b.n	8005a30 <HAL_RCC_OscConfig+0xe0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10c      	bne.n	80059f2 <HAL_RCC_OscConfig+0xa2>
 80059d8:	4bab      	ldr	r3, [pc, #684]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4baa      	ldr	r3, [pc, #680]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 80059de:	49ab      	ldr	r1, [pc, #684]	; (8005c8c <HAL_RCC_OscConfig+0x33c>)
 80059e0:	400a      	ands	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	4ba8      	ldr	r3, [pc, #672]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	4ba7      	ldr	r3, [pc, #668]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 80059ea:	49a9      	ldr	r1, [pc, #676]	; (8005c90 <HAL_RCC_OscConfig+0x340>)
 80059ec:	400a      	ands	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	e01e      	b.n	8005a30 <HAL_RCC_OscConfig+0xe0>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b05      	cmp	r3, #5
 80059f8:	d10e      	bne.n	8005a18 <HAL_RCC_OscConfig+0xc8>
 80059fa:	4ba3      	ldr	r3, [pc, #652]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4ba2      	ldr	r3, [pc, #648]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	02c9      	lsls	r1, r1, #11
 8005a04:	430a      	orrs	r2, r1
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	4b9f      	ldr	r3, [pc, #636]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b9e      	ldr	r3, [pc, #632]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005a0e:	2180      	movs	r1, #128	; 0x80
 8005a10:	0249      	lsls	r1, r1, #9
 8005a12:	430a      	orrs	r2, r1
 8005a14:	601a      	str	r2, [r3, #0]
 8005a16:	e00b      	b.n	8005a30 <HAL_RCC_OscConfig+0xe0>
 8005a18:	4b9b      	ldr	r3, [pc, #620]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	4b9a      	ldr	r3, [pc, #616]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005a1e:	499b      	ldr	r1, [pc, #620]	; (8005c8c <HAL_RCC_OscConfig+0x33c>)
 8005a20:	400a      	ands	r2, r1
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	4b98      	ldr	r3, [pc, #608]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	4b97      	ldr	r3, [pc, #604]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005a2a:	4999      	ldr	r1, [pc, #612]	; (8005c90 <HAL_RCC_OscConfig+0x340>)
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d014      	beq.n	8005a62 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a38:	f7fe fcaa 	bl	8004390 <HAL_GetTick>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a42:	f7fe fca5 	bl	8004390 <HAL_GetTick>
 8005a46:	0002      	movs	r2, r0
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b64      	cmp	r3, #100	; 0x64
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e2fd      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a54:	4b8c      	ldr	r3, [pc, #560]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d0f0      	beq.n	8005a42 <HAL_RCC_OscConfig+0xf2>
 8005a60:	e015      	b.n	8005a8e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a62:	f7fe fc95 	bl	8004390 <HAL_GetTick>
 8005a66:	0003      	movs	r3, r0
 8005a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a6c:	f7fe fc90 	bl	8004390 <HAL_GetTick>
 8005a70:	0002      	movs	r2, r0
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	; 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e2e8      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a7e:	4b82      	ldr	r3, [pc, #520]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	2380      	movs	r3, #128	; 0x80
 8005a84:	029b      	lsls	r3, r3, #10
 8005a86:	4013      	ands	r3, r2
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCC_OscConfig+0x11c>
 8005a8a:	e000      	b.n	8005a8e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2202      	movs	r2, #2
 8005a94:	4013      	ands	r3, r2
 8005a96:	d100      	bne.n	8005a9a <HAL_RCC_OscConfig+0x14a>
 8005a98:	e06c      	b.n	8005b74 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005a9a:	4b7b      	ldr	r3, [pc, #492]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	220c      	movs	r2, #12
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005aa4:	4b78      	ldr	r3, [pc, #480]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	220c      	movs	r2, #12
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d11f      	bne.n	8005af0 <HAL_RCC_OscConfig+0x1a0>
 8005ab0:	4b75      	ldr	r3, [pc, #468]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	23c0      	movs	r3, #192	; 0xc0
 8005ab6:	025b      	lsls	r3, r3, #9
 8005ab8:	401a      	ands	r2, r3
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d116      	bne.n	8005af0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ac2:	4b71      	ldr	r3, [pc, #452]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	4013      	ands	r3, r2
 8005aca:	d005      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x188>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d001      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e2bb      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad8:	4b6b      	ldr	r3, [pc, #428]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	22f8      	movs	r2, #248	; 0xf8
 8005ade:	4393      	bics	r3, r2
 8005ae0:	0019      	movs	r1, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	00da      	lsls	r2, r3, #3
 8005ae8:	4b67      	ldr	r3, [pc, #412]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005aea:	430a      	orrs	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aee:	e041      	b.n	8005b74 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d024      	beq.n	8005b42 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af8:	4b63      	ldr	r3, [pc, #396]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	4b62      	ldr	r3, [pc, #392]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005afe:	2101      	movs	r1, #1
 8005b00:	430a      	orrs	r2, r1
 8005b02:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b04:	f7fe fc44 	bl	8004390 <HAL_GetTick>
 8005b08:	0003      	movs	r3, r0
 8005b0a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b0c:	e008      	b.n	8005b20 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b0e:	f7fe fc3f 	bl	8004390 <HAL_GetTick>
 8005b12:	0002      	movs	r2, r0
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d901      	bls.n	8005b20 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e297      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b20:	4b59      	ldr	r3, [pc, #356]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2202      	movs	r2, #2
 8005b26:	4013      	ands	r3, r2
 8005b28:	d0f1      	beq.n	8005b0e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2a:	4b57      	ldr	r3, [pc, #348]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	22f8      	movs	r2, #248	; 0xf8
 8005b30:	4393      	bics	r3, r2
 8005b32:	0019      	movs	r1, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	00da      	lsls	r2, r3, #3
 8005b3a:	4b53      	ldr	r3, [pc, #332]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e018      	b.n	8005b74 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b42:	4b51      	ldr	r3, [pc, #324]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4b50      	ldr	r3, [pc, #320]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005b48:	2101      	movs	r1, #1
 8005b4a:	438a      	bics	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b4e:	f7fe fc1f 	bl	8004390 <HAL_GetTick>
 8005b52:	0003      	movs	r3, r0
 8005b54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b58:	f7fe fc1a 	bl	8004390 <HAL_GetTick>
 8005b5c:	0002      	movs	r2, r0
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e272      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b6a:	4b47      	ldr	r3, [pc, #284]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	4013      	ands	r3, r2
 8005b72:	d1f1      	bne.n	8005b58 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2208      	movs	r2, #8
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	d036      	beq.n	8005bec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d019      	beq.n	8005bba <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b86:	4b40      	ldr	r3, [pc, #256]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b8a:	4b3f      	ldr	r3, [pc, #252]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b92:	f7fe fbfd 	bl	8004390 <HAL_GetTick>
 8005b96:	0003      	movs	r3, r0
 8005b98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b9c:	f7fe fbf8 	bl	8004390 <HAL_GetTick>
 8005ba0:	0002      	movs	r2, r0
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e250      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bae:	4b36      	ldr	r3, [pc, #216]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d0f1      	beq.n	8005b9c <HAL_RCC_OscConfig+0x24c>
 8005bb8:	e018      	b.n	8005bec <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bba:	4b33      	ldr	r3, [pc, #204]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bbe:	4b32      	ldr	r3, [pc, #200]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005bc0:	2101      	movs	r1, #1
 8005bc2:	438a      	bics	r2, r1
 8005bc4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc6:	f7fe fbe3 	bl	8004390 <HAL_GetTick>
 8005bca:	0003      	movs	r3, r0
 8005bcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd0:	f7fe fbde 	bl	8004390 <HAL_GetTick>
 8005bd4:	0002      	movs	r2, r0
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e236      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005be2:	4b29      	ldr	r3, [pc, #164]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	2202      	movs	r2, #2
 8005be8:	4013      	ands	r3, r2
 8005bea:	d1f1      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	d100      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x2a8>
 8005bf6:	e0b5      	b.n	8005d64 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf8:	201f      	movs	r0, #31
 8005bfa:	183b      	adds	r3, r7, r0
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c00:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	055b      	lsls	r3, r3, #21
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d110      	bne.n	8005c2e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c0c:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005c0e:	69da      	ldr	r2, [r3, #28]
 8005c10:	4b1d      	ldr	r3, [pc, #116]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005c12:	2180      	movs	r1, #128	; 0x80
 8005c14:	0549      	lsls	r1, r1, #21
 8005c16:	430a      	orrs	r2, r1
 8005c18:	61da      	str	r2, [r3, #28]
 8005c1a:	4b1b      	ldr	r3, [pc, #108]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	055b      	lsls	r3, r3, #21
 8005c22:	4013      	ands	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c28:	183b      	adds	r3, r7, r0
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2e:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <HAL_RCC_OscConfig+0x344>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	4013      	ands	r3, r2
 8005c38:	d11a      	bne.n	8005c70 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c3a:	4b16      	ldr	r3, [pc, #88]	; (8005c94 <HAL_RCC_OscConfig+0x344>)
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <HAL_RCC_OscConfig+0x344>)
 8005c40:	2180      	movs	r1, #128	; 0x80
 8005c42:	0049      	lsls	r1, r1, #1
 8005c44:	430a      	orrs	r2, r1
 8005c46:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c48:	f7fe fba2 	bl	8004390 <HAL_GetTick>
 8005c4c:	0003      	movs	r3, r0
 8005c4e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c52:	f7fe fb9d 	bl	8004390 <HAL_GetTick>
 8005c56:	0002      	movs	r2, r0
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b64      	cmp	r3, #100	; 0x64
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e1f5      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <HAL_RCC_OscConfig+0x344>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d10f      	bne.n	8005c98 <HAL_RCC_OscConfig+0x348>
 8005c78:	4b03      	ldr	r3, [pc, #12]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005c7a:	6a1a      	ldr	r2, [r3, #32]
 8005c7c:	4b02      	ldr	r3, [pc, #8]	; (8005c88 <HAL_RCC_OscConfig+0x338>)
 8005c7e:	2101      	movs	r1, #1
 8005c80:	430a      	orrs	r2, r1
 8005c82:	621a      	str	r2, [r3, #32]
 8005c84:	e036      	b.n	8005cf4 <HAL_RCC_OscConfig+0x3a4>
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	fffeffff 	.word	0xfffeffff
 8005c90:	fffbffff 	.word	0xfffbffff
 8005c94:	40007000 	.word	0x40007000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d10c      	bne.n	8005cba <HAL_RCC_OscConfig+0x36a>
 8005ca0:	4bca      	ldr	r3, [pc, #808]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005ca2:	6a1a      	ldr	r2, [r3, #32]
 8005ca4:	4bc9      	ldr	r3, [pc, #804]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	438a      	bics	r2, r1
 8005caa:	621a      	str	r2, [r3, #32]
 8005cac:	4bc7      	ldr	r3, [pc, #796]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005cae:	6a1a      	ldr	r2, [r3, #32]
 8005cb0:	4bc6      	ldr	r3, [pc, #792]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005cb2:	2104      	movs	r1, #4
 8005cb4:	438a      	bics	r2, r1
 8005cb6:	621a      	str	r2, [r3, #32]
 8005cb8:	e01c      	b.n	8005cf4 <HAL_RCC_OscConfig+0x3a4>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d10c      	bne.n	8005cdc <HAL_RCC_OscConfig+0x38c>
 8005cc2:	4bc2      	ldr	r3, [pc, #776]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	4bc1      	ldr	r3, [pc, #772]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005cc8:	2104      	movs	r1, #4
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	621a      	str	r2, [r3, #32]
 8005cce:	4bbf      	ldr	r3, [pc, #764]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005cd0:	6a1a      	ldr	r2, [r3, #32]
 8005cd2:	4bbe      	ldr	r3, [pc, #760]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005cd4:	2101      	movs	r1, #1
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	621a      	str	r2, [r3, #32]
 8005cda:	e00b      	b.n	8005cf4 <HAL_RCC_OscConfig+0x3a4>
 8005cdc:	4bbb      	ldr	r3, [pc, #748]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005cde:	6a1a      	ldr	r2, [r3, #32]
 8005ce0:	4bba      	ldr	r3, [pc, #744]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	438a      	bics	r2, r1
 8005ce6:	621a      	str	r2, [r3, #32]
 8005ce8:	4bb8      	ldr	r3, [pc, #736]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005cea:	6a1a      	ldr	r2, [r3, #32]
 8005cec:	4bb7      	ldr	r3, [pc, #732]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005cee:	2104      	movs	r1, #4
 8005cf0:	438a      	bics	r2, r1
 8005cf2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d014      	beq.n	8005d26 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cfc:	f7fe fb48 	bl	8004390 <HAL_GetTick>
 8005d00:	0003      	movs	r3, r0
 8005d02:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d04:	e009      	b.n	8005d1a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d06:	f7fe fb43 	bl	8004390 <HAL_GetTick>
 8005d0a:	0002      	movs	r2, r0
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	4aaf      	ldr	r2, [pc, #700]	; (8005fd0 <HAL_RCC_OscConfig+0x680>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e19a      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1a:	4bac      	ldr	r3, [pc, #688]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	4013      	ands	r3, r2
 8005d22:	d0f0      	beq.n	8005d06 <HAL_RCC_OscConfig+0x3b6>
 8005d24:	e013      	b.n	8005d4e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d26:	f7fe fb33 	bl	8004390 <HAL_GetTick>
 8005d2a:	0003      	movs	r3, r0
 8005d2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d2e:	e009      	b.n	8005d44 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d30:	f7fe fb2e 	bl	8004390 <HAL_GetTick>
 8005d34:	0002      	movs	r2, r0
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	4aa5      	ldr	r2, [pc, #660]	; (8005fd0 <HAL_RCC_OscConfig+0x680>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d901      	bls.n	8005d44 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e185      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d44:	4ba1      	ldr	r3, [pc, #644]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	2202      	movs	r2, #2
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d1f0      	bne.n	8005d30 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d4e:	231f      	movs	r3, #31
 8005d50:	18fb      	adds	r3, r7, r3
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d105      	bne.n	8005d64 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d58:	4b9c      	ldr	r3, [pc, #624]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	4b9b      	ldr	r3, [pc, #620]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005d5e:	499d      	ldr	r1, [pc, #628]	; (8005fd4 <HAL_RCC_OscConfig+0x684>)
 8005d60:	400a      	ands	r2, r1
 8005d62:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2210      	movs	r2, #16
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	d063      	beq.n	8005e36 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d12a      	bne.n	8005dcc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005d76:	4b95      	ldr	r3, [pc, #596]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d7a:	4b94      	ldr	r3, [pc, #592]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005d82:	4b92      	ldr	r3, [pc, #584]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d86:	4b91      	ldr	r3, [pc, #580]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005d88:	2101      	movs	r1, #1
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d8e:	f7fe faff 	bl	8004390 <HAL_GetTick>
 8005d92:	0003      	movs	r3, r0
 8005d94:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005d98:	f7fe fafa 	bl	8004390 <HAL_GetTick>
 8005d9c:	0002      	movs	r2, r0
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e152      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005daa:	4b88      	ldr	r3, [pc, #544]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	2202      	movs	r2, #2
 8005db0:	4013      	ands	r3, r2
 8005db2:	d0f1      	beq.n	8005d98 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005db4:	4b85      	ldr	r3, [pc, #532]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db8:	22f8      	movs	r2, #248	; 0xf8
 8005dba:	4393      	bics	r3, r2
 8005dbc:	0019      	movs	r1, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	699b      	ldr	r3, [r3, #24]
 8005dc2:	00da      	lsls	r2, r3, #3
 8005dc4:	4b81      	ldr	r3, [pc, #516]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8005dca:	e034      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	3305      	adds	r3, #5
 8005dd2:	d111      	bne.n	8005df8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005dd4:	4b7d      	ldr	r3, [pc, #500]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dd8:	4b7c      	ldr	r3, [pc, #496]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005dda:	2104      	movs	r1, #4
 8005ddc:	438a      	bics	r2, r1
 8005dde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005de0:	4b7a      	ldr	r3, [pc, #488]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de4:	22f8      	movs	r2, #248	; 0xf8
 8005de6:	4393      	bics	r3, r2
 8005de8:	0019      	movs	r1, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	00da      	lsls	r2, r3, #3
 8005df0:	4b76      	ldr	r3, [pc, #472]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005df2:	430a      	orrs	r2, r1
 8005df4:	635a      	str	r2, [r3, #52]	; 0x34
 8005df6:	e01e      	b.n	8005e36 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005df8:	4b74      	ldr	r3, [pc, #464]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dfc:	4b73      	ldr	r3, [pc, #460]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005dfe:	2104      	movs	r1, #4
 8005e00:	430a      	orrs	r2, r1
 8005e02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005e04:	4b71      	ldr	r3, [pc, #452]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e08:	4b70      	ldr	r3, [pc, #448]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	438a      	bics	r2, r1
 8005e0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e10:	f7fe fabe 	bl	8004390 <HAL_GetTick>
 8005e14:	0003      	movs	r3, r0
 8005e16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005e1a:	f7fe fab9 	bl	8004390 <HAL_GetTick>
 8005e1e:	0002      	movs	r2, r0
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e111      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005e2c:	4b67      	ldr	r3, [pc, #412]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e30:	2202      	movs	r2, #2
 8005e32:	4013      	ands	r3, r2
 8005e34:	d1f1      	bne.n	8005e1a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d05c      	beq.n	8005efa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005e40:	4b62      	ldr	r3, [pc, #392]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	220c      	movs	r2, #12
 8005e46:	4013      	ands	r3, r2
 8005e48:	2b0c      	cmp	r3, #12
 8005e4a:	d00e      	beq.n	8005e6a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005e4c:	4b5f      	ldr	r3, [pc, #380]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	220c      	movs	r2, #12
 8005e52:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d114      	bne.n	8005e82 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005e58:	4b5c      	ldr	r3, [pc, #368]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	23c0      	movs	r3, #192	; 0xc0
 8005e5e:	025b      	lsls	r3, r3, #9
 8005e60:	401a      	ands	r2, r3
 8005e62:	23c0      	movs	r3, #192	; 0xc0
 8005e64:	025b      	lsls	r3, r3, #9
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d10b      	bne.n	8005e82 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005e6a:	4b58      	ldr	r3, [pc, #352]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e6e:	2380      	movs	r3, #128	; 0x80
 8005e70:	025b      	lsls	r3, r3, #9
 8005e72:	4013      	ands	r3, r2
 8005e74:	d040      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x5a8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d03c      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e0e6      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d01b      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005e8a:	4b50      	ldr	r3, [pc, #320]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e8e:	4b4f      	ldr	r3, [pc, #316]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005e90:	2180      	movs	r1, #128	; 0x80
 8005e92:	0249      	lsls	r1, r1, #9
 8005e94:	430a      	orrs	r2, r1
 8005e96:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e98:	f7fe fa7a 	bl	8004390 <HAL_GetTick>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005ea0:	e008      	b.n	8005eb4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ea2:	f7fe fa75 	bl	8004390 <HAL_GetTick>
 8005ea6:	0002      	movs	r2, r0
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d901      	bls.n	8005eb4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e0cd      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005eb4:	4b45      	ldr	r3, [pc, #276]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb8:	2380      	movs	r3, #128	; 0x80
 8005eba:	025b      	lsls	r3, r3, #9
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d0f0      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x552>
 8005ec0:	e01b      	b.n	8005efa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005ec2:	4b42      	ldr	r3, [pc, #264]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec6:	4b41      	ldr	r3, [pc, #260]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005ec8:	4943      	ldr	r1, [pc, #268]	; (8005fd8 <HAL_RCC_OscConfig+0x688>)
 8005eca:	400a      	ands	r2, r1
 8005ecc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ece:	f7fe fa5f 	bl	8004390 <HAL_GetTick>
 8005ed2:	0003      	movs	r3, r0
 8005ed4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ed8:	f7fe fa5a 	bl	8004390 <HAL_GetTick>
 8005edc:	0002      	movs	r2, r0
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e0b2      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005eea:	4b38      	ldr	r3, [pc, #224]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eee:	2380      	movs	r3, #128	; 0x80
 8005ef0:	025b      	lsls	r3, r3, #9
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d1f0      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x588>
 8005ef6:	e000      	b.n	8005efa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005ef8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d100      	bne.n	8005f04 <HAL_RCC_OscConfig+0x5b4>
 8005f02:	e0a4      	b.n	800604e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f04:	4b31      	ldr	r3, [pc, #196]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	220c      	movs	r2, #12
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d100      	bne.n	8005f12 <HAL_RCC_OscConfig+0x5c2>
 8005f10:	e078      	b.n	8006004 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d14c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f1a:	4b2c      	ldr	r3, [pc, #176]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005f20:	492e      	ldr	r1, [pc, #184]	; (8005fdc <HAL_RCC_OscConfig+0x68c>)
 8005f22:	400a      	ands	r2, r1
 8005f24:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f26:	f7fe fa33 	bl	8004390 <HAL_GetTick>
 8005f2a:	0003      	movs	r3, r0
 8005f2c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f30:	f7fe fa2e 	bl	8004390 <HAL_GetTick>
 8005f34:	0002      	movs	r2, r0
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e086      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005f42:	4b22      	ldr	r3, [pc, #136]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	2380      	movs	r3, #128	; 0x80
 8005f48:	049b      	lsls	r3, r3, #18
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	d1f0      	bne.n	8005f30 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f4e:	4b1f      	ldr	r3, [pc, #124]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	220f      	movs	r2, #15
 8005f54:	4393      	bics	r3, r2
 8005f56:	0019      	movs	r1, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f5c:	4b1b      	ldr	r3, [pc, #108]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	62da      	str	r2, [r3, #44]	; 0x2c
 8005f62:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4a1e      	ldr	r2, [pc, #120]	; (8005fe0 <HAL_RCC_OscConfig+0x690>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	0019      	movs	r1, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	431a      	orrs	r2, r3
 8005f76:	4b15      	ldr	r3, [pc, #84]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f7c:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b12      	ldr	r3, [pc, #72]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005f82:	2180      	movs	r1, #128	; 0x80
 8005f84:	0449      	lsls	r1, r1, #17
 8005f86:	430a      	orrs	r2, r1
 8005f88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8a:	f7fe fa01 	bl	8004390 <HAL_GetTick>
 8005f8e:	0003      	movs	r3, r0
 8005f90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f94:	f7fe f9fc 	bl	8004390 <HAL_GetTick>
 8005f98:	0002      	movs	r2, r0
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e054      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005fa6:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	2380      	movs	r3, #128	; 0x80
 8005fac:	049b      	lsls	r3, r3, #18
 8005fae:	4013      	ands	r3, r2
 8005fb0:	d0f0      	beq.n	8005f94 <HAL_RCC_OscConfig+0x644>
 8005fb2:	e04c      	b.n	800604e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fb4:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <HAL_RCC_OscConfig+0x67c>)
 8005fba:	4908      	ldr	r1, [pc, #32]	; (8005fdc <HAL_RCC_OscConfig+0x68c>)
 8005fbc:	400a      	ands	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc0:	f7fe f9e6 	bl	8004390 <HAL_GetTick>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fc8:	e015      	b.n	8005ff6 <HAL_RCC_OscConfig+0x6a6>
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	00001388 	.word	0x00001388
 8005fd4:	efffffff 	.word	0xefffffff
 8005fd8:	fffeffff 	.word	0xfffeffff
 8005fdc:	feffffff 	.word	0xfeffffff
 8005fe0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe4:	f7fe f9d4 	bl	8004390 <HAL_GetTick>
 8005fe8:	0002      	movs	r2, r0
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e02c      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ff6:	4b18      	ldr	r3, [pc, #96]	; (8006058 <HAL_RCC_OscConfig+0x708>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	2380      	movs	r3, #128	; 0x80
 8005ffc:	049b      	lsls	r3, r3, #18
 8005ffe:	4013      	ands	r3, r2
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x694>
 8006002:	e024      	b.n	800604e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e01f      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006010:	4b11      	ldr	r3, [pc, #68]	; (8006058 <HAL_RCC_OscConfig+0x708>)
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006016:	4b10      	ldr	r3, [pc, #64]	; (8006058 <HAL_RCC_OscConfig+0x708>)
 8006018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	23c0      	movs	r3, #192	; 0xc0
 8006020:	025b      	lsls	r3, r3, #9
 8006022:	401a      	ands	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	429a      	cmp	r2, r3
 800602a:	d10e      	bne.n	800604a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	220f      	movs	r2, #15
 8006030:	401a      	ands	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006036:	429a      	cmp	r2, r3
 8006038:	d107      	bne.n	800604a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	23f0      	movs	r3, #240	; 0xf0
 800603e:	039b      	lsls	r3, r3, #14
 8006040:	401a      	ands	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006046:	429a      	cmp	r2, r3
 8006048:	d001      	beq.n	800604e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	0018      	movs	r0, r3
 8006052:	46bd      	mov	sp, r7
 8006054:	b008      	add	sp, #32
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40021000 	.word	0x40021000

0800605c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e0bf      	b.n	80061f0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006070:	4b61      	ldr	r3, [pc, #388]	; (80061f8 <HAL_RCC_ClockConfig+0x19c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2201      	movs	r2, #1
 8006076:	4013      	ands	r3, r2
 8006078:	683a      	ldr	r2, [r7, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d911      	bls.n	80060a2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800607e:	4b5e      	ldr	r3, [pc, #376]	; (80061f8 <HAL_RCC_ClockConfig+0x19c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2201      	movs	r2, #1
 8006084:	4393      	bics	r3, r2
 8006086:	0019      	movs	r1, r3
 8006088:	4b5b      	ldr	r3, [pc, #364]	; (80061f8 <HAL_RCC_ClockConfig+0x19c>)
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006090:	4b59      	ldr	r3, [pc, #356]	; (80061f8 <HAL_RCC_ClockConfig+0x19c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2201      	movs	r2, #1
 8006096:	4013      	ands	r3, r2
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	429a      	cmp	r2, r3
 800609c:	d001      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e0a6      	b.n	80061f0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2202      	movs	r2, #2
 80060a8:	4013      	ands	r3, r2
 80060aa:	d015      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2204      	movs	r2, #4
 80060b2:	4013      	ands	r3, r2
 80060b4:	d006      	beq.n	80060c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80060b6:	4b51      	ldr	r3, [pc, #324]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	4b50      	ldr	r3, [pc, #320]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 80060bc:	21e0      	movs	r1, #224	; 0xe0
 80060be:	00c9      	lsls	r1, r1, #3
 80060c0:	430a      	orrs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c4:	4b4d      	ldr	r3, [pc, #308]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	22f0      	movs	r2, #240	; 0xf0
 80060ca:	4393      	bics	r3, r2
 80060cc:	0019      	movs	r1, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	4b4a      	ldr	r3, [pc, #296]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 80060d4:	430a      	orrs	r2, r1
 80060d6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2201      	movs	r2, #1
 80060de:	4013      	ands	r3, r2
 80060e0:	d04c      	beq.n	800617c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d107      	bne.n	80060fa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ea:	4b44      	ldr	r3, [pc, #272]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	2380      	movs	r3, #128	; 0x80
 80060f0:	029b      	lsls	r3, r3, #10
 80060f2:	4013      	ands	r3, r2
 80060f4:	d120      	bne.n	8006138 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e07a      	b.n	80061f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d107      	bne.n	8006112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006102:	4b3e      	ldr	r3, [pc, #248]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	2380      	movs	r3, #128	; 0x80
 8006108:	049b      	lsls	r3, r3, #18
 800610a:	4013      	ands	r3, r2
 800610c:	d114      	bne.n	8006138 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e06e      	b.n	80061f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2b03      	cmp	r3, #3
 8006118:	d107      	bne.n	800612a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800611a:	4b38      	ldr	r3, [pc, #224]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 800611c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	025b      	lsls	r3, r3, #9
 8006122:	4013      	ands	r3, r2
 8006124:	d108      	bne.n	8006138 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e062      	b.n	80061f0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800612a:	4b34      	ldr	r3, [pc, #208]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2202      	movs	r2, #2
 8006130:	4013      	ands	r3, r2
 8006132:	d101      	bne.n	8006138 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e05b      	b.n	80061f0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006138:	4b30      	ldr	r3, [pc, #192]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2203      	movs	r2, #3
 800613e:	4393      	bics	r3, r2
 8006140:	0019      	movs	r1, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	4b2d      	ldr	r3, [pc, #180]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 8006148:	430a      	orrs	r2, r1
 800614a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800614c:	f7fe f920 	bl	8004390 <HAL_GetTick>
 8006150:	0003      	movs	r3, r0
 8006152:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006154:	e009      	b.n	800616a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006156:	f7fe f91b 	bl	8004390 <HAL_GetTick>
 800615a:	0002      	movs	r2, r0
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	4a27      	ldr	r2, [pc, #156]	; (8006200 <HAL_RCC_ClockConfig+0x1a4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e042      	b.n	80061f0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616a:	4b24      	ldr	r3, [pc, #144]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	220c      	movs	r2, #12
 8006170:	401a      	ands	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	429a      	cmp	r2, r3
 800617a:	d1ec      	bne.n	8006156 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800617c:	4b1e      	ldr	r3, [pc, #120]	; (80061f8 <HAL_RCC_ClockConfig+0x19c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2201      	movs	r2, #1
 8006182:	4013      	ands	r3, r2
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d211      	bcs.n	80061ae <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618a:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <HAL_RCC_ClockConfig+0x19c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2201      	movs	r2, #1
 8006190:	4393      	bics	r3, r2
 8006192:	0019      	movs	r1, r3
 8006194:	4b18      	ldr	r3, [pc, #96]	; (80061f8 <HAL_RCC_ClockConfig+0x19c>)
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800619c:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <HAL_RCC_ClockConfig+0x19c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2201      	movs	r2, #1
 80061a2:	4013      	ands	r3, r2
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d001      	beq.n	80061ae <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e020      	b.n	80061f0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2204      	movs	r2, #4
 80061b4:	4013      	ands	r3, r2
 80061b6:	d009      	beq.n	80061cc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80061b8:	4b10      	ldr	r3, [pc, #64]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4a11      	ldr	r2, [pc, #68]	; (8006204 <HAL_RCC_ClockConfig+0x1a8>)
 80061be:	4013      	ands	r3, r2
 80061c0:	0019      	movs	r1, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80061cc:	f000 f820 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 80061d0:	0001      	movs	r1, r0
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <HAL_RCC_ClockConfig+0x1a0>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	091b      	lsrs	r3, r3, #4
 80061d8:	220f      	movs	r2, #15
 80061da:	4013      	ands	r3, r2
 80061dc:	4a0a      	ldr	r2, [pc, #40]	; (8006208 <HAL_RCC_ClockConfig+0x1ac>)
 80061de:	5cd3      	ldrb	r3, [r2, r3]
 80061e0:	000a      	movs	r2, r1
 80061e2:	40da      	lsrs	r2, r3
 80061e4:	4b09      	ldr	r3, [pc, #36]	; (800620c <HAL_RCC_ClockConfig+0x1b0>)
 80061e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80061e8:	2000      	movs	r0, #0
 80061ea:	f7fe f88b 	bl	8004304 <HAL_InitTick>
  
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	0018      	movs	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b004      	add	sp, #16
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40022000 	.word	0x40022000
 80061fc:	40021000 	.word	0x40021000
 8006200:	00001388 	.word	0x00001388
 8006204:	fffff8ff 	.word	0xfffff8ff
 8006208:	0800c244 	.word	0x0800c244
 800620c:	20000008 	.word	0x20000008

08006210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b08f      	sub	sp, #60	; 0x3c
 8006214:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006216:	2314      	movs	r3, #20
 8006218:	18fb      	adds	r3, r7, r3
 800621a:	4a38      	ldr	r2, [pc, #224]	; (80062fc <HAL_RCC_GetSysClockFreq+0xec>)
 800621c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800621e:	c313      	stmia	r3!, {r0, r1, r4}
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006224:	1d3b      	adds	r3, r7, #4
 8006226:	4a36      	ldr	r2, [pc, #216]	; (8006300 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006228:	ca13      	ldmia	r2!, {r0, r1, r4}
 800622a:	c313      	stmia	r3!, {r0, r1, r4}
 800622c:	6812      	ldr	r2, [r2, #0]
 800622e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006234:	2300      	movs	r3, #0
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28
 8006238:	2300      	movs	r3, #0
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
 800623c:	2300      	movs	r3, #0
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006244:	4b2f      	ldr	r3, [pc, #188]	; (8006304 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	220c      	movs	r2, #12
 800624e:	4013      	ands	r3, r2
 8006250:	2b0c      	cmp	r3, #12
 8006252:	d047      	beq.n	80062e4 <HAL_RCC_GetSysClockFreq+0xd4>
 8006254:	d849      	bhi.n	80062ea <HAL_RCC_GetSysClockFreq+0xda>
 8006256:	2b04      	cmp	r3, #4
 8006258:	d002      	beq.n	8006260 <HAL_RCC_GetSysClockFreq+0x50>
 800625a:	2b08      	cmp	r3, #8
 800625c:	d003      	beq.n	8006266 <HAL_RCC_GetSysClockFreq+0x56>
 800625e:	e044      	b.n	80062ea <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006260:	4b29      	ldr	r3, [pc, #164]	; (8006308 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006262:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006264:	e044      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	0c9b      	lsrs	r3, r3, #18
 800626a:	220f      	movs	r2, #15
 800626c:	4013      	ands	r3, r2
 800626e:	2214      	movs	r2, #20
 8006270:	18ba      	adds	r2, r7, r2
 8006272:	5cd3      	ldrb	r3, [r2, r3]
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006276:	4b23      	ldr	r3, [pc, #140]	; (8006304 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	220f      	movs	r2, #15
 800627c:	4013      	ands	r3, r2
 800627e:	1d3a      	adds	r2, r7, #4
 8006280:	5cd3      	ldrb	r3, [r2, r3]
 8006282:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006286:	23c0      	movs	r3, #192	; 0xc0
 8006288:	025b      	lsls	r3, r3, #9
 800628a:	401a      	ands	r2, r3
 800628c:	2380      	movs	r3, #128	; 0x80
 800628e:	025b      	lsls	r3, r3, #9
 8006290:	429a      	cmp	r2, r3
 8006292:	d109      	bne.n	80062a8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006296:	481c      	ldr	r0, [pc, #112]	; (8006308 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006298:	f7f9 ff52 	bl	8000140 <__udivsi3>
 800629c:	0003      	movs	r3, r0
 800629e:	001a      	movs	r2, r3
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	4353      	muls	r3, r2
 80062a4:	637b      	str	r3, [r7, #52]	; 0x34
 80062a6:	e01a      	b.n	80062de <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80062a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062aa:	23c0      	movs	r3, #192	; 0xc0
 80062ac:	025b      	lsls	r3, r3, #9
 80062ae:	401a      	ands	r2, r3
 80062b0:	23c0      	movs	r3, #192	; 0xc0
 80062b2:	025b      	lsls	r3, r3, #9
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d109      	bne.n	80062cc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80062b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ba:	4814      	ldr	r0, [pc, #80]	; (800630c <HAL_RCC_GetSysClockFreq+0xfc>)
 80062bc:	f7f9 ff40 	bl	8000140 <__udivsi3>
 80062c0:	0003      	movs	r3, r0
 80062c2:	001a      	movs	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	4353      	muls	r3, r2
 80062c8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ca:	e008      	b.n	80062de <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80062cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ce:	480e      	ldr	r0, [pc, #56]	; (8006308 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062d0:	f7f9 ff36 	bl	8000140 <__udivsi3>
 80062d4:	0003      	movs	r3, r0
 80062d6:	001a      	movs	r2, r3
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	4353      	muls	r3, r2
 80062dc:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80062e2:	e005      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80062e4:	4b09      	ldr	r3, [pc, #36]	; (800630c <HAL_RCC_GetSysClockFreq+0xfc>)
 80062e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80062e8:	e002      	b.n	80062f0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80062ea:	4b07      	ldr	r3, [pc, #28]	; (8006308 <HAL_RCC_GetSysClockFreq+0xf8>)
 80062ec:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80062ee:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80062f2:	0018      	movs	r0, r3
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b00f      	add	sp, #60	; 0x3c
 80062f8:	bd90      	pop	{r4, r7, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	0800c1a4 	.word	0x0800c1a4
 8006300:	0800c1b4 	.word	0x0800c1b4
 8006304:	40021000 	.word	0x40021000
 8006308:	007a1200 	.word	0x007a1200
 800630c:	02dc6c00 	.word	0x02dc6c00

08006310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006314:	4b02      	ldr	r3, [pc, #8]	; (8006320 <HAL_RCC_GetHCLKFreq+0x10>)
 8006316:	681b      	ldr	r3, [r3, #0]
}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	46c0      	nop			; (mov r8, r8)
 8006320:	20000008 	.word	0x20000008

08006324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006328:	f7ff fff2 	bl	8006310 <HAL_RCC_GetHCLKFreq>
 800632c:	0001      	movs	r1, r0
 800632e:	4b06      	ldr	r3, [pc, #24]	; (8006348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	2207      	movs	r2, #7
 8006336:	4013      	ands	r3, r2
 8006338:	4a04      	ldr	r2, [pc, #16]	; (800634c <HAL_RCC_GetPCLK1Freq+0x28>)
 800633a:	5cd3      	ldrb	r3, [r2, r3]
 800633c:	40d9      	lsrs	r1, r3
 800633e:	000b      	movs	r3, r1
}    
 8006340:	0018      	movs	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	46c0      	nop			; (mov r8, r8)
 8006348:	40021000 	.word	0x40021000
 800634c:	0800c254 	.word	0x0800c254

08006350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	2380      	movs	r3, #128	; 0x80
 8006366:	025b      	lsls	r3, r3, #9
 8006368:	4013      	ands	r3, r2
 800636a:	d100      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800636c:	e08e      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800636e:	2017      	movs	r0, #23
 8006370:	183b      	adds	r3, r7, r0
 8006372:	2200      	movs	r2, #0
 8006374:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006376:	4b6e      	ldr	r3, [pc, #440]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006378:	69da      	ldr	r2, [r3, #28]
 800637a:	2380      	movs	r3, #128	; 0x80
 800637c:	055b      	lsls	r3, r3, #21
 800637e:	4013      	ands	r3, r2
 8006380:	d110      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006382:	4b6b      	ldr	r3, [pc, #428]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006384:	69da      	ldr	r2, [r3, #28]
 8006386:	4b6a      	ldr	r3, [pc, #424]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006388:	2180      	movs	r1, #128	; 0x80
 800638a:	0549      	lsls	r1, r1, #21
 800638c:	430a      	orrs	r2, r1
 800638e:	61da      	str	r2, [r3, #28]
 8006390:	4b67      	ldr	r3, [pc, #412]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006392:	69da      	ldr	r2, [r3, #28]
 8006394:	2380      	movs	r3, #128	; 0x80
 8006396:	055b      	lsls	r3, r3, #21
 8006398:	4013      	ands	r3, r2
 800639a:	60bb      	str	r3, [r7, #8]
 800639c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800639e:	183b      	adds	r3, r7, r0
 80063a0:	2201      	movs	r2, #1
 80063a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a4:	4b63      	ldr	r3, [pc, #396]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	2380      	movs	r3, #128	; 0x80
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	4013      	ands	r3, r2
 80063ae:	d11a      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063b0:	4b60      	ldr	r3, [pc, #384]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	4b5f      	ldr	r3, [pc, #380]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80063b6:	2180      	movs	r1, #128	; 0x80
 80063b8:	0049      	lsls	r1, r1, #1
 80063ba:	430a      	orrs	r2, r1
 80063bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063be:	f7fd ffe7 	bl	8004390 <HAL_GetTick>
 80063c2:	0003      	movs	r3, r0
 80063c4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063c6:	e008      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063c8:	f7fd ffe2 	bl	8004390 <HAL_GetTick>
 80063cc:	0002      	movs	r2, r0
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b64      	cmp	r3, #100	; 0x64
 80063d4:	d901      	bls.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e0a6      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063da:	4b56      	ldr	r3, [pc, #344]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	2380      	movs	r3, #128	; 0x80
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	4013      	ands	r3, r2
 80063e4:	d0f0      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063e6:	4b52      	ldr	r3, [pc, #328]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80063e8:	6a1a      	ldr	r2, [r3, #32]
 80063ea:	23c0      	movs	r3, #192	; 0xc0
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4013      	ands	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d034      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	23c0      	movs	r3, #192	; 0xc0
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4013      	ands	r3, r2
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	429a      	cmp	r2, r3
 8006406:	d02c      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006408:	4b49      	ldr	r3, [pc, #292]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	4a4a      	ldr	r2, [pc, #296]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800640e:	4013      	ands	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006412:	4b47      	ldr	r3, [pc, #284]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006414:	6a1a      	ldr	r2, [r3, #32]
 8006416:	4b46      	ldr	r3, [pc, #280]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006418:	2180      	movs	r1, #128	; 0x80
 800641a:	0249      	lsls	r1, r1, #9
 800641c:	430a      	orrs	r2, r1
 800641e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006420:	4b43      	ldr	r3, [pc, #268]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006422:	6a1a      	ldr	r2, [r3, #32]
 8006424:	4b42      	ldr	r3, [pc, #264]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006426:	4945      	ldr	r1, [pc, #276]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006428:	400a      	ands	r2, r1
 800642a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800642c:	4b40      	ldr	r3, [pc, #256]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	4013      	ands	r3, r2
 8006438:	d013      	beq.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643a:	f7fd ffa9 	bl	8004390 <HAL_GetTick>
 800643e:	0003      	movs	r3, r0
 8006440:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006442:	e009      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006444:	f7fd ffa4 	bl	8004390 <HAL_GetTick>
 8006448:	0002      	movs	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	4a3c      	ldr	r2, [pc, #240]	; (8006540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d901      	bls.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e067      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006458:	4b35      	ldr	r3, [pc, #212]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	2202      	movs	r2, #2
 800645e:	4013      	ands	r3, r2
 8006460:	d0f0      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006462:	4b33      	ldr	r3, [pc, #204]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	4a34      	ldr	r2, [pc, #208]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006468:	4013      	ands	r3, r2
 800646a:	0019      	movs	r1, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	4b2f      	ldr	r3, [pc, #188]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006472:	430a      	orrs	r2, r1
 8006474:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006476:	2317      	movs	r3, #23
 8006478:	18fb      	adds	r3, r7, r3
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d105      	bne.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006480:	4b2b      	ldr	r3, [pc, #172]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	4b2a      	ldr	r3, [pc, #168]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006486:	492f      	ldr	r1, [pc, #188]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006488:	400a      	ands	r2, r1
 800648a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2201      	movs	r2, #1
 8006492:	4013      	ands	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006496:	4b26      	ldr	r3, [pc, #152]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	2203      	movs	r2, #3
 800649c:	4393      	bics	r3, r2
 800649e:	0019      	movs	r1, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689a      	ldr	r2, [r3, #8]
 80064a4:	4b22      	ldr	r3, [pc, #136]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064a6:	430a      	orrs	r2, r1
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2202      	movs	r2, #2
 80064b0:	4013      	ands	r3, r2
 80064b2:	d009      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064b4:	4b1e      	ldr	r3, [pc, #120]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b8:	4a23      	ldr	r2, [pc, #140]	; (8006548 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	0019      	movs	r1, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	4b1b      	ldr	r3, [pc, #108]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064c4:	430a      	orrs	r2, r1
 80064c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2220      	movs	r2, #32
 80064ce:	4013      	ands	r3, r2
 80064d0:	d009      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064d2:	4b17      	ldr	r3, [pc, #92]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	2210      	movs	r2, #16
 80064d8:	4393      	bics	r3, r2
 80064da:	0019      	movs	r1, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	691a      	ldr	r2, [r3, #16]
 80064e0:	4b13      	ldr	r3, [pc, #76]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064e2:	430a      	orrs	r2, r1
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	029b      	lsls	r3, r3, #10
 80064ee:	4013      	ands	r3, r2
 80064f0:	d009      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064f2:	4b0f      	ldr	r3, [pc, #60]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	2280      	movs	r2, #128	; 0x80
 80064f8:	4393      	bics	r3, r2
 80064fa:	0019      	movs	r1, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	699a      	ldr	r2, [r3, #24]
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006502:	430a      	orrs	r2, r1
 8006504:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	4013      	ands	r3, r2
 8006510:	d009      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006512:	4b07      	ldr	r3, [pc, #28]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	2240      	movs	r2, #64	; 0x40
 8006518:	4393      	bics	r3, r2
 800651a:	0019      	movs	r1, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	695a      	ldr	r2, [r3, #20]
 8006520:	4b03      	ldr	r3, [pc, #12]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006522:	430a      	orrs	r2, r1
 8006524:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	0018      	movs	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	b006      	add	sp, #24
 800652e:	bd80      	pop	{r7, pc}
 8006530:	40021000 	.word	0x40021000
 8006534:	40007000 	.word	0x40007000
 8006538:	fffffcff 	.word	0xfffffcff
 800653c:	fffeffff 	.word	0xfffeffff
 8006540:	00001388 	.word	0x00001388
 8006544:	efffffff 	.word	0xefffffff
 8006548:	fffcffff 	.word	0xfffcffff

0800654c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d101      	bne.n	800655e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e042      	b.n	80065e4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	223d      	movs	r2, #61	; 0x3d
 8006562:	5c9b      	ldrb	r3, [r3, r2]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d107      	bne.n	800657a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	223c      	movs	r2, #60	; 0x3c
 800656e:	2100      	movs	r1, #0
 8006570:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	0018      	movs	r0, r3
 8006576:	f7fd faab 	bl	8003ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	223d      	movs	r2, #61	; 0x3d
 800657e:	2102      	movs	r1, #2
 8006580:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3304      	adds	r3, #4
 800658a:	0019      	movs	r1, r3
 800658c:	0010      	movs	r0, r2
 800658e:	f000 ff57 	bl	8007440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2246      	movs	r2, #70	; 0x46
 8006596:	2101      	movs	r1, #1
 8006598:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	223e      	movs	r2, #62	; 0x3e
 800659e:	2101      	movs	r1, #1
 80065a0:	5499      	strb	r1, [r3, r2]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	223f      	movs	r2, #63	; 0x3f
 80065a6:	2101      	movs	r1, #1
 80065a8:	5499      	strb	r1, [r3, r2]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2240      	movs	r2, #64	; 0x40
 80065ae:	2101      	movs	r1, #1
 80065b0:	5499      	strb	r1, [r3, r2]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2241      	movs	r2, #65	; 0x41
 80065b6:	2101      	movs	r1, #1
 80065b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2242      	movs	r2, #66	; 0x42
 80065be:	2101      	movs	r1, #1
 80065c0:	5499      	strb	r1, [r3, r2]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2243      	movs	r2, #67	; 0x43
 80065c6:	2101      	movs	r1, #1
 80065c8:	5499      	strb	r1, [r3, r2]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2244      	movs	r2, #68	; 0x44
 80065ce:	2101      	movs	r1, #1
 80065d0:	5499      	strb	r1, [r3, r2]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2245      	movs	r2, #69	; 0x45
 80065d6:	2101      	movs	r1, #1
 80065d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	223d      	movs	r2, #61	; 0x3d
 80065de:	2101      	movs	r1, #1
 80065e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	0018      	movs	r0, r3
 80065e6:	46bd      	mov	sp, r7
 80065e8:	b002      	add	sp, #8
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e042      	b.n	8006684 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	223d      	movs	r2, #61	; 0x3d
 8006602:	5c9b      	ldrb	r3, [r3, r2]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d107      	bne.n	800661a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	223c      	movs	r2, #60	; 0x3c
 800660e:	2100      	movs	r1, #0
 8006610:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	0018      	movs	r0, r3
 8006616:	f000 f839 	bl	800668c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	223d      	movs	r2, #61	; 0x3d
 800661e:	2102      	movs	r1, #2
 8006620:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3304      	adds	r3, #4
 800662a:	0019      	movs	r1, r3
 800662c:	0010      	movs	r0, r2
 800662e:	f000 ff07 	bl	8007440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2246      	movs	r2, #70	; 0x46
 8006636:	2101      	movs	r1, #1
 8006638:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	223e      	movs	r2, #62	; 0x3e
 800663e:	2101      	movs	r1, #1
 8006640:	5499      	strb	r1, [r3, r2]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	223f      	movs	r2, #63	; 0x3f
 8006646:	2101      	movs	r1, #1
 8006648:	5499      	strb	r1, [r3, r2]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2240      	movs	r2, #64	; 0x40
 800664e:	2101      	movs	r1, #1
 8006650:	5499      	strb	r1, [r3, r2]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2241      	movs	r2, #65	; 0x41
 8006656:	2101      	movs	r1, #1
 8006658:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2242      	movs	r2, #66	; 0x42
 800665e:	2101      	movs	r1, #1
 8006660:	5499      	strb	r1, [r3, r2]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2243      	movs	r2, #67	; 0x43
 8006666:	2101      	movs	r1, #1
 8006668:	5499      	strb	r1, [r3, r2]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2244      	movs	r2, #68	; 0x44
 800666e:	2101      	movs	r1, #1
 8006670:	5499      	strb	r1, [r3, r2]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2245      	movs	r2, #69	; 0x45
 8006676:	2101      	movs	r1, #1
 8006678:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	223d      	movs	r2, #61	; 0x3d
 800667e:	2101      	movs	r1, #1
 8006680:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	0018      	movs	r0, r3
 8006686:	46bd      	mov	sp, r7
 8006688:	b002      	add	sp, #8
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006694:	46c0      	nop			; (mov r8, r8)
 8006696:	46bd      	mov	sp, r7
 8006698:	b002      	add	sp, #8
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d108      	bne.n	80066be <HAL_TIM_PWM_Start+0x22>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	223e      	movs	r2, #62	; 0x3e
 80066b0:	5c9b      	ldrb	r3, [r3, r2]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	1e5a      	subs	r2, r3, #1
 80066b8:	4193      	sbcs	r3, r2
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	e01f      	b.n	80066fe <HAL_TIM_PWM_Start+0x62>
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d108      	bne.n	80066d6 <HAL_TIM_PWM_Start+0x3a>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	223f      	movs	r2, #63	; 0x3f
 80066c8:	5c9b      	ldrb	r3, [r3, r2]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	3b01      	subs	r3, #1
 80066ce:	1e5a      	subs	r2, r3, #1
 80066d0:	4193      	sbcs	r3, r2
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	e013      	b.n	80066fe <HAL_TIM_PWM_Start+0x62>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d108      	bne.n	80066ee <HAL_TIM_PWM_Start+0x52>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2240      	movs	r2, #64	; 0x40
 80066e0:	5c9b      	ldrb	r3, [r3, r2]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	3b01      	subs	r3, #1
 80066e6:	1e5a      	subs	r2, r3, #1
 80066e8:	4193      	sbcs	r3, r2
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	e007      	b.n	80066fe <HAL_TIM_PWM_Start+0x62>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2241      	movs	r2, #65	; 0x41
 80066f2:	5c9b      	ldrb	r3, [r3, r2]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	3b01      	subs	r3, #1
 80066f8:	1e5a      	subs	r2, r3, #1
 80066fa:	4193      	sbcs	r3, r2
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e074      	b.n	80067f0 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <HAL_TIM_PWM_Start+0x7a>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	223e      	movs	r2, #62	; 0x3e
 8006710:	2102      	movs	r1, #2
 8006712:	5499      	strb	r1, [r3, r2]
 8006714:	e013      	b.n	800673e <HAL_TIM_PWM_Start+0xa2>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b04      	cmp	r3, #4
 800671a:	d104      	bne.n	8006726 <HAL_TIM_PWM_Start+0x8a>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	223f      	movs	r2, #63	; 0x3f
 8006720:	2102      	movs	r1, #2
 8006722:	5499      	strb	r1, [r3, r2]
 8006724:	e00b      	b.n	800673e <HAL_TIM_PWM_Start+0xa2>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b08      	cmp	r3, #8
 800672a:	d104      	bne.n	8006736 <HAL_TIM_PWM_Start+0x9a>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2240      	movs	r2, #64	; 0x40
 8006730:	2102      	movs	r1, #2
 8006732:	5499      	strb	r1, [r3, r2]
 8006734:	e003      	b.n	800673e <HAL_TIM_PWM_Start+0xa2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2241      	movs	r2, #65	; 0x41
 800673a:	2102      	movs	r1, #2
 800673c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	0018      	movs	r0, r3
 8006748:	f001 f990 	bl	8007a6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a29      	ldr	r2, [pc, #164]	; (80067f8 <HAL_TIM_PWM_Start+0x15c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00e      	beq.n	8006774 <HAL_TIM_PWM_Start+0xd8>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a28      	ldr	r2, [pc, #160]	; (80067fc <HAL_TIM_PWM_Start+0x160>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_TIM_PWM_Start+0xd8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a26      	ldr	r2, [pc, #152]	; (8006800 <HAL_TIM_PWM_Start+0x164>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_TIM_PWM_Start+0xd8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a25      	ldr	r2, [pc, #148]	; (8006804 <HAL_TIM_PWM_Start+0x168>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d101      	bne.n	8006778 <HAL_TIM_PWM_Start+0xdc>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <HAL_TIM_PWM_Start+0xde>
 8006778:	2300      	movs	r3, #0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d008      	beq.n	8006790 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2180      	movs	r1, #128	; 0x80
 800678a:	0209      	lsls	r1, r1, #8
 800678c:	430a      	orrs	r2, r1
 800678e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <HAL_TIM_PWM_Start+0x15c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d00f      	beq.n	80067ba <HAL_TIM_PWM_Start+0x11e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	05db      	lsls	r3, r3, #23
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d009      	beq.n	80067ba <HAL_TIM_PWM_Start+0x11e>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a17      	ldr	r2, [pc, #92]	; (8006808 <HAL_TIM_PWM_Start+0x16c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d004      	beq.n	80067ba <HAL_TIM_PWM_Start+0x11e>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a11      	ldr	r2, [pc, #68]	; (80067fc <HAL_TIM_PWM_Start+0x160>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d111      	bne.n	80067de <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2207      	movs	r2, #7
 80067c2:	4013      	ands	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b06      	cmp	r3, #6
 80067ca:	d010      	beq.n	80067ee <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2101      	movs	r1, #1
 80067d8:	430a      	orrs	r2, r1
 80067da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067dc:	e007      	b.n	80067ee <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2101      	movs	r1, #1
 80067ea:	430a      	orrs	r2, r1
 80067ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	0018      	movs	r0, r3
 80067f2:	46bd      	mov	sp, r7
 80067f4:	b004      	add	sp, #16
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40012c00 	.word	0x40012c00
 80067fc:	40014000 	.word	0x40014000
 8006800:	40014400 	.word	0x40014400
 8006804:	40014800 	.word	0x40014800
 8006808:	40000400 	.word	0x40000400

0800680c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	001a      	movs	r2, r3
 800681a:	1cbb      	adds	r3, r7, #2
 800681c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800681e:	2317      	movs	r3, #23
 8006820:	18fb      	adds	r3, r7, r3
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d108      	bne.n	800683e <HAL_TIM_PWM_Start_DMA+0x32>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	223e      	movs	r2, #62	; 0x3e
 8006830:	5c9b      	ldrb	r3, [r3, r2]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	3b02      	subs	r3, #2
 8006836:	425a      	negs	r2, r3
 8006838:	4153      	adcs	r3, r2
 800683a:	b2db      	uxtb	r3, r3
 800683c:	e01f      	b.n	800687e <HAL_TIM_PWM_Start_DMA+0x72>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b04      	cmp	r3, #4
 8006842:	d108      	bne.n	8006856 <HAL_TIM_PWM_Start_DMA+0x4a>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	223f      	movs	r2, #63	; 0x3f
 8006848:	5c9b      	ldrb	r3, [r3, r2]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	3b02      	subs	r3, #2
 800684e:	425a      	negs	r2, r3
 8006850:	4153      	adcs	r3, r2
 8006852:	b2db      	uxtb	r3, r3
 8006854:	e013      	b.n	800687e <HAL_TIM_PWM_Start_DMA+0x72>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b08      	cmp	r3, #8
 800685a:	d108      	bne.n	800686e <HAL_TIM_PWM_Start_DMA+0x62>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2240      	movs	r2, #64	; 0x40
 8006860:	5c9b      	ldrb	r3, [r3, r2]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	3b02      	subs	r3, #2
 8006866:	425a      	negs	r2, r3
 8006868:	4153      	adcs	r3, r2
 800686a:	b2db      	uxtb	r3, r3
 800686c:	e007      	b.n	800687e <HAL_TIM_PWM_Start_DMA+0x72>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2241      	movs	r2, #65	; 0x41
 8006872:	5c9b      	ldrb	r3, [r3, r2]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	3b02      	subs	r3, #2
 8006878:	425a      	negs	r2, r3
 800687a:	4153      	adcs	r3, r2
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
 8006884:	e164      	b.n	8006b50 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d108      	bne.n	800689e <HAL_TIM_PWM_Start_DMA+0x92>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	223e      	movs	r2, #62	; 0x3e
 8006890:	5c9b      	ldrb	r3, [r3, r2]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	3b01      	subs	r3, #1
 8006896:	425a      	negs	r2, r3
 8006898:	4153      	adcs	r3, r2
 800689a:	b2db      	uxtb	r3, r3
 800689c:	e01f      	b.n	80068de <HAL_TIM_PWM_Start_DMA+0xd2>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d108      	bne.n	80068b6 <HAL_TIM_PWM_Start_DMA+0xaa>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	223f      	movs	r2, #63	; 0x3f
 80068a8:	5c9b      	ldrb	r3, [r3, r2]
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	425a      	negs	r2, r3
 80068b0:	4153      	adcs	r3, r2
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	e013      	b.n	80068de <HAL_TIM_PWM_Start_DMA+0xd2>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d108      	bne.n	80068ce <HAL_TIM_PWM_Start_DMA+0xc2>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2240      	movs	r2, #64	; 0x40
 80068c0:	5c9b      	ldrb	r3, [r3, r2]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	3b01      	subs	r3, #1
 80068c6:	425a      	negs	r2, r3
 80068c8:	4153      	adcs	r3, r2
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	e007      	b.n	80068de <HAL_TIM_PWM_Start_DMA+0xd2>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2241      	movs	r2, #65	; 0x41
 80068d2:	5c9b      	ldrb	r3, [r3, r2]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	425a      	negs	r2, r3
 80068da:	4153      	adcs	r3, r2
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d025      	beq.n	800692e <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d105      	bne.n	80068f4 <HAL_TIM_PWM_Start_DMA+0xe8>
 80068e8:	1cbb      	adds	r3, r7, #2
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e12d      	b.n	8006b50 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d104      	bne.n	8006904 <HAL_TIM_PWM_Start_DMA+0xf8>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	223e      	movs	r2, #62	; 0x3e
 80068fe:	2102      	movs	r1, #2
 8006900:	5499      	strb	r1, [r3, r2]
 8006902:	e016      	b.n	8006932 <HAL_TIM_PWM_Start_DMA+0x126>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	2b04      	cmp	r3, #4
 8006908:	d104      	bne.n	8006914 <HAL_TIM_PWM_Start_DMA+0x108>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	223f      	movs	r2, #63	; 0x3f
 800690e:	2102      	movs	r1, #2
 8006910:	5499      	strb	r1, [r3, r2]
 8006912:	e00e      	b.n	8006932 <HAL_TIM_PWM_Start_DMA+0x126>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b08      	cmp	r3, #8
 8006918:	d104      	bne.n	8006924 <HAL_TIM_PWM_Start_DMA+0x118>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2240      	movs	r2, #64	; 0x40
 800691e:	2102      	movs	r1, #2
 8006920:	5499      	strb	r1, [r3, r2]
 8006922:	e006      	b.n	8006932 <HAL_TIM_PWM_Start_DMA+0x126>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2241      	movs	r2, #65	; 0x41
 8006928:	2102      	movs	r1, #2
 800692a:	5499      	strb	r1, [r3, r2]
 800692c:	e001      	b.n	8006932 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e10e      	b.n	8006b50 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b0c      	cmp	r3, #12
 8006936:	d100      	bne.n	800693a <HAL_TIM_PWM_Start_DMA+0x12e>
 8006938:	e080      	b.n	8006a3c <HAL_TIM_PWM_Start_DMA+0x230>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b0c      	cmp	r3, #12
 800693e:	d900      	bls.n	8006942 <HAL_TIM_PWM_Start_DMA+0x136>
 8006940:	e0a1      	b.n	8006a86 <HAL_TIM_PWM_Start_DMA+0x27a>
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b08      	cmp	r3, #8
 8006946:	d054      	beq.n	80069f2 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b08      	cmp	r3, #8
 800694c:	d900      	bls.n	8006950 <HAL_TIM_PWM_Start_DMA+0x144>
 800694e:	e09a      	b.n	8006a86 <HAL_TIM_PWM_Start_DMA+0x27a>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_TIM_PWM_Start_DMA+0x152>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b04      	cmp	r3, #4
 800695a:	d025      	beq.n	80069a8 <HAL_TIM_PWM_Start_DMA+0x19c>
 800695c:	e093      	b.n	8006a86 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	4a7d      	ldr	r2, [pc, #500]	; (8006b58 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006964:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696a:	4a7c      	ldr	r2, [pc, #496]	; (8006b5c <HAL_TIM_PWM_Start_DMA+0x350>)
 800696c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	4a7b      	ldr	r2, [pc, #492]	; (8006b60 <HAL_TIM_PWM_Start_DMA+0x354>)
 8006974:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3334      	adds	r3, #52	; 0x34
 8006982:	001a      	movs	r2, r3
 8006984:	1cbb      	adds	r3, r7, #2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	f7fe fb04 	bl	8004f94 <HAL_DMA_Start_IT>
 800698c:	1e03      	subs	r3, r0, #0
 800698e:	d001      	beq.n	8006994 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e0dd      	b.n	8006b50 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2180      	movs	r1, #128	; 0x80
 80069a0:	0089      	lsls	r1, r1, #2
 80069a2:	430a      	orrs	r2, r1
 80069a4:	60da      	str	r2, [r3, #12]
      break;
 80069a6:	e073      	b.n	8006a90 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ac:	4a6a      	ldr	r2, [pc, #424]	; (8006b58 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b4:	4a69      	ldr	r2, [pc, #420]	; (8006b5c <HAL_TIM_PWM_Start_DMA+0x350>)
 80069b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069bc:	4a68      	ldr	r2, [pc, #416]	; (8006b60 <HAL_TIM_PWM_Start_DMA+0x354>)
 80069be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3338      	adds	r3, #56	; 0x38
 80069cc:	001a      	movs	r2, r3
 80069ce:	1cbb      	adds	r3, r7, #2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	f7fe fadf 	bl	8004f94 <HAL_DMA_Start_IT>
 80069d6:	1e03      	subs	r3, r0, #0
 80069d8:	d001      	beq.n	80069de <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e0b8      	b.n	8006b50 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2180      	movs	r1, #128	; 0x80
 80069ea:	00c9      	lsls	r1, r1, #3
 80069ec:	430a      	orrs	r2, r1
 80069ee:	60da      	str	r2, [r3, #12]
      break;
 80069f0:	e04e      	b.n	8006a90 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f6:	4a58      	ldr	r2, [pc, #352]	; (8006b58 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80069f8:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069fe:	4a57      	ldr	r2, [pc, #348]	; (8006b5c <HAL_TIM_PWM_Start_DMA+0x350>)
 8006a00:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a06:	4a56      	ldr	r2, [pc, #344]	; (8006b60 <HAL_TIM_PWM_Start_DMA+0x354>)
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	333c      	adds	r3, #60	; 0x3c
 8006a16:	001a      	movs	r2, r3
 8006a18:	1cbb      	adds	r3, r7, #2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	f7fe faba 	bl	8004f94 <HAL_DMA_Start_IT>
 8006a20:	1e03      	subs	r3, r0, #0
 8006a22:	d001      	beq.n	8006a28 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e093      	b.n	8006b50 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2180      	movs	r1, #128	; 0x80
 8006a34:	0109      	lsls	r1, r1, #4
 8006a36:	430a      	orrs	r2, r1
 8006a38:	60da      	str	r2, [r3, #12]
      break;
 8006a3a:	e029      	b.n	8006a90 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a40:	4a45      	ldr	r2, [pc, #276]	; (8006b58 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006a42:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	4a44      	ldr	r2, [pc, #272]	; (8006b5c <HAL_TIM_PWM_Start_DMA+0x350>)
 8006a4a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	4a43      	ldr	r2, [pc, #268]	; (8006b60 <HAL_TIM_PWM_Start_DMA+0x354>)
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3340      	adds	r3, #64	; 0x40
 8006a60:	001a      	movs	r2, r3
 8006a62:	1cbb      	adds	r3, r7, #2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	f7fe fa95 	bl	8004f94 <HAL_DMA_Start_IT>
 8006a6a:	1e03      	subs	r3, r0, #0
 8006a6c:	d001      	beq.n	8006a72 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e06e      	b.n	8006b50 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2180      	movs	r1, #128	; 0x80
 8006a7e:	0149      	lsls	r1, r1, #5
 8006a80:	430a      	orrs	r2, r1
 8006a82:	60da      	str	r2, [r3, #12]
      break;
 8006a84:	e004      	b.n	8006a90 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8006a86:	2317      	movs	r3, #23
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	701a      	strb	r2, [r3, #0]
      break;
 8006a8e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006a90:	2317      	movs	r3, #23
 8006a92:	18fb      	adds	r3, r7, r3
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d157      	bne.n	8006b4a <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68b9      	ldr	r1, [r7, #8]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f000 ffe2 	bl	8007a6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a2d      	ldr	r2, [pc, #180]	; (8006b64 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00e      	beq.n	8006ad0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a2c      	ldr	r2, [pc, #176]	; (8006b68 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d009      	beq.n	8006ad0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a2a      	ldr	r2, [pc, #168]	; (8006b6c <HAL_TIM_PWM_Start_DMA+0x360>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a29      	ldr	r2, [pc, #164]	; (8006b70 <HAL_TIM_PWM_Start_DMA+0x364>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d101      	bne.n	8006ad4 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <HAL_TIM_PWM_Start_DMA+0x2ca>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2180      	movs	r1, #128	; 0x80
 8006ae6:	0209      	lsls	r1, r1, #8
 8006ae8:	430a      	orrs	r2, r1
 8006aea:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00f      	beq.n	8006b16 <HAL_TIM_PWM_Start_DMA+0x30a>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	2380      	movs	r3, #128	; 0x80
 8006afc:	05db      	lsls	r3, r3, #23
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d009      	beq.n	8006b16 <HAL_TIM_PWM_Start_DMA+0x30a>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1b      	ldr	r2, [pc, #108]	; (8006b74 <HAL_TIM_PWM_Start_DMA+0x368>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_TIM_PWM_Start_DMA+0x30a>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d111      	bne.n	8006b3a <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2207      	movs	r2, #7
 8006b1e:	4013      	ands	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b06      	cmp	r3, #6
 8006b26:	d010      	beq.n	8006b4a <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2101      	movs	r1, #1
 8006b34:	430a      	orrs	r2, r1
 8006b36:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b38:	e007      	b.n	8006b4a <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2101      	movs	r1, #1
 8006b46:	430a      	orrs	r2, r1
 8006b48:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006b4a:	2317      	movs	r3, #23
 8006b4c:	18fb      	adds	r3, r7, r3
 8006b4e:	781b      	ldrb	r3, [r3, #0]
}
 8006b50:	0018      	movs	r0, r3
 8006b52:	46bd      	mov	sp, r7
 8006b54:	b006      	add	sp, #24
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	0800732d 	.word	0x0800732d
 8006b5c:	080073d7 	.word	0x080073d7
 8006b60:	08007299 	.word	0x08007299
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40014000 	.word	0x40014000
 8006b6c:	40014400 	.word	0x40014400
 8006b70:	40014800 	.word	0x40014800
 8006b74:	40000400 	.word	0x40000400

08006b78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e090      	b.n	8006cae <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	223d      	movs	r2, #61	; 0x3d
 8006b90:	5c9b      	ldrb	r3, [r3, r2]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d107      	bne.n	8006ba8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	223c      	movs	r2, #60	; 0x3c
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f7fc ff4a 	bl	8003a3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	223d      	movs	r2, #61	; 0x3d
 8006bac:	2102      	movs	r1, #2
 8006bae:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	493f      	ldr	r1, [pc, #252]	; (8006cb8 <HAL_TIM_Encoder_Init+0x140>)
 8006bbc:	400a      	ands	r2, r1
 8006bbe:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	0019      	movs	r1, r3
 8006bca:	0010      	movs	r0, r2
 8006bcc:	f000 fc38 	bl	8007440 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	4a31      	ldr	r2, [pc, #196]	; (8006cbc <HAL_TIM_Encoder_Init+0x144>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	4313      	orrs	r3, r2
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	4a2c      	ldr	r2, [pc, #176]	; (8006cc0 <HAL_TIM_Encoder_Init+0x148>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	4a2b      	ldr	r2, [pc, #172]	; (8006cc4 <HAL_TIM_Encoder_Init+0x14c>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	021b      	lsls	r3, r3, #8
 8006c26:	4313      	orrs	r3, r2
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	011a      	lsls	r2, r3, #4
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	031b      	lsls	r3, r3, #12
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2222      	movs	r2, #34	; 0x22
 8006c46:	4393      	bics	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2288      	movs	r2, #136	; 0x88
 8006c4e:	4393      	bics	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2246      	movs	r2, #70	; 0x46
 8006c80:	2101      	movs	r1, #1
 8006c82:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	223e      	movs	r2, #62	; 0x3e
 8006c88:	2101      	movs	r1, #1
 8006c8a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	223f      	movs	r2, #63	; 0x3f
 8006c90:	2101      	movs	r1, #1
 8006c92:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2242      	movs	r2, #66	; 0x42
 8006c98:	2101      	movs	r1, #1
 8006c9a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2243      	movs	r2, #67	; 0x43
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	223d      	movs	r2, #61	; 0x3d
 8006ca8:	2101      	movs	r1, #1
 8006caa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	0018      	movs	r0, r3
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b006      	add	sp, #24
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	46c0      	nop			; (mov r8, r8)
 8006cb8:	ffffbff8 	.word	0xffffbff8
 8006cbc:	fffffcfc 	.word	0xfffffcfc
 8006cc0:	fffff3f3 	.word	0xfffff3f3
 8006cc4:	ffff0f0f 	.word	0xffff0f0f

08006cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d124      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	2202      	movs	r2, #2
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d11d      	bne.n	8006d28 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2203      	movs	r2, #3
 8006cf2:	4252      	negs	r2, r2
 8006cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	2203      	movs	r2, #3
 8006d04:	4013      	ands	r3, r2
 8006d06:	d004      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f000 fa9c 	bl	8007248 <HAL_TIM_IC_CaptureCallback>
 8006d10:	e007      	b.n	8006d22 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	0018      	movs	r0, r3
 8006d16:	f000 fa8f 	bl	8007238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f000 fa9b 	bl	8007258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2204      	movs	r2, #4
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d125      	bne.n	8006d82 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	4013      	ands	r3, r2
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d11e      	bne.n	8006d82 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2205      	movs	r2, #5
 8006d4a:	4252      	negs	r2, r2
 8006d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	23c0      	movs	r3, #192	; 0xc0
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d004      	beq.n	8006d6c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	0018      	movs	r0, r3
 8006d66:	f000 fa6f 	bl	8007248 <HAL_TIM_IC_CaptureCallback>
 8006d6a:	e007      	b.n	8006d7c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f000 fa62 	bl	8007238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	0018      	movs	r0, r3
 8006d78:	f000 fa6e 	bl	8007258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	2208      	movs	r2, #8
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d124      	bne.n	8006dda <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	2208      	movs	r2, #8
 8006d98:	4013      	ands	r3, r2
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d11d      	bne.n	8006dda <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2209      	movs	r2, #9
 8006da4:	4252      	negs	r2, r2
 8006da6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2204      	movs	r2, #4
 8006dac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	2203      	movs	r2, #3
 8006db6:	4013      	ands	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	0018      	movs	r0, r3
 8006dbe:	f000 fa43 	bl	8007248 <HAL_TIM_IC_CaptureCallback>
 8006dc2:	e007      	b.n	8006dd4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f000 fa36 	bl	8007238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f000 fa42 	bl	8007258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	2210      	movs	r2, #16
 8006de2:	4013      	ands	r3, r2
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	d125      	bne.n	8006e34 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	2210      	movs	r2, #16
 8006df0:	4013      	ands	r3, r2
 8006df2:	2b10      	cmp	r3, #16
 8006df4:	d11e      	bne.n	8006e34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2211      	movs	r2, #17
 8006dfc:	4252      	negs	r2, r2
 8006dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2208      	movs	r2, #8
 8006e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	69da      	ldr	r2, [r3, #28]
 8006e0c:	23c0      	movs	r3, #192	; 0xc0
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4013      	ands	r3, r2
 8006e12:	d004      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	0018      	movs	r0, r3
 8006e18:	f000 fa16 	bl	8007248 <HAL_TIM_IC_CaptureCallback>
 8006e1c:	e007      	b.n	8006e2e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	0018      	movs	r0, r3
 8006e22:	f000 fa09 	bl	8007238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	0018      	movs	r0, r3
 8006e2a:	f000 fa15 	bl	8007258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d10f      	bne.n	8006e62 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d108      	bne.n	8006e62 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2202      	movs	r2, #2
 8006e56:	4252      	negs	r2, r2
 8006e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f000 f9e3 	bl	8007228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2280      	movs	r2, #128	; 0x80
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	2b80      	cmp	r3, #128	; 0x80
 8006e6e:	d10f      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	2280      	movs	r2, #128	; 0x80
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b80      	cmp	r3, #128	; 0x80
 8006e7c:	d108      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2281      	movs	r2, #129	; 0x81
 8006e84:	4252      	negs	r2, r2
 8006e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f000 fed6 	bl	8007c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2240      	movs	r2, #64	; 0x40
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	d10f      	bne.n	8006ebe <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	2240      	movs	r2, #64	; 0x40
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	d108      	bne.n	8006ebe <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2241      	movs	r2, #65	; 0x41
 8006eb2:	4252      	negs	r2, r2
 8006eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	0018      	movs	r0, r3
 8006eba:	f000 f9dd 	bl	8007278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d10f      	bne.n	8006eec <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	2b20      	cmp	r3, #32
 8006ed8:	d108      	bne.n	8006eec <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2221      	movs	r2, #33	; 0x21
 8006ee0:	4252      	negs	r2, r2
 8006ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f000 fea0 	bl	8007c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006eec:	46c0      	nop			; (mov r8, r8)
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	b002      	add	sp, #8
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f00:	2317      	movs	r3, #23
 8006f02:	18fb      	adds	r3, r7, r3
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	223c      	movs	r2, #60	; 0x3c
 8006f0c:	5c9b      	ldrb	r3, [r3, r2]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d101      	bne.n	8006f16 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e0ad      	b.n	8007072 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	223c      	movs	r2, #60	; 0x3c
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b0c      	cmp	r3, #12
 8006f22:	d100      	bne.n	8006f26 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006f24:	e076      	b.n	8007014 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2b0c      	cmp	r3, #12
 8006f2a:	d900      	bls.n	8006f2e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006f2c:	e095      	b.n	800705a <HAL_TIM_PWM_ConfigChannel+0x166>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d04e      	beq.n	8006fd2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	d900      	bls.n	8006f3c <HAL_TIM_PWM_ConfigChannel+0x48>
 8006f3a:	e08e      	b.n	800705a <HAL_TIM_PWM_ConfigChannel+0x166>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x56>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b04      	cmp	r3, #4
 8006f46:	d021      	beq.n	8006f8c <HAL_TIM_PWM_ConfigChannel+0x98>
 8006f48:	e087      	b.n	800705a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	0011      	movs	r1, r2
 8006f52:	0018      	movs	r0, r3
 8006f54:	f000 faf4 	bl	8007540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2108      	movs	r1, #8
 8006f64:	430a      	orrs	r2, r1
 8006f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2104      	movs	r1, #4
 8006f74:	438a      	bics	r2, r1
 8006f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6999      	ldr	r1, [r3, #24]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	691a      	ldr	r2, [r3, #16]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	619a      	str	r2, [r3, #24]
      break;
 8006f8a:	e06b      	b.n	8007064 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	0011      	movs	r1, r2
 8006f94:	0018      	movs	r0, r3
 8006f96:	f000 fb5b 	bl	8007650 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2180      	movs	r1, #128	; 0x80
 8006fa6:	0109      	lsls	r1, r1, #4
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4931      	ldr	r1, [pc, #196]	; (800707c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006fb8:	400a      	ands	r2, r1
 8006fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6999      	ldr	r1, [r3, #24]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	021a      	lsls	r2, r3, #8
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	619a      	str	r2, [r3, #24]
      break;
 8006fd0:	e048      	b.n	8007064 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	0011      	movs	r1, r2
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f000 fbbc 	bl	8007758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	69da      	ldr	r2, [r3, #28]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2108      	movs	r1, #8
 8006fec:	430a      	orrs	r2, r1
 8006fee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	69da      	ldr	r2, [r3, #28]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2104      	movs	r1, #4
 8006ffc:	438a      	bics	r2, r1
 8006ffe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	69d9      	ldr	r1, [r3, #28]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	61da      	str	r2, [r3, #28]
      break;
 8007012:	e027      	b.n	8007064 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	0011      	movs	r1, r2
 800701c:	0018      	movs	r0, r3
 800701e:	f000 fc21 	bl	8007864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2180      	movs	r1, #128	; 0x80
 800702e:	0109      	lsls	r1, r1, #4
 8007030:	430a      	orrs	r2, r1
 8007032:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69da      	ldr	r2, [r3, #28]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	490f      	ldr	r1, [pc, #60]	; (800707c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007040:	400a      	ands	r2, r1
 8007042:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69d9      	ldr	r1, [r3, #28]
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	021a      	lsls	r2, r3, #8
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	61da      	str	r2, [r3, #28]
      break;
 8007058:	e004      	b.n	8007064 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800705a:	2317      	movs	r3, #23
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	2201      	movs	r2, #1
 8007060:	701a      	strb	r2, [r3, #0]
      break;
 8007062:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	223c      	movs	r2, #60	; 0x3c
 8007068:	2100      	movs	r1, #0
 800706a:	5499      	strb	r1, [r3, r2]

  return status;
 800706c:	2317      	movs	r3, #23
 800706e:	18fb      	adds	r3, r7, r3
 8007070:	781b      	ldrb	r3, [r3, #0]
}
 8007072:	0018      	movs	r0, r3
 8007074:	46bd      	mov	sp, r7
 8007076:	b006      	add	sp, #24
 8007078:	bd80      	pop	{r7, pc}
 800707a:	46c0      	nop			; (mov r8, r8)
 800707c:	fffffbff 	.word	0xfffffbff

08007080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800708a:	230f      	movs	r3, #15
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	223c      	movs	r2, #60	; 0x3c
 8007096:	5c9b      	ldrb	r3, [r3, r2]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_TIM_ConfigClockSource+0x20>
 800709c:	2302      	movs	r3, #2
 800709e:	e0bc      	b.n	800721a <HAL_TIM_ConfigClockSource+0x19a>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	223c      	movs	r2, #60	; 0x3c
 80070a4:	2101      	movs	r1, #1
 80070a6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	223d      	movs	r2, #61	; 0x3d
 80070ac:	2102      	movs	r1, #2
 80070ae:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2277      	movs	r2, #119	; 0x77
 80070bc:	4393      	bics	r3, r2
 80070be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4a58      	ldr	r2, [pc, #352]	; (8007224 <HAL_TIM_ConfigClockSource+0x1a4>)
 80070c4:	4013      	ands	r3, r2
 80070c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2280      	movs	r2, #128	; 0x80
 80070d6:	0192      	lsls	r2, r2, #6
 80070d8:	4293      	cmp	r3, r2
 80070da:	d040      	beq.n	800715e <HAL_TIM_ConfigClockSource+0xde>
 80070dc:	2280      	movs	r2, #128	; 0x80
 80070de:	0192      	lsls	r2, r2, #6
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d900      	bls.n	80070e6 <HAL_TIM_ConfigClockSource+0x66>
 80070e4:	e088      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x178>
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	0152      	lsls	r2, r2, #5
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d100      	bne.n	80070f0 <HAL_TIM_ConfigClockSource+0x70>
 80070ee:	e088      	b.n	8007202 <HAL_TIM_ConfigClockSource+0x182>
 80070f0:	2280      	movs	r2, #128	; 0x80
 80070f2:	0152      	lsls	r2, r2, #5
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d900      	bls.n	80070fa <HAL_TIM_ConfigClockSource+0x7a>
 80070f8:	e07e      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x178>
 80070fa:	2b70      	cmp	r3, #112	; 0x70
 80070fc:	d018      	beq.n	8007130 <HAL_TIM_ConfigClockSource+0xb0>
 80070fe:	d900      	bls.n	8007102 <HAL_TIM_ConfigClockSource+0x82>
 8007100:	e07a      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x178>
 8007102:	2b60      	cmp	r3, #96	; 0x60
 8007104:	d04f      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0x126>
 8007106:	d900      	bls.n	800710a <HAL_TIM_ConfigClockSource+0x8a>
 8007108:	e076      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x178>
 800710a:	2b50      	cmp	r3, #80	; 0x50
 800710c:	d03b      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x106>
 800710e:	d900      	bls.n	8007112 <HAL_TIM_ConfigClockSource+0x92>
 8007110:	e072      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x178>
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d057      	beq.n	80071c6 <HAL_TIM_ConfigClockSource+0x146>
 8007116:	d900      	bls.n	800711a <HAL_TIM_ConfigClockSource+0x9a>
 8007118:	e06e      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x178>
 800711a:	2b30      	cmp	r3, #48	; 0x30
 800711c:	d063      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x166>
 800711e:	d86b      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x178>
 8007120:	2b20      	cmp	r3, #32
 8007122:	d060      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x166>
 8007124:	d868      	bhi.n	80071f8 <HAL_TIM_ConfigClockSource+0x178>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d05d      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x166>
 800712a:	2b10      	cmp	r3, #16
 800712c:	d05b      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x166>
 800712e:	e063      	b.n	80071f8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	6899      	ldr	r1, [r3, #8]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	f000 fc74 	bl	8007a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2277      	movs	r2, #119	; 0x77
 8007150:	4313      	orrs	r3, r2
 8007152:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	609a      	str	r2, [r3, #8]
      break;
 800715c:	e052      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	6899      	ldr	r1, [r3, #8]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	f000 fc5d 	bl	8007a2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	689a      	ldr	r2, [r3, #8]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2180      	movs	r1, #128	; 0x80
 800717e:	01c9      	lsls	r1, r1, #7
 8007180:	430a      	orrs	r2, r1
 8007182:	609a      	str	r2, [r3, #8]
      break;
 8007184:	e03e      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	6859      	ldr	r1, [r3, #4]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	001a      	movs	r2, r3
 8007194:	f000 fbd0 	bl	8007938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2150      	movs	r1, #80	; 0x50
 800719e:	0018      	movs	r0, r3
 80071a0:	f000 fc2a 	bl	80079f8 <TIM_ITRx_SetConfig>
      break;
 80071a4:	e02e      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6818      	ldr	r0, [r3, #0]
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	6859      	ldr	r1, [r3, #4]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	001a      	movs	r2, r3
 80071b4:	f000 fbee 	bl	8007994 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2160      	movs	r1, #96	; 0x60
 80071be:	0018      	movs	r0, r3
 80071c0:	f000 fc1a 	bl	80079f8 <TIM_ITRx_SetConfig>
      break;
 80071c4:	e01e      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6859      	ldr	r1, [r3, #4]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	001a      	movs	r2, r3
 80071d4:	f000 fbb0 	bl	8007938 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2140      	movs	r1, #64	; 0x40
 80071de:	0018      	movs	r0, r3
 80071e0:	f000 fc0a 	bl	80079f8 <TIM_ITRx_SetConfig>
      break;
 80071e4:	e00e      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	0019      	movs	r1, r3
 80071f0:	0010      	movs	r0, r2
 80071f2:	f000 fc01 	bl	80079f8 <TIM_ITRx_SetConfig>
      break;
 80071f6:	e005      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80071f8:	230f      	movs	r3, #15
 80071fa:	18fb      	adds	r3, r7, r3
 80071fc:	2201      	movs	r2, #1
 80071fe:	701a      	strb	r2, [r3, #0]
      break;
 8007200:	e000      	b.n	8007204 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8007202:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	223d      	movs	r2, #61	; 0x3d
 8007208:	2101      	movs	r1, #1
 800720a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	223c      	movs	r2, #60	; 0x3c
 8007210:	2100      	movs	r1, #0
 8007212:	5499      	strb	r1, [r3, r2]

  return status;
 8007214:	230f      	movs	r3, #15
 8007216:	18fb      	adds	r3, r7, r3
 8007218:	781b      	ldrb	r3, [r3, #0]
}
 800721a:	0018      	movs	r0, r3
 800721c:	46bd      	mov	sp, r7
 800721e:	b004      	add	sp, #16
 8007220:	bd80      	pop	{r7, pc}
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	ffff00ff 	.word	0xffff00ff

08007228 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007230:	46c0      	nop			; (mov r8, r8)
 8007232:	46bd      	mov	sp, r7
 8007234:	b002      	add	sp, #8
 8007236:	bd80      	pop	{r7, pc}

08007238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007240:	46c0      	nop			; (mov r8, r8)
 8007242:	46bd      	mov	sp, r7
 8007244:	b002      	add	sp, #8
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007250:	46c0      	nop			; (mov r8, r8)
 8007252:	46bd      	mov	sp, r7
 8007254:	b002      	add	sp, #8
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007260:	46c0      	nop			; (mov r8, r8)
 8007262:	46bd      	mov	sp, r7
 8007264:	b002      	add	sp, #8
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007270:	46c0      	nop			; (mov r8, r8)
 8007272:	46bd      	mov	sp, r7
 8007274:	b002      	add	sp, #8
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007280:	46c0      	nop			; (mov r8, r8)
 8007282:	46bd      	mov	sp, r7
 8007284:	b002      	add	sp, #8
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007290:	46c0      	nop			; (mov r8, r8)
 8007292:	46bd      	mov	sp, r7
 8007294:	b002      	add	sp, #8
 8007296:	bd80      	pop	{r7, pc}

08007298 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d107      	bne.n	80072c0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	223e      	movs	r2, #62	; 0x3e
 80072ba:	2101      	movs	r1, #1
 80072bc:	5499      	strb	r1, [r3, r2]
 80072be:	e02a      	b.n	8007316 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d107      	bne.n	80072da <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2202      	movs	r2, #2
 80072ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	223f      	movs	r2, #63	; 0x3f
 80072d4:	2101      	movs	r1, #1
 80072d6:	5499      	strb	r1, [r3, r2]
 80072d8:	e01d      	b.n	8007316 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d107      	bne.n	80072f4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2204      	movs	r2, #4
 80072e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2240      	movs	r2, #64	; 0x40
 80072ee:	2101      	movs	r1, #1
 80072f0:	5499      	strb	r1, [r3, r2]
 80072f2:	e010      	b.n	8007316 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d107      	bne.n	800730e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2208      	movs	r2, #8
 8007302:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2241      	movs	r2, #65	; 0x41
 8007308:	2101      	movs	r1, #1
 800730a:	5499      	strb	r1, [r3, r2]
 800730c:	e003      	b.n	8007316 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	223d      	movs	r2, #61	; 0x3d
 8007312:	2101      	movs	r1, #1
 8007314:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	0018      	movs	r0, r3
 800731a:	f7ff ffb5 	bl	8007288 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	771a      	strb	r2, [r3, #28]
}
 8007324:	46c0      	nop			; (mov r8, r8)
 8007326:	46bd      	mov	sp, r7
 8007328:	b004      	add	sp, #16
 800732a:	bd80      	pop	{r7, pc}

0800732c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007338:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d10b      	bne.n	800735c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d136      	bne.n	80073c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	223e      	movs	r2, #62	; 0x3e
 8007356:	2101      	movs	r1, #1
 8007358:	5499      	strb	r1, [r3, r2]
 800735a:	e031      	b.n	80073c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	429a      	cmp	r2, r3
 8007364:	d10b      	bne.n	800737e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2202      	movs	r2, #2
 800736a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d125      	bne.n	80073c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	223f      	movs	r2, #63	; 0x3f
 8007378:	2101      	movs	r1, #1
 800737a:	5499      	strb	r1, [r3, r2]
 800737c:	e020      	b.n	80073c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	429a      	cmp	r2, r3
 8007386:	d10b      	bne.n	80073a0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2204      	movs	r2, #4
 800738c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d114      	bne.n	80073c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2240      	movs	r2, #64	; 0x40
 800739a:	2101      	movs	r1, #1
 800739c:	5499      	strb	r1, [r3, r2]
 800739e:	e00f      	b.n	80073c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d10a      	bne.n	80073c0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2208      	movs	r2, #8
 80073ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d103      	bne.n	80073c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2241      	movs	r2, #65	; 0x41
 80073bc:	2101      	movs	r1, #1
 80073be:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	0018      	movs	r0, r3
 80073c4:	f7ff ff48 	bl	8007258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	771a      	strb	r2, [r3, #28]
}
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b004      	add	sp, #16
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d103      	bne.n	80073f6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	771a      	strb	r2, [r3, #28]
 80073f4:	e019      	b.n	800742a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d103      	bne.n	8007408 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2202      	movs	r2, #2
 8007404:	771a      	strb	r2, [r3, #28]
 8007406:	e010      	b.n	800742a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	429a      	cmp	r2, r3
 8007410:	d103      	bne.n	800741a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2204      	movs	r2, #4
 8007416:	771a      	strb	r2, [r3, #28]
 8007418:	e007      	b.n	800742a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d102      	bne.n	800742a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2208      	movs	r2, #8
 8007428:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	0018      	movs	r0, r3
 800742e:	f7ff ff1b 	bl	8007268 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2200      	movs	r2, #0
 8007436:	771a      	strb	r2, [r3, #28]
}
 8007438:	46c0      	nop			; (mov r8, r8)
 800743a:	46bd      	mov	sp, r7
 800743c:	b004      	add	sp, #16
 800743e:	bd80      	pop	{r7, pc}

08007440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a34      	ldr	r2, [pc, #208]	; (8007524 <TIM_Base_SetConfig+0xe4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d008      	beq.n	800746a <TIM_Base_SetConfig+0x2a>
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	2380      	movs	r3, #128	; 0x80
 800745c:	05db      	lsls	r3, r3, #23
 800745e:	429a      	cmp	r2, r3
 8007460:	d003      	beq.n	800746a <TIM_Base_SetConfig+0x2a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a30      	ldr	r2, [pc, #192]	; (8007528 <TIM_Base_SetConfig+0xe8>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d108      	bne.n	800747c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2270      	movs	r2, #112	; 0x70
 800746e:	4393      	bics	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a29      	ldr	r2, [pc, #164]	; (8007524 <TIM_Base_SetConfig+0xe4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d018      	beq.n	80074b6 <TIM_Base_SetConfig+0x76>
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	2380      	movs	r3, #128	; 0x80
 8007488:	05db      	lsls	r3, r3, #23
 800748a:	429a      	cmp	r2, r3
 800748c:	d013      	beq.n	80074b6 <TIM_Base_SetConfig+0x76>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a25      	ldr	r2, [pc, #148]	; (8007528 <TIM_Base_SetConfig+0xe8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00f      	beq.n	80074b6 <TIM_Base_SetConfig+0x76>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a24      	ldr	r2, [pc, #144]	; (800752c <TIM_Base_SetConfig+0xec>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00b      	beq.n	80074b6 <TIM_Base_SetConfig+0x76>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a23      	ldr	r2, [pc, #140]	; (8007530 <TIM_Base_SetConfig+0xf0>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d007      	beq.n	80074b6 <TIM_Base_SetConfig+0x76>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a22      	ldr	r2, [pc, #136]	; (8007534 <TIM_Base_SetConfig+0xf4>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d003      	beq.n	80074b6 <TIM_Base_SetConfig+0x76>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a21      	ldr	r2, [pc, #132]	; (8007538 <TIM_Base_SetConfig+0xf8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d108      	bne.n	80074c8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	4a20      	ldr	r2, [pc, #128]	; (800753c <TIM_Base_SetConfig+0xfc>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2280      	movs	r2, #128	; 0x80
 80074cc:	4393      	bics	r3, r2
 80074ce:	001a      	movs	r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <TIM_Base_SetConfig+0xe4>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d00b      	beq.n	800750e <TIM_Base_SetConfig+0xce>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a0d      	ldr	r2, [pc, #52]	; (8007530 <TIM_Base_SetConfig+0xf0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d007      	beq.n	800750e <TIM_Base_SetConfig+0xce>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a0c      	ldr	r2, [pc, #48]	; (8007534 <TIM_Base_SetConfig+0xf4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_Base_SetConfig+0xce>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a0b      	ldr	r2, [pc, #44]	; (8007538 <TIM_Base_SetConfig+0xf8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d103      	bne.n	8007516 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	615a      	str	r2, [r3, #20]
}
 800751c:	46c0      	nop			; (mov r8, r8)
 800751e:	46bd      	mov	sp, r7
 8007520:	b004      	add	sp, #16
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40012c00 	.word	0x40012c00
 8007528:	40000400 	.word	0x40000400
 800752c:	40002000 	.word	0x40002000
 8007530:	40014000 	.word	0x40014000
 8007534:	40014400 	.word	0x40014400
 8007538:	40014800 	.word	0x40014800
 800753c:	fffffcff 	.word	0xfffffcff

08007540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	2201      	movs	r2, #1
 8007550:	4393      	bics	r3, r2
 8007552:	001a      	movs	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2270      	movs	r2, #112	; 0x70
 800756e:	4393      	bics	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2203      	movs	r2, #3
 8007576:	4393      	bics	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2202      	movs	r2, #2
 8007588:	4393      	bics	r3, r2
 800758a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a27      	ldr	r2, [pc, #156]	; (8007638 <TIM_OC1_SetConfig+0xf8>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00b      	beq.n	80075b6 <TIM_OC1_SetConfig+0x76>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a26      	ldr	r2, [pc, #152]	; (800763c <TIM_OC1_SetConfig+0xfc>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d007      	beq.n	80075b6 <TIM_OC1_SetConfig+0x76>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a25      	ldr	r2, [pc, #148]	; (8007640 <TIM_OC1_SetConfig+0x100>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d003      	beq.n	80075b6 <TIM_OC1_SetConfig+0x76>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a24      	ldr	r2, [pc, #144]	; (8007644 <TIM_OC1_SetConfig+0x104>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d10c      	bne.n	80075d0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2208      	movs	r2, #8
 80075ba:	4393      	bics	r3, r2
 80075bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2204      	movs	r2, #4
 80075cc:	4393      	bics	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a19      	ldr	r2, [pc, #100]	; (8007638 <TIM_OC1_SetConfig+0xf8>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d00b      	beq.n	80075f0 <TIM_OC1_SetConfig+0xb0>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a18      	ldr	r2, [pc, #96]	; (800763c <TIM_OC1_SetConfig+0xfc>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d007      	beq.n	80075f0 <TIM_OC1_SetConfig+0xb0>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a17      	ldr	r2, [pc, #92]	; (8007640 <TIM_OC1_SetConfig+0x100>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d003      	beq.n	80075f0 <TIM_OC1_SetConfig+0xb0>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a16      	ldr	r2, [pc, #88]	; (8007644 <TIM_OC1_SetConfig+0x104>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d111      	bne.n	8007614 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	4a15      	ldr	r2, [pc, #84]	; (8007648 <TIM_OC1_SetConfig+0x108>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	4a14      	ldr	r2, [pc, #80]	; (800764c <TIM_OC1_SetConfig+0x10c>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	4313      	orrs	r3, r2
 8007612:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	621a      	str	r2, [r3, #32]
}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	46bd      	mov	sp, r7
 8007632:	b006      	add	sp, #24
 8007634:	bd80      	pop	{r7, pc}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	40012c00 	.word	0x40012c00
 800763c:	40014000 	.word	0x40014000
 8007640:	40014400 	.word	0x40014400
 8007644:	40014800 	.word	0x40014800
 8007648:	fffffeff 	.word	0xfffffeff
 800764c:	fffffdff 	.word	0xfffffdff

08007650 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
 8007658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a1b      	ldr	r3, [r3, #32]
 800765e:	2210      	movs	r2, #16
 8007660:	4393      	bics	r3, r2
 8007662:	001a      	movs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4a2e      	ldr	r2, [pc, #184]	; (8007738 <TIM_OC2_SetConfig+0xe8>)
 800767e:	4013      	ands	r3, r2
 8007680:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4a2d      	ldr	r2, [pc, #180]	; (800773c <TIM_OC2_SetConfig+0xec>)
 8007686:	4013      	ands	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2220      	movs	r2, #32
 800769a:	4393      	bics	r3, r2
 800769c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a24      	ldr	r2, [pc, #144]	; (8007740 <TIM_OC2_SetConfig+0xf0>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d10d      	bne.n	80076ce <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2280      	movs	r2, #128	; 0x80
 80076b6:	4393      	bics	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2240      	movs	r2, #64	; 0x40
 80076ca:	4393      	bics	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a1b      	ldr	r2, [pc, #108]	; (8007740 <TIM_OC2_SetConfig+0xf0>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00b      	beq.n	80076ee <TIM_OC2_SetConfig+0x9e>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a1a      	ldr	r2, [pc, #104]	; (8007744 <TIM_OC2_SetConfig+0xf4>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d007      	beq.n	80076ee <TIM_OC2_SetConfig+0x9e>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a19      	ldr	r2, [pc, #100]	; (8007748 <TIM_OC2_SetConfig+0xf8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d003      	beq.n	80076ee <TIM_OC2_SetConfig+0x9e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a18      	ldr	r2, [pc, #96]	; (800774c <TIM_OC2_SetConfig+0xfc>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d113      	bne.n	8007716 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	4a17      	ldr	r2, [pc, #92]	; (8007750 <TIM_OC2_SetConfig+0x100>)
 80076f2:	4013      	ands	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	4a16      	ldr	r2, [pc, #88]	; (8007754 <TIM_OC2_SetConfig+0x104>)
 80076fa:	4013      	ands	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	4313      	orrs	r3, r2
 8007708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685a      	ldr	r2, [r3, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	621a      	str	r2, [r3, #32]
}
 8007730:	46c0      	nop			; (mov r8, r8)
 8007732:	46bd      	mov	sp, r7
 8007734:	b006      	add	sp, #24
 8007736:	bd80      	pop	{r7, pc}
 8007738:	ffff8fff 	.word	0xffff8fff
 800773c:	fffffcff 	.word	0xfffffcff
 8007740:	40012c00 	.word	0x40012c00
 8007744:	40014000 	.word	0x40014000
 8007748:	40014400 	.word	0x40014400
 800774c:	40014800 	.word	0x40014800
 8007750:	fffffbff 	.word	0xfffffbff
 8007754:	fffff7ff 	.word	0xfffff7ff

08007758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a1b      	ldr	r3, [r3, #32]
 8007766:	4a35      	ldr	r2, [pc, #212]	; (800783c <TIM_OC3_SetConfig+0xe4>)
 8007768:	401a      	ands	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2270      	movs	r2, #112	; 0x70
 8007784:	4393      	bics	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2203      	movs	r2, #3
 800778c:	4393      	bics	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	4a28      	ldr	r2, [pc, #160]	; (8007840 <TIM_OC3_SetConfig+0xe8>)
 800779e:	4013      	ands	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	021b      	lsls	r3, r3, #8
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a24      	ldr	r2, [pc, #144]	; (8007844 <TIM_OC3_SetConfig+0xec>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d10d      	bne.n	80077d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	4a23      	ldr	r2, [pc, #140]	; (8007848 <TIM_OC3_SetConfig+0xf0>)
 80077ba:	4013      	ands	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	4a1f      	ldr	r2, [pc, #124]	; (800784c <TIM_OC3_SetConfig+0xf4>)
 80077ce:	4013      	ands	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a1b      	ldr	r2, [pc, #108]	; (8007844 <TIM_OC3_SetConfig+0xec>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00b      	beq.n	80077f2 <TIM_OC3_SetConfig+0x9a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a1c      	ldr	r2, [pc, #112]	; (8007850 <TIM_OC3_SetConfig+0xf8>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d007      	beq.n	80077f2 <TIM_OC3_SetConfig+0x9a>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a1b      	ldr	r2, [pc, #108]	; (8007854 <TIM_OC3_SetConfig+0xfc>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d003      	beq.n	80077f2 <TIM_OC3_SetConfig+0x9a>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	4a1a      	ldr	r2, [pc, #104]	; (8007858 <TIM_OC3_SetConfig+0x100>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d113      	bne.n	800781a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	4a19      	ldr	r2, [pc, #100]	; (800785c <TIM_OC3_SetConfig+0x104>)
 80077f6:	4013      	ands	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4a18      	ldr	r2, [pc, #96]	; (8007860 <TIM_OC3_SetConfig+0x108>)
 80077fe:	4013      	ands	r3, r2
 8007800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	4313      	orrs	r3, r2
 800780c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	693a      	ldr	r2, [r7, #16]
 800781e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	621a      	str	r2, [r3, #32]
}
 8007834:	46c0      	nop			; (mov r8, r8)
 8007836:	46bd      	mov	sp, r7
 8007838:	b006      	add	sp, #24
 800783a:	bd80      	pop	{r7, pc}
 800783c:	fffffeff 	.word	0xfffffeff
 8007840:	fffffdff 	.word	0xfffffdff
 8007844:	40012c00 	.word	0x40012c00
 8007848:	fffff7ff 	.word	0xfffff7ff
 800784c:	fffffbff 	.word	0xfffffbff
 8007850:	40014000 	.word	0x40014000
 8007854:	40014400 	.word	0x40014400
 8007858:	40014800 	.word	0x40014800
 800785c:	ffffefff 	.word	0xffffefff
 8007860:	ffffdfff 	.word	0xffffdfff

08007864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	4a28      	ldr	r2, [pc, #160]	; (8007914 <TIM_OC4_SetConfig+0xb0>)
 8007874:	401a      	ands	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	69db      	ldr	r3, [r3, #28]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4a22      	ldr	r2, [pc, #136]	; (8007918 <TIM_OC4_SetConfig+0xb4>)
 8007890:	4013      	ands	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4a21      	ldr	r2, [pc, #132]	; (800791c <TIM_OC4_SetConfig+0xb8>)
 8007898:	4013      	ands	r3, r2
 800789a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	4a1d      	ldr	r2, [pc, #116]	; (8007920 <TIM_OC4_SetConfig+0xbc>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	031b      	lsls	r3, r3, #12
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a19      	ldr	r2, [pc, #100]	; (8007924 <TIM_OC4_SetConfig+0xc0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00b      	beq.n	80078dc <TIM_OC4_SetConfig+0x78>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a18      	ldr	r2, [pc, #96]	; (8007928 <TIM_OC4_SetConfig+0xc4>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d007      	beq.n	80078dc <TIM_OC4_SetConfig+0x78>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a17      	ldr	r2, [pc, #92]	; (800792c <TIM_OC4_SetConfig+0xc8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d003      	beq.n	80078dc <TIM_OC4_SetConfig+0x78>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a16      	ldr	r2, [pc, #88]	; (8007930 <TIM_OC4_SetConfig+0xcc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d109      	bne.n	80078f0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	4a15      	ldr	r2, [pc, #84]	; (8007934 <TIM_OC4_SetConfig+0xd0>)
 80078e0:	4013      	ands	r3, r2
 80078e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	019b      	lsls	r3, r3, #6
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	621a      	str	r2, [r3, #32]
}
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	46bd      	mov	sp, r7
 800790e:	b006      	add	sp, #24
 8007910:	bd80      	pop	{r7, pc}
 8007912:	46c0      	nop			; (mov r8, r8)
 8007914:	ffffefff 	.word	0xffffefff
 8007918:	ffff8fff 	.word	0xffff8fff
 800791c:	fffffcff 	.word	0xfffffcff
 8007920:	ffffdfff 	.word	0xffffdfff
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40014000 	.word	0x40014000
 800792c:	40014400 	.word	0x40014400
 8007930:	40014800 	.word	0x40014800
 8007934:	ffffbfff 	.word	0xffffbfff

08007938 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	2201      	movs	r2, #1
 8007950:	4393      	bics	r3, r2
 8007952:	001a      	movs	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	22f0      	movs	r2, #240	; 0xf0
 8007962:	4393      	bics	r3, r2
 8007964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	4313      	orrs	r3, r2
 800796e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	220a      	movs	r2, #10
 8007974:	4393      	bics	r3, r2
 8007976:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4313      	orrs	r3, r2
 800797e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	621a      	str	r2, [r3, #32]
}
 800798c:	46c0      	nop			; (mov r8, r8)
 800798e:	46bd      	mov	sp, r7
 8007990:	b006      	add	sp, #24
 8007992:	bd80      	pop	{r7, pc}

08007994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	2210      	movs	r2, #16
 80079a6:	4393      	bics	r3, r2
 80079a8:	001a      	movs	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	4a0d      	ldr	r2, [pc, #52]	; (80079f4 <TIM_TI2_ConfigInputStage+0x60>)
 80079be:	4013      	ands	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	031b      	lsls	r3, r3, #12
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	22a0      	movs	r2, #160	; 0xa0
 80079d0:	4393      	bics	r3, r2
 80079d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	621a      	str	r2, [r3, #32]
}
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	46bd      	mov	sp, r7
 80079ee:	b006      	add	sp, #24
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	ffff0fff 	.word	0xffff0fff

080079f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2270      	movs	r2, #112	; 0x70
 8007a0c:	4393      	bics	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	2207      	movs	r2, #7
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	609a      	str	r2, [r3, #8]
}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	46bd      	mov	sp, r7
 8007a26:	b004      	add	sp, #16
 8007a28:	bd80      	pop	{r7, pc}
	...

08007a2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	4a09      	ldr	r2, [pc, #36]	; (8007a68 <TIM_ETR_SetConfig+0x3c>)
 8007a44:	4013      	ands	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	021a      	lsls	r2, r3, #8
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	431a      	orrs	r2, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	609a      	str	r2, [r3, #8]
}
 8007a60:	46c0      	nop			; (mov r8, r8)
 8007a62:	46bd      	mov	sp, r7
 8007a64:	b006      	add	sp, #24
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	ffff00ff 	.word	0xffff00ff

08007a6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	221f      	movs	r2, #31
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	2201      	movs	r2, #1
 8007a80:	409a      	lsls	r2, r3
 8007a82:	0013      	movs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	43d2      	mvns	r2, r2
 8007a8e:	401a      	ands	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a1a      	ldr	r2, [r3, #32]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	211f      	movs	r1, #31
 8007a9c:	400b      	ands	r3, r1
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4099      	lsls	r1, r3
 8007aa2:	000b      	movs	r3, r1
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	621a      	str	r2, [r3, #32]
}
 8007aaa:	46c0      	nop			; (mov r8, r8)
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b006      	add	sp, #24
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	223c      	movs	r2, #60	; 0x3c
 8007ac2:	5c9b      	ldrb	r3, [r3, r2]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e047      	b.n	8007b5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	223c      	movs	r2, #60	; 0x3c
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	223d      	movs	r2, #61	; 0x3d
 8007ad8:	2102      	movs	r1, #2
 8007ada:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2270      	movs	r2, #112	; 0x70
 8007af0:	4393      	bics	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a16      	ldr	r2, [pc, #88]	; (8007b64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d00f      	beq.n	8007b30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	2380      	movs	r3, #128	; 0x80
 8007b16:	05db      	lsls	r3, r3, #23
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d009      	beq.n	8007b30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a11      	ldr	r2, [pc, #68]	; (8007b68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d004      	beq.n	8007b30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a10      	ldr	r2, [pc, #64]	; (8007b6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d10c      	bne.n	8007b4a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2280      	movs	r2, #128	; 0x80
 8007b34:	4393      	bics	r3, r2
 8007b36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	223d      	movs	r2, #61	; 0x3d
 8007b4e:	2101      	movs	r1, #1
 8007b50:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	223c      	movs	r2, #60	; 0x3c
 8007b56:	2100      	movs	r1, #0
 8007b58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	b004      	add	sp, #16
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	40012c00 	.word	0x40012c00
 8007b68:	40000400 	.word	0x40000400
 8007b6c:	40014000 	.word	0x40014000

08007b70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	223c      	movs	r2, #60	; 0x3c
 8007b82:	5c9b      	ldrb	r3, [r3, r2]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e03e      	b.n	8007c0a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	223c      	movs	r2, #60	; 0x3c
 8007b90:	2101      	movs	r1, #1
 8007b92:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	22ff      	movs	r2, #255	; 0xff
 8007b98:	4393      	bics	r3, r2
 8007b9a:	001a      	movs	r2, r3
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4a1b      	ldr	r2, [pc, #108]	; (8007c14 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007ba8:	401a      	ands	r2, r3
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	4a18      	ldr	r2, [pc, #96]	; (8007c18 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007bb6:	401a      	ands	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4a16      	ldr	r2, [pc, #88]	; (8007c1c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007bc4:	401a      	ands	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	4a13      	ldr	r2, [pc, #76]	; (8007c20 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4a11      	ldr	r2, [pc, #68]	; (8007c24 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007be0:	401a      	ands	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4a0e      	ldr	r2, [pc, #56]	; (8007c28 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8007bee:	401a      	ands	r2, r3
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	223c      	movs	r2, #60	; 0x3c
 8007c04:	2100      	movs	r1, #0
 8007c06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	b004      	add	sp, #16
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	46c0      	nop			; (mov r8, r8)
 8007c14:	fffffcff 	.word	0xfffffcff
 8007c18:	fffffbff 	.word	0xfffffbff
 8007c1c:	fffff7ff 	.word	0xfffff7ff
 8007c20:	ffffefff 	.word	0xffffefff
 8007c24:	ffffdfff 	.word	0xffffdfff
 8007c28:	ffffbfff 	.word	0xffffbfff

08007c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c34:	46c0      	nop			; (mov r8, r8)
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b002      	add	sp, #8
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c44:	46c0      	nop			; (mov r8, r8)
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b002      	add	sp, #8
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e044      	b.n	8007ce8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d107      	bne.n	8007c76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2274      	movs	r2, #116	; 0x74
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	0018      	movs	r0, r3
 8007c72:	f7fc f85f 	bl	8003d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2224      	movs	r2, #36	; 0x24
 8007c7a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2101      	movs	r1, #1
 8007c88:	438a      	bics	r2, r1
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	0018      	movs	r0, r3
 8007c90:	f000 fcce 	bl	8008630 <UART_SetConfig>
 8007c94:	0003      	movs	r3, r0
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d101      	bne.n	8007c9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e024      	b.n	8007ce8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f000 fe49 	bl	8008940 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	490d      	ldr	r1, [pc, #52]	; (8007cf0 <HAL_UART_Init+0xa4>)
 8007cba:	400a      	ands	r2, r1
 8007cbc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	212a      	movs	r1, #42	; 0x2a
 8007cca:	438a      	bics	r2, r1
 8007ccc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2101      	movs	r1, #1
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	f000 fee1 	bl	8008aa8 <UART_CheckIdleState>
 8007ce6:	0003      	movs	r3, r0
}
 8007ce8:	0018      	movs	r0, r3
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b002      	add	sp, #8
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	ffffb7ff 	.word	0xffffb7ff

08007cf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08a      	sub	sp, #40	; 0x28
 8007cf8:	af02      	add	r7, sp, #8
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	603b      	str	r3, [r7, #0]
 8007d00:	1dbb      	adds	r3, r7, #6
 8007d02:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d000      	beq.n	8007d0e <HAL_UART_Transmit+0x1a>
 8007d0c:	e096      	b.n	8007e3c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <HAL_UART_Transmit+0x28>
 8007d14:	1dbb      	adds	r3, r7, #6
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e08e      	b.n	8007e3e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	2380      	movs	r3, #128	; 0x80
 8007d26:	015b      	lsls	r3, r3, #5
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d109      	bne.n	8007d40 <HAL_UART_Transmit+0x4c>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d105      	bne.n	8007d40 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2201      	movs	r2, #1
 8007d38:	4013      	ands	r3, r2
 8007d3a:	d001      	beq.n	8007d40 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e07e      	b.n	8007e3e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2274      	movs	r2, #116	; 0x74
 8007d44:	5c9b      	ldrb	r3, [r3, r2]
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d101      	bne.n	8007d4e <HAL_UART_Transmit+0x5a>
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e077      	b.n	8007e3e <HAL_UART_Transmit+0x14a>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2274      	movs	r2, #116	; 0x74
 8007d52:	2101      	movs	r1, #1
 8007d54:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2280      	movs	r2, #128	; 0x80
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2221      	movs	r2, #33	; 0x21
 8007d62:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d64:	f7fc fb14 	bl	8004390 <HAL_GetTick>
 8007d68:	0003      	movs	r3, r0
 8007d6a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	1dba      	adds	r2, r7, #6
 8007d70:	2150      	movs	r1, #80	; 0x50
 8007d72:	8812      	ldrh	r2, [r2, #0]
 8007d74:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	1dba      	adds	r2, r7, #6
 8007d7a:	2152      	movs	r1, #82	; 0x52
 8007d7c:	8812      	ldrh	r2, [r2, #0]
 8007d7e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	2380      	movs	r3, #128	; 0x80
 8007d86:	015b      	lsls	r3, r3, #5
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d108      	bne.n	8007d9e <HAL_UART_Transmit+0xaa>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d104      	bne.n	8007d9e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	61bb      	str	r3, [r7, #24]
 8007d9c:	e003      	b.n	8007da6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2274      	movs	r2, #116	; 0x74
 8007daa:	2100      	movs	r1, #0
 8007dac:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8007dae:	e02d      	b.n	8007e0c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	0013      	movs	r3, r2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2180      	movs	r1, #128	; 0x80
 8007dbe:	f000 febb 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8007dc2:	1e03      	subs	r3, r0, #0
 8007dc4:	d001      	beq.n	8007dca <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e039      	b.n	8007e3e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d10b      	bne.n	8007de8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	881a      	ldrh	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	05d2      	lsls	r2, r2, #23
 8007dda:	0dd2      	lsrs	r2, r2, #23
 8007ddc:	b292      	uxth	r2, r2
 8007dde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	3302      	adds	r3, #2
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	e008      	b.n	8007dfa <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	781a      	ldrb	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	b292      	uxth	r2, r2
 8007df2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	3301      	adds	r3, #1
 8007df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2252      	movs	r2, #82	; 0x52
 8007dfe:	5a9b      	ldrh	r3, [r3, r2]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b299      	uxth	r1, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2252      	movs	r2, #82	; 0x52
 8007e0a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2252      	movs	r2, #82	; 0x52
 8007e10:	5a9b      	ldrh	r3, [r3, r2]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1cb      	bne.n	8007db0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	68f8      	ldr	r0, [r7, #12]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	0013      	movs	r3, r2
 8007e22:	2200      	movs	r2, #0
 8007e24:	2140      	movs	r1, #64	; 0x40
 8007e26:	f000 fe87 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8007e2a:	1e03      	subs	r3, r0, #0
 8007e2c:	d001      	beq.n	8007e32 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e005      	b.n	8007e3e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2220      	movs	r2, #32
 8007e36:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	e000      	b.n	8007e3e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8007e3c:	2302      	movs	r3, #2
  }
}
 8007e3e:	0018      	movs	r0, r3
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b008      	add	sp, #32
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b088      	sub	sp, #32
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	1dbb      	adds	r3, r7, #6
 8007e52:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	d150      	bne.n	8007efe <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <HAL_UART_Receive_DMA+0x24>
 8007e62:	1dbb      	adds	r3, r7, #6
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e048      	b.n	8007f00 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	689a      	ldr	r2, [r3, #8]
 8007e72:	2380      	movs	r3, #128	; 0x80
 8007e74:	015b      	lsls	r3, r3, #5
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d109      	bne.n	8007e8e <HAL_UART_Receive_DMA+0x48>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d105      	bne.n	8007e8e <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2201      	movs	r2, #1
 8007e86:	4013      	ands	r3, r2
 8007e88:	d001      	beq.n	8007e8e <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e038      	b.n	8007f00 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2274      	movs	r2, #116	; 0x74
 8007e92:	5c9b      	ldrb	r3, [r3, r2]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d101      	bne.n	8007e9c <HAL_UART_Receive_DMA+0x56>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e031      	b.n	8007f00 <HAL_UART_Receive_DMA+0xba>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2274      	movs	r2, #116	; 0x74
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
 8007eb0:	2380      	movs	r3, #128	; 0x80
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	d019      	beq.n	8007eec <HAL_UART_Receive_DMA+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8007ebe:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ec0:	61fb      	str	r3, [r7, #28]
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f383 8810 	msr	PRIMASK, r3
}
 8007ecc:	46c0      	nop			; (mov r8, r8)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2180      	movs	r1, #128	; 0x80
 8007eda:	04c9      	lsls	r1, r1, #19
 8007edc:	430a      	orrs	r2, r1
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	f383 8810 	msr	PRIMASK, r3
}
 8007eea:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007eec:	1dbb      	adds	r3, r7, #6
 8007eee:	881a      	ldrh	r2, [r3, #0]
 8007ef0:	68b9      	ldr	r1, [r7, #8]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	0018      	movs	r0, r3
 8007ef6:	f000 fee3 	bl	8008cc0 <UART_Start_Receive_DMA>
 8007efa:	0003      	movs	r3, r0
 8007efc:	e000      	b.n	8007f00 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007efe:	2302      	movs	r3, #2
  }
}
 8007f00:	0018      	movs	r0, r3
 8007f02:	46bd      	mov	sp, r7
 8007f04:	b008      	add	sp, #32
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08c      	sub	sp, #48	; 0x30
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	2280      	movs	r2, #128	; 0x80
 8007f24:	4013      	ands	r3, r2
 8007f26:	2b80      	cmp	r3, #128	; 0x80
 8007f28:	d138      	bne.n	8007f9c <HAL_UART_DMAStop+0x94>
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	2b21      	cmp	r3, #33	; 0x21
 8007f2e:	d135      	bne.n	8007f9c <HAL_UART_DMAStop+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f30:	f3ef 8310 	mrs	r3, PRIMASK
 8007f34:	617b      	str	r3, [r7, #20]
  return(result);
 8007f36:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	f383 8810 	msr	PRIMASK, r3
}
 8007f44:	46c0      	nop			; (mov r8, r8)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	689a      	ldr	r2, [r3, #8]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2180      	movs	r1, #128	; 0x80
 8007f52:	438a      	bics	r2, r1
 8007f54:	609a      	str	r2, [r3, #8]
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	f383 8810 	msr	PRIMASK, r3
}
 8007f60:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d014      	beq.n	8007f94 <HAL_UART_DMAStop+0x8c>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f7fd f876 	bl	8005060 <HAL_DMA_Abort>
 8007f74:	1e03      	subs	r3, r0, #0
 8007f76:	d00d      	beq.n	8007f94 <HAL_UART_DMAStop+0x8c>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f7fd f98e 	bl	800529e <HAL_DMA_GetError>
 8007f82:	0003      	movs	r3, r0
 8007f84:	2b20      	cmp	r3, #32
 8007f86:	d105      	bne.n	8007f94 <HAL_UART_DMAStop+0x8c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2280      	movs	r2, #128	; 0x80
 8007f8c:	2110      	movs	r1, #16
 8007f8e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e044      	b.n	800801e <HAL_UART_DMAStop+0x116>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	0018      	movs	r0, r3
 8007f98:	f000 ff34 	bl	8008e04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2240      	movs	r2, #64	; 0x40
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d138      	bne.n	800801c <HAL_UART_DMAStop+0x114>
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	2b22      	cmp	r3, #34	; 0x22
 8007fae:	d135      	bne.n	800801c <HAL_UART_DMAStop+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8007fb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb8:	623b      	str	r3, [r7, #32]
 8007fba:	2301      	movs	r3, #1
 8007fbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f383 8810 	msr	PRIMASK, r3
}
 8007fc4:	46c0      	nop			; (mov r8, r8)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2140      	movs	r1, #64	; 0x40
 8007fd2:	438a      	bics	r2, r1
 8007fd4:	609a      	str	r2, [r3, #8]
 8007fd6:	6a3b      	ldr	r3, [r7, #32]
 8007fd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f383 8810 	msr	PRIMASK, r3
}
 8007fe0:	46c0      	nop			; (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d014      	beq.n	8008014 <HAL_UART_DMAStop+0x10c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f7fd f836 	bl	8005060 <HAL_DMA_Abort>
 8007ff4:	1e03      	subs	r3, r0, #0
 8007ff6:	d00d      	beq.n	8008014 <HAL_UART_DMAStop+0x10c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	f7fd f94e 	bl	800529e <HAL_DMA_GetError>
 8008002:	0003      	movs	r3, r0
 8008004:	2b20      	cmp	r3, #32
 8008006:	d105      	bne.n	8008014 <HAL_UART_DMAStop+0x10c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2280      	movs	r2, #128	; 0x80
 800800c:	2110      	movs	r1, #16
 800800e:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e004      	b.n	800801e <HAL_UART_DMAStop+0x116>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	0018      	movs	r0, r3
 8008018:	f000 ff18 	bl	8008e4c <UART_EndRxTransfer>
  }

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	0018      	movs	r0, r3
 8008020:	46bd      	mov	sp, r7
 8008022:	b00c      	add	sp, #48	; 0x30
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008028:	b590      	push	{r4, r7, lr}
 800802a:	b0ab      	sub	sp, #172	; 0xac
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69db      	ldr	r3, [r3, #28]
 8008036:	22a4      	movs	r2, #164	; 0xa4
 8008038:	18b9      	adds	r1, r7, r2
 800803a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	20a0      	movs	r0, #160	; 0xa0
 8008044:	1839      	adds	r1, r7, r0
 8008046:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	219c      	movs	r1, #156	; 0x9c
 8008050:	1879      	adds	r1, r7, r1
 8008052:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008054:	0011      	movs	r1, r2
 8008056:	18bb      	adds	r3, r7, r2
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a99      	ldr	r2, [pc, #612]	; (80082c0 <HAL_UART_IRQHandler+0x298>)
 800805c:	4013      	ands	r3, r2
 800805e:	2298      	movs	r2, #152	; 0x98
 8008060:	18bc      	adds	r4, r7, r2
 8008062:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008064:	18bb      	adds	r3, r7, r2
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d114      	bne.n	8008096 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800806c:	187b      	adds	r3, r7, r1
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2220      	movs	r2, #32
 8008072:	4013      	ands	r3, r2
 8008074:	d00f      	beq.n	8008096 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008076:	183b      	adds	r3, r7, r0
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2220      	movs	r2, #32
 800807c:	4013      	ands	r3, r2
 800807e:	d00a      	beq.n	8008096 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008084:	2b00      	cmp	r3, #0
 8008086:	d100      	bne.n	800808a <HAL_UART_IRQHandler+0x62>
 8008088:	e296      	b.n	80085b8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	0010      	movs	r0, r2
 8008092:	4798      	blx	r3
      }
      return;
 8008094:	e290      	b.n	80085b8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008096:	2398      	movs	r3, #152	; 0x98
 8008098:	18fb      	adds	r3, r7, r3
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d100      	bne.n	80080a2 <HAL_UART_IRQHandler+0x7a>
 80080a0:	e114      	b.n	80082cc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80080a2:	239c      	movs	r3, #156	; 0x9c
 80080a4:	18fb      	adds	r3, r7, r3
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2201      	movs	r2, #1
 80080aa:	4013      	ands	r3, r2
 80080ac:	d106      	bne.n	80080bc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80080ae:	23a0      	movs	r3, #160	; 0xa0
 80080b0:	18fb      	adds	r3, r7, r3
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a83      	ldr	r2, [pc, #524]	; (80082c4 <HAL_UART_IRQHandler+0x29c>)
 80080b6:	4013      	ands	r3, r2
 80080b8:	d100      	bne.n	80080bc <HAL_UART_IRQHandler+0x94>
 80080ba:	e107      	b.n	80082cc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80080bc:	23a4      	movs	r3, #164	; 0xa4
 80080be:	18fb      	adds	r3, r7, r3
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2201      	movs	r2, #1
 80080c4:	4013      	ands	r3, r2
 80080c6:	d012      	beq.n	80080ee <HAL_UART_IRQHandler+0xc6>
 80080c8:	23a0      	movs	r3, #160	; 0xa0
 80080ca:	18fb      	adds	r3, r7, r3
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	2380      	movs	r3, #128	; 0x80
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	4013      	ands	r3, r2
 80080d4:	d00b      	beq.n	80080ee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2201      	movs	r2, #1
 80080dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2280      	movs	r2, #128	; 0x80
 80080e2:	589b      	ldr	r3, [r3, r2]
 80080e4:	2201      	movs	r2, #1
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2180      	movs	r1, #128	; 0x80
 80080ec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080ee:	23a4      	movs	r3, #164	; 0xa4
 80080f0:	18fb      	adds	r3, r7, r3
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2202      	movs	r2, #2
 80080f6:	4013      	ands	r3, r2
 80080f8:	d011      	beq.n	800811e <HAL_UART_IRQHandler+0xf6>
 80080fa:	239c      	movs	r3, #156	; 0x9c
 80080fc:	18fb      	adds	r3, r7, r3
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2201      	movs	r2, #1
 8008102:	4013      	ands	r3, r2
 8008104:	d00b      	beq.n	800811e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2202      	movs	r2, #2
 800810c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2280      	movs	r2, #128	; 0x80
 8008112:	589b      	ldr	r3, [r3, r2]
 8008114:	2204      	movs	r2, #4
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2180      	movs	r1, #128	; 0x80
 800811c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800811e:	23a4      	movs	r3, #164	; 0xa4
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2204      	movs	r2, #4
 8008126:	4013      	ands	r3, r2
 8008128:	d011      	beq.n	800814e <HAL_UART_IRQHandler+0x126>
 800812a:	239c      	movs	r3, #156	; 0x9c
 800812c:	18fb      	adds	r3, r7, r3
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2201      	movs	r2, #1
 8008132:	4013      	ands	r3, r2
 8008134:	d00b      	beq.n	800814e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2204      	movs	r2, #4
 800813c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2280      	movs	r2, #128	; 0x80
 8008142:	589b      	ldr	r3, [r3, r2]
 8008144:	2202      	movs	r2, #2
 8008146:	431a      	orrs	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2180      	movs	r1, #128	; 0x80
 800814c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800814e:	23a4      	movs	r3, #164	; 0xa4
 8008150:	18fb      	adds	r3, r7, r3
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2208      	movs	r2, #8
 8008156:	4013      	ands	r3, r2
 8008158:	d017      	beq.n	800818a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800815a:	23a0      	movs	r3, #160	; 0xa0
 800815c:	18fb      	adds	r3, r7, r3
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2220      	movs	r2, #32
 8008162:	4013      	ands	r3, r2
 8008164:	d105      	bne.n	8008172 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008166:	239c      	movs	r3, #156	; 0x9c
 8008168:	18fb      	adds	r3, r7, r3
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2201      	movs	r2, #1
 800816e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008170:	d00b      	beq.n	800818a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2208      	movs	r2, #8
 8008178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2280      	movs	r2, #128	; 0x80
 800817e:	589b      	ldr	r3, [r3, r2]
 8008180:	2208      	movs	r2, #8
 8008182:	431a      	orrs	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2180      	movs	r1, #128	; 0x80
 8008188:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800818a:	23a4      	movs	r3, #164	; 0xa4
 800818c:	18fb      	adds	r3, r7, r3
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	2380      	movs	r3, #128	; 0x80
 8008192:	011b      	lsls	r3, r3, #4
 8008194:	4013      	ands	r3, r2
 8008196:	d013      	beq.n	80081c0 <HAL_UART_IRQHandler+0x198>
 8008198:	23a0      	movs	r3, #160	; 0xa0
 800819a:	18fb      	adds	r3, r7, r3
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	2380      	movs	r3, #128	; 0x80
 80081a0:	04db      	lsls	r3, r3, #19
 80081a2:	4013      	ands	r3, r2
 80081a4:	d00c      	beq.n	80081c0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2280      	movs	r2, #128	; 0x80
 80081ac:	0112      	lsls	r2, r2, #4
 80081ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2280      	movs	r2, #128	; 0x80
 80081b4:	589b      	ldr	r3, [r3, r2]
 80081b6:	2220      	movs	r2, #32
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2180      	movs	r1, #128	; 0x80
 80081be:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2280      	movs	r2, #128	; 0x80
 80081c4:	589b      	ldr	r3, [r3, r2]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d100      	bne.n	80081cc <HAL_UART_IRQHandler+0x1a4>
 80081ca:	e1f7      	b.n	80085bc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80081cc:	23a4      	movs	r3, #164	; 0xa4
 80081ce:	18fb      	adds	r3, r7, r3
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2220      	movs	r2, #32
 80081d4:	4013      	ands	r3, r2
 80081d6:	d00e      	beq.n	80081f6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80081d8:	23a0      	movs	r3, #160	; 0xa0
 80081da:	18fb      	adds	r3, r7, r3
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2220      	movs	r2, #32
 80081e0:	4013      	ands	r3, r2
 80081e2:	d008      	beq.n	80081f6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d004      	beq.n	80081f6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	0010      	movs	r0, r2
 80081f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2280      	movs	r2, #128	; 0x80
 80081fa:	589b      	ldr	r3, [r3, r2]
 80081fc:	2194      	movs	r1, #148	; 0x94
 80081fe:	187a      	adds	r2, r7, r1
 8008200:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2240      	movs	r2, #64	; 0x40
 800820a:	4013      	ands	r3, r2
 800820c:	2b40      	cmp	r3, #64	; 0x40
 800820e:	d004      	beq.n	800821a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008210:	187b      	adds	r3, r7, r1
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2228      	movs	r2, #40	; 0x28
 8008216:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008218:	d047      	beq.n	80082aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	0018      	movs	r0, r3
 800821e:	f000 fe15 	bl	8008e4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	2240      	movs	r2, #64	; 0x40
 800822a:	4013      	ands	r3, r2
 800822c:	2b40      	cmp	r3, #64	; 0x40
 800822e:	d137      	bne.n	80082a0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008230:	f3ef 8310 	mrs	r3, PRIMASK
 8008234:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8008236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008238:	2090      	movs	r0, #144	; 0x90
 800823a:	183a      	adds	r2, r7, r0
 800823c:	6013      	str	r3, [r2, #0]
 800823e:	2301      	movs	r3, #1
 8008240:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008244:	f383 8810 	msr	PRIMASK, r3
}
 8008248:	46c0      	nop			; (mov r8, r8)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689a      	ldr	r2, [r3, #8]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2140      	movs	r1, #64	; 0x40
 8008256:	438a      	bics	r2, r1
 8008258:	609a      	str	r2, [r3, #8]
 800825a:	183b      	adds	r3, r7, r0
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008262:	f383 8810 	msr	PRIMASK, r3
}
 8008266:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826c:	2b00      	cmp	r3, #0
 800826e:	d012      	beq.n	8008296 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008274:	4a14      	ldr	r2, [pc, #80]	; (80082c8 <HAL_UART_IRQHandler+0x2a0>)
 8008276:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800827c:	0018      	movs	r0, r3
 800827e:	f7fc ff27 	bl	80050d0 <HAL_DMA_Abort_IT>
 8008282:	1e03      	subs	r3, r0, #0
 8008284:	d01a      	beq.n	80082bc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008290:	0018      	movs	r0, r3
 8008292:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	e012      	b.n	80082bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	0018      	movs	r0, r3
 800829a:	f000 f9b5 	bl	8008608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829e:	e00d      	b.n	80082bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	0018      	movs	r0, r3
 80082a4:	f000 f9b0 	bl	8008608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a8:	e008      	b.n	80082bc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	0018      	movs	r0, r3
 80082ae:	f000 f9ab 	bl	8008608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2280      	movs	r2, #128	; 0x80
 80082b6:	2100      	movs	r1, #0
 80082b8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80082ba:	e17f      	b.n	80085bc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082bc:	46c0      	nop			; (mov r8, r8)
    return;
 80082be:	e17d      	b.n	80085bc <HAL_UART_IRQHandler+0x594>
 80082c0:	0000080f 	.word	0x0000080f
 80082c4:	04000120 	.word	0x04000120
 80082c8:	080090f3 	.word	0x080090f3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d000      	beq.n	80082d6 <HAL_UART_IRQHandler+0x2ae>
 80082d4:	e131      	b.n	800853a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80082d6:	23a4      	movs	r3, #164	; 0xa4
 80082d8:	18fb      	adds	r3, r7, r3
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2210      	movs	r2, #16
 80082de:	4013      	ands	r3, r2
 80082e0:	d100      	bne.n	80082e4 <HAL_UART_IRQHandler+0x2bc>
 80082e2:	e12a      	b.n	800853a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80082e4:	23a0      	movs	r3, #160	; 0xa0
 80082e6:	18fb      	adds	r3, r7, r3
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2210      	movs	r2, #16
 80082ec:	4013      	ands	r3, r2
 80082ee:	d100      	bne.n	80082f2 <HAL_UART_IRQHandler+0x2ca>
 80082f0:	e123      	b.n	800853a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2210      	movs	r2, #16
 80082f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	2240      	movs	r2, #64	; 0x40
 8008302:	4013      	ands	r3, r2
 8008304:	2b40      	cmp	r3, #64	; 0x40
 8008306:	d000      	beq.n	800830a <HAL_UART_IRQHandler+0x2e2>
 8008308:	e09b      	b.n	8008442 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	685a      	ldr	r2, [r3, #4]
 8008312:	217e      	movs	r1, #126	; 0x7e
 8008314:	187b      	adds	r3, r7, r1
 8008316:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008318:	187b      	adds	r3, r7, r1
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d100      	bne.n	8008322 <HAL_UART_IRQHandler+0x2fa>
 8008320:	e14e      	b.n	80085c0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2258      	movs	r2, #88	; 0x58
 8008326:	5a9b      	ldrh	r3, [r3, r2]
 8008328:	187a      	adds	r2, r7, r1
 800832a:	8812      	ldrh	r2, [r2, #0]
 800832c:	429a      	cmp	r2, r3
 800832e:	d300      	bcc.n	8008332 <HAL_UART_IRQHandler+0x30a>
 8008330:	e146      	b.n	80085c0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	187a      	adds	r2, r7, r1
 8008336:	215a      	movs	r1, #90	; 0x5a
 8008338:	8812      	ldrh	r2, [r2, #0]
 800833a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	2b20      	cmp	r3, #32
 8008344:	d06e      	beq.n	8008424 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008346:	f3ef 8310 	mrs	r3, PRIMASK
 800834a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800834e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008350:	2301      	movs	r3, #1
 8008352:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008356:	f383 8810 	msr	PRIMASK, r3
}
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	499a      	ldr	r1, [pc, #616]	; (80085d0 <HAL_UART_IRQHandler+0x5a8>)
 8008368:	400a      	ands	r2, r1
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800836e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008372:	f383 8810 	msr	PRIMASK, r3
}
 8008376:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008378:	f3ef 8310 	mrs	r3, PRIMASK
 800837c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800837e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008380:	677b      	str	r3, [r7, #116]	; 0x74
 8008382:	2301      	movs	r3, #1
 8008384:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008388:	f383 8810 	msr	PRIMASK, r3
}
 800838c:	46c0      	nop			; (mov r8, r8)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2101      	movs	r1, #1
 800839a:	438a      	bics	r2, r1
 800839c:	609a      	str	r2, [r3, #8]
 800839e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083a0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a4:	f383 8810 	msr	PRIMASK, r3
}
 80083a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083aa:	f3ef 8310 	mrs	r3, PRIMASK
 80083ae:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80083b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083b2:	673b      	str	r3, [r7, #112]	; 0x70
 80083b4:	2301      	movs	r3, #1
 80083b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ba:	f383 8810 	msr	PRIMASK, r3
}
 80083be:	46c0      	nop			; (mov r8, r8)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2140      	movs	r1, #64	; 0x40
 80083cc:	438a      	bics	r2, r1
 80083ce:	609a      	str	r2, [r3, #8]
 80083d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083d2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d6:	f383 8810 	msr	PRIMASK, r3
}
 80083da:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2220      	movs	r2, #32
 80083e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e8:	f3ef 8310 	mrs	r3, PRIMASK
 80083ec:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80083ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083f2:	2301      	movs	r3, #1
 80083f4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80083f8:	f383 8810 	msr	PRIMASK, r3
}
 80083fc:	46c0      	nop			; (mov r8, r8)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2110      	movs	r1, #16
 800840a:	438a      	bics	r2, r1
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008410:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008414:	f383 8810 	msr	PRIMASK, r3
}
 8008418:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841e:	0018      	movs	r0, r3
 8008420:	f7fc fe1e 	bl	8005060 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2258      	movs	r2, #88	; 0x58
 8008428:	5a9a      	ldrh	r2, [r3, r2]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	215a      	movs	r1, #90	; 0x5a
 800842e:	5a5b      	ldrh	r3, [r3, r1]
 8008430:	b29b      	uxth	r3, r3
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	b29a      	uxth	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	0011      	movs	r1, r2
 800843a:	0018      	movs	r0, r3
 800843c:	f000 f8ec 	bl	8008618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008440:	e0be      	b.n	80085c0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2258      	movs	r2, #88	; 0x58
 8008446:	5a99      	ldrh	r1, [r3, r2]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	225a      	movs	r2, #90	; 0x5a
 800844c:	5a9b      	ldrh	r3, [r3, r2]
 800844e:	b29a      	uxth	r2, r3
 8008450:	208e      	movs	r0, #142	; 0x8e
 8008452:	183b      	adds	r3, r7, r0
 8008454:	1a8a      	subs	r2, r1, r2
 8008456:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	225a      	movs	r2, #90	; 0x5a
 800845c:	5a9b      	ldrh	r3, [r3, r2]
 800845e:	b29b      	uxth	r3, r3
 8008460:	2b00      	cmp	r3, #0
 8008462:	d100      	bne.n	8008466 <HAL_UART_IRQHandler+0x43e>
 8008464:	e0ae      	b.n	80085c4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8008466:	183b      	adds	r3, r7, r0
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d100      	bne.n	8008470 <HAL_UART_IRQHandler+0x448>
 800846e:	e0a9      	b.n	80085c4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008470:	f3ef 8310 	mrs	r3, PRIMASK
 8008474:	60fb      	str	r3, [r7, #12]
  return(result);
 8008476:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008478:	2488      	movs	r4, #136	; 0x88
 800847a:	193a      	adds	r2, r7, r4
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	2301      	movs	r3, #1
 8008480:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	f383 8810 	msr	PRIMASK, r3
}
 8008488:	46c0      	nop			; (mov r8, r8)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	494f      	ldr	r1, [pc, #316]	; (80085d4 <HAL_UART_IRQHandler+0x5ac>)
 8008496:	400a      	ands	r2, r1
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	193b      	adds	r3, r7, r4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	f383 8810 	msr	PRIMASK, r3
}
 80084a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a8:	f3ef 8310 	mrs	r3, PRIMASK
 80084ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80084ae:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084b0:	2484      	movs	r4, #132	; 0x84
 80084b2:	193a      	adds	r2, r7, r4
 80084b4:	6013      	str	r3, [r2, #0]
 80084b6:	2301      	movs	r3, #1
 80084b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	f383 8810 	msr	PRIMASK, r3
}
 80084c0:	46c0      	nop			; (mov r8, r8)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2101      	movs	r1, #1
 80084ce:	438a      	bics	r2, r1
 80084d0:	609a      	str	r2, [r3, #8]
 80084d2:	193b      	adds	r3, r7, r4
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084d8:	6a3b      	ldr	r3, [r7, #32]
 80084da:	f383 8810 	msr	PRIMASK, r3
}
 80084de:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2220      	movs	r2, #32
 80084e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084f2:	f3ef 8310 	mrs	r3, PRIMASK
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084fa:	2480      	movs	r4, #128	; 0x80
 80084fc:	193a      	adds	r2, r7, r4
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	2301      	movs	r3, #1
 8008502:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008506:	f383 8810 	msr	PRIMASK, r3
}
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2110      	movs	r1, #16
 8008518:	438a      	bics	r2, r1
 800851a:	601a      	str	r2, [r3, #0]
 800851c:	193b      	adds	r3, r7, r4
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	f383 8810 	msr	PRIMASK, r3
}
 8008528:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800852a:	183b      	adds	r3, r7, r0
 800852c:	881a      	ldrh	r2, [r3, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	0011      	movs	r1, r2
 8008532:	0018      	movs	r0, r3
 8008534:	f000 f870 	bl	8008618 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008538:	e044      	b.n	80085c4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800853a:	23a4      	movs	r3, #164	; 0xa4
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	2380      	movs	r3, #128	; 0x80
 8008542:	035b      	lsls	r3, r3, #13
 8008544:	4013      	ands	r3, r2
 8008546:	d010      	beq.n	800856a <HAL_UART_IRQHandler+0x542>
 8008548:	239c      	movs	r3, #156	; 0x9c
 800854a:	18fb      	adds	r3, r7, r3
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	2380      	movs	r3, #128	; 0x80
 8008550:	03db      	lsls	r3, r3, #15
 8008552:	4013      	ands	r3, r2
 8008554:	d009      	beq.n	800856a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2280      	movs	r2, #128	; 0x80
 800855c:	0352      	lsls	r2, r2, #13
 800855e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	0018      	movs	r0, r3
 8008564:	f000 fe07 	bl	8009176 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008568:	e02f      	b.n	80085ca <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800856a:	23a4      	movs	r3, #164	; 0xa4
 800856c:	18fb      	adds	r3, r7, r3
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2280      	movs	r2, #128	; 0x80
 8008572:	4013      	ands	r3, r2
 8008574:	d00f      	beq.n	8008596 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008576:	23a0      	movs	r3, #160	; 0xa0
 8008578:	18fb      	adds	r3, r7, r3
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2280      	movs	r2, #128	; 0x80
 800857e:	4013      	ands	r3, r2
 8008580:	d009      	beq.n	8008596 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008586:	2b00      	cmp	r3, #0
 8008588:	d01e      	beq.n	80085c8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	0010      	movs	r0, r2
 8008592:	4798      	blx	r3
    }
    return;
 8008594:	e018      	b.n	80085c8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008596:	23a4      	movs	r3, #164	; 0xa4
 8008598:	18fb      	adds	r3, r7, r3
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2240      	movs	r2, #64	; 0x40
 800859e:	4013      	ands	r3, r2
 80085a0:	d013      	beq.n	80085ca <HAL_UART_IRQHandler+0x5a2>
 80085a2:	23a0      	movs	r3, #160	; 0xa0
 80085a4:	18fb      	adds	r3, r7, r3
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2240      	movs	r2, #64	; 0x40
 80085aa:	4013      	ands	r3, r2
 80085ac:	d00d      	beq.n	80085ca <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	0018      	movs	r0, r3
 80085b2:	f000 fdb5 	bl	8009120 <UART_EndTransmit_IT>
    return;
 80085b6:	e008      	b.n	80085ca <HAL_UART_IRQHandler+0x5a2>
      return;
 80085b8:	46c0      	nop			; (mov r8, r8)
 80085ba:	e006      	b.n	80085ca <HAL_UART_IRQHandler+0x5a2>
    return;
 80085bc:	46c0      	nop			; (mov r8, r8)
 80085be:	e004      	b.n	80085ca <HAL_UART_IRQHandler+0x5a2>
      return;
 80085c0:	46c0      	nop			; (mov r8, r8)
 80085c2:	e002      	b.n	80085ca <HAL_UART_IRQHandler+0x5a2>
      return;
 80085c4:	46c0      	nop			; (mov r8, r8)
 80085c6:	e000      	b.n	80085ca <HAL_UART_IRQHandler+0x5a2>
    return;
 80085c8:	46c0      	nop			; (mov r8, r8)
  }

}
 80085ca:	46bd      	mov	sp, r7
 80085cc:	b02b      	add	sp, #172	; 0xac
 80085ce:	bd90      	pop	{r4, r7, pc}
 80085d0:	fffffeff 	.word	0xfffffeff
 80085d4:	fffffedf 	.word	0xfffffedf

080085d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80085e0:	46c0      	nop			; (mov r8, r8)
 80085e2:	46bd      	mov	sp, r7
 80085e4:	b002      	add	sp, #8
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80085f0:	46c0      	nop			; (mov r8, r8)
 80085f2:	46bd      	mov	sp, r7
 80085f4:	b002      	add	sp, #8
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008600:	46c0      	nop			; (mov r8, r8)
 8008602:	46bd      	mov	sp, r7
 8008604:	b002      	add	sp, #8
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008610:	46c0      	nop			; (mov r8, r8)
 8008612:	46bd      	mov	sp, r7
 8008614:	b002      	add	sp, #8
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	000a      	movs	r2, r1
 8008622:	1cbb      	adds	r3, r7, #2
 8008624:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008626:	46c0      	nop			; (mov r8, r8)
 8008628:	46bd      	mov	sp, r7
 800862a:	b002      	add	sp, #8
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008638:	231e      	movs	r3, #30
 800863a:	18fb      	adds	r3, r7, r3
 800863c:	2200      	movs	r2, #0
 800863e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	431a      	orrs	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	431a      	orrs	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	4313      	orrs	r3, r2
 8008656:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4aaf      	ldr	r2, [pc, #700]	; (800891c <UART_SetConfig+0x2ec>)
 8008660:	4013      	ands	r3, r2
 8008662:	0019      	movs	r1, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	430a      	orrs	r2, r1
 800866c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	4aaa      	ldr	r2, [pc, #680]	; (8008920 <UART_SetConfig+0x2f0>)
 8008676:	4013      	ands	r3, r2
 8008678:	0019      	movs	r1, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68da      	ldr	r2, [r3, #12]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	4aa1      	ldr	r2, [pc, #644]	; (8008924 <UART_SetConfig+0x2f4>)
 800869e:	4013      	ands	r3, r2
 80086a0:	0019      	movs	r1, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	430a      	orrs	r2, r1
 80086aa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a9d      	ldr	r2, [pc, #628]	; (8008928 <UART_SetConfig+0x2f8>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d127      	bne.n	8008706 <UART_SetConfig+0xd6>
 80086b6:	4b9d      	ldr	r3, [pc, #628]	; (800892c <UART_SetConfig+0x2fc>)
 80086b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ba:	2203      	movs	r2, #3
 80086bc:	4013      	ands	r3, r2
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d00d      	beq.n	80086de <UART_SetConfig+0xae>
 80086c2:	d81b      	bhi.n	80086fc <UART_SetConfig+0xcc>
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d014      	beq.n	80086f2 <UART_SetConfig+0xc2>
 80086c8:	d818      	bhi.n	80086fc <UART_SetConfig+0xcc>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d002      	beq.n	80086d4 <UART_SetConfig+0xa4>
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d00a      	beq.n	80086e8 <UART_SetConfig+0xb8>
 80086d2:	e013      	b.n	80086fc <UART_SetConfig+0xcc>
 80086d4:	231f      	movs	r3, #31
 80086d6:	18fb      	adds	r3, r7, r3
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	e065      	b.n	80087aa <UART_SetConfig+0x17a>
 80086de:	231f      	movs	r3, #31
 80086e0:	18fb      	adds	r3, r7, r3
 80086e2:	2202      	movs	r2, #2
 80086e4:	701a      	strb	r2, [r3, #0]
 80086e6:	e060      	b.n	80087aa <UART_SetConfig+0x17a>
 80086e8:	231f      	movs	r3, #31
 80086ea:	18fb      	adds	r3, r7, r3
 80086ec:	2204      	movs	r2, #4
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	e05b      	b.n	80087aa <UART_SetConfig+0x17a>
 80086f2:	231f      	movs	r3, #31
 80086f4:	18fb      	adds	r3, r7, r3
 80086f6:	2208      	movs	r2, #8
 80086f8:	701a      	strb	r2, [r3, #0]
 80086fa:	e056      	b.n	80087aa <UART_SetConfig+0x17a>
 80086fc:	231f      	movs	r3, #31
 80086fe:	18fb      	adds	r3, r7, r3
 8008700:	2210      	movs	r2, #16
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	e051      	b.n	80087aa <UART_SetConfig+0x17a>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a89      	ldr	r2, [pc, #548]	; (8008930 <UART_SetConfig+0x300>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d134      	bne.n	800877a <UART_SetConfig+0x14a>
 8008710:	4b86      	ldr	r3, [pc, #536]	; (800892c <UART_SetConfig+0x2fc>)
 8008712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008714:	23c0      	movs	r3, #192	; 0xc0
 8008716:	029b      	lsls	r3, r3, #10
 8008718:	4013      	ands	r3, r2
 800871a:	22c0      	movs	r2, #192	; 0xc0
 800871c:	0292      	lsls	r2, r2, #10
 800871e:	4293      	cmp	r3, r2
 8008720:	d017      	beq.n	8008752 <UART_SetConfig+0x122>
 8008722:	22c0      	movs	r2, #192	; 0xc0
 8008724:	0292      	lsls	r2, r2, #10
 8008726:	4293      	cmp	r3, r2
 8008728:	d822      	bhi.n	8008770 <UART_SetConfig+0x140>
 800872a:	2280      	movs	r2, #128	; 0x80
 800872c:	0292      	lsls	r2, r2, #10
 800872e:	4293      	cmp	r3, r2
 8008730:	d019      	beq.n	8008766 <UART_SetConfig+0x136>
 8008732:	2280      	movs	r2, #128	; 0x80
 8008734:	0292      	lsls	r2, r2, #10
 8008736:	4293      	cmp	r3, r2
 8008738:	d81a      	bhi.n	8008770 <UART_SetConfig+0x140>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d004      	beq.n	8008748 <UART_SetConfig+0x118>
 800873e:	2280      	movs	r2, #128	; 0x80
 8008740:	0252      	lsls	r2, r2, #9
 8008742:	4293      	cmp	r3, r2
 8008744:	d00a      	beq.n	800875c <UART_SetConfig+0x12c>
 8008746:	e013      	b.n	8008770 <UART_SetConfig+0x140>
 8008748:	231f      	movs	r3, #31
 800874a:	18fb      	adds	r3, r7, r3
 800874c:	2200      	movs	r2, #0
 800874e:	701a      	strb	r2, [r3, #0]
 8008750:	e02b      	b.n	80087aa <UART_SetConfig+0x17a>
 8008752:	231f      	movs	r3, #31
 8008754:	18fb      	adds	r3, r7, r3
 8008756:	2202      	movs	r2, #2
 8008758:	701a      	strb	r2, [r3, #0]
 800875a:	e026      	b.n	80087aa <UART_SetConfig+0x17a>
 800875c:	231f      	movs	r3, #31
 800875e:	18fb      	adds	r3, r7, r3
 8008760:	2204      	movs	r2, #4
 8008762:	701a      	strb	r2, [r3, #0]
 8008764:	e021      	b.n	80087aa <UART_SetConfig+0x17a>
 8008766:	231f      	movs	r3, #31
 8008768:	18fb      	adds	r3, r7, r3
 800876a:	2208      	movs	r2, #8
 800876c:	701a      	strb	r2, [r3, #0]
 800876e:	e01c      	b.n	80087aa <UART_SetConfig+0x17a>
 8008770:	231f      	movs	r3, #31
 8008772:	18fb      	adds	r3, r7, r3
 8008774:	2210      	movs	r2, #16
 8008776:	701a      	strb	r2, [r3, #0]
 8008778:	e017      	b.n	80087aa <UART_SetConfig+0x17a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a6d      	ldr	r2, [pc, #436]	; (8008934 <UART_SetConfig+0x304>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d104      	bne.n	800878e <UART_SetConfig+0x15e>
 8008784:	231f      	movs	r3, #31
 8008786:	18fb      	adds	r3, r7, r3
 8008788:	2200      	movs	r2, #0
 800878a:	701a      	strb	r2, [r3, #0]
 800878c:	e00d      	b.n	80087aa <UART_SetConfig+0x17a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a69      	ldr	r2, [pc, #420]	; (8008938 <UART_SetConfig+0x308>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d104      	bne.n	80087a2 <UART_SetConfig+0x172>
 8008798:	231f      	movs	r3, #31
 800879a:	18fb      	adds	r3, r7, r3
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]
 80087a0:	e003      	b.n	80087aa <UART_SetConfig+0x17a>
 80087a2:	231f      	movs	r3, #31
 80087a4:	18fb      	adds	r3, r7, r3
 80087a6:	2210      	movs	r2, #16
 80087a8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	69da      	ldr	r2, [r3, #28]
 80087ae:	2380      	movs	r3, #128	; 0x80
 80087b0:	021b      	lsls	r3, r3, #8
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d15d      	bne.n	8008872 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 80087b6:	231f      	movs	r3, #31
 80087b8:	18fb      	adds	r3, r7, r3
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b08      	cmp	r3, #8
 80087be:	d015      	beq.n	80087ec <UART_SetConfig+0x1bc>
 80087c0:	dc18      	bgt.n	80087f4 <UART_SetConfig+0x1c4>
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d00d      	beq.n	80087e2 <UART_SetConfig+0x1b2>
 80087c6:	dc15      	bgt.n	80087f4 <UART_SetConfig+0x1c4>
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d002      	beq.n	80087d2 <UART_SetConfig+0x1a2>
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d005      	beq.n	80087dc <UART_SetConfig+0x1ac>
 80087d0:	e010      	b.n	80087f4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087d2:	f7fd fda7 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 80087d6:	0003      	movs	r3, r0
 80087d8:	61bb      	str	r3, [r7, #24]
        break;
 80087da:	e012      	b.n	8008802 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087dc:	4b57      	ldr	r3, [pc, #348]	; (800893c <UART_SetConfig+0x30c>)
 80087de:	61bb      	str	r3, [r7, #24]
        break;
 80087e0:	e00f      	b.n	8008802 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087e2:	f7fd fd15 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 80087e6:	0003      	movs	r3, r0
 80087e8:	61bb      	str	r3, [r7, #24]
        break;
 80087ea:	e00a      	b.n	8008802 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087ec:	2380      	movs	r3, #128	; 0x80
 80087ee:	021b      	lsls	r3, r3, #8
 80087f0:	61bb      	str	r3, [r7, #24]
        break;
 80087f2:	e006      	b.n	8008802 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087f8:	231e      	movs	r3, #30
 80087fa:	18fb      	adds	r3, r7, r3
 80087fc:	2201      	movs	r2, #1
 80087fe:	701a      	strb	r2, [r3, #0]
        break;
 8008800:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d100      	bne.n	800880a <UART_SetConfig+0x1da>
 8008808:	e07b      	b.n	8008902 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800880a:	69bb      	ldr	r3, [r7, #24]
 800880c:	005a      	lsls	r2, r3, #1
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	085b      	lsrs	r3, r3, #1
 8008814:	18d2      	adds	r2, r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	0019      	movs	r1, r3
 800881c:	0010      	movs	r0, r2
 800881e:	f7f7 fc8f 	bl	8000140 <__udivsi3>
 8008822:	0003      	movs	r3, r0
 8008824:	b29b      	uxth	r3, r3
 8008826:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2b0f      	cmp	r3, #15
 800882c:	d91c      	bls.n	8008868 <UART_SetConfig+0x238>
 800882e:	693a      	ldr	r2, [r7, #16]
 8008830:	2380      	movs	r3, #128	; 0x80
 8008832:	025b      	lsls	r3, r3, #9
 8008834:	429a      	cmp	r2, r3
 8008836:	d217      	bcs.n	8008868 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	b29a      	uxth	r2, r3
 800883c:	200e      	movs	r0, #14
 800883e:	183b      	adds	r3, r7, r0
 8008840:	210f      	movs	r1, #15
 8008842:	438a      	bics	r2, r1
 8008844:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	085b      	lsrs	r3, r3, #1
 800884a:	b29b      	uxth	r3, r3
 800884c:	2207      	movs	r2, #7
 800884e:	4013      	ands	r3, r2
 8008850:	b299      	uxth	r1, r3
 8008852:	183b      	adds	r3, r7, r0
 8008854:	183a      	adds	r2, r7, r0
 8008856:	8812      	ldrh	r2, [r2, #0]
 8008858:	430a      	orrs	r2, r1
 800885a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	183a      	adds	r2, r7, r0
 8008862:	8812      	ldrh	r2, [r2, #0]
 8008864:	60da      	str	r2, [r3, #12]
 8008866:	e04c      	b.n	8008902 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008868:	231e      	movs	r3, #30
 800886a:	18fb      	adds	r3, r7, r3
 800886c:	2201      	movs	r2, #1
 800886e:	701a      	strb	r2, [r3, #0]
 8008870:	e047      	b.n	8008902 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008872:	231f      	movs	r3, #31
 8008874:	18fb      	adds	r3, r7, r3
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b08      	cmp	r3, #8
 800887a:	d015      	beq.n	80088a8 <UART_SetConfig+0x278>
 800887c:	dc18      	bgt.n	80088b0 <UART_SetConfig+0x280>
 800887e:	2b04      	cmp	r3, #4
 8008880:	d00d      	beq.n	800889e <UART_SetConfig+0x26e>
 8008882:	dc15      	bgt.n	80088b0 <UART_SetConfig+0x280>
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <UART_SetConfig+0x25e>
 8008888:	2b02      	cmp	r3, #2
 800888a:	d005      	beq.n	8008898 <UART_SetConfig+0x268>
 800888c:	e010      	b.n	80088b0 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800888e:	f7fd fd49 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8008892:	0003      	movs	r3, r0
 8008894:	61bb      	str	r3, [r7, #24]
        break;
 8008896:	e012      	b.n	80088be <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008898:	4b28      	ldr	r3, [pc, #160]	; (800893c <UART_SetConfig+0x30c>)
 800889a:	61bb      	str	r3, [r7, #24]
        break;
 800889c:	e00f      	b.n	80088be <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800889e:	f7fd fcb7 	bl	8006210 <HAL_RCC_GetSysClockFreq>
 80088a2:	0003      	movs	r3, r0
 80088a4:	61bb      	str	r3, [r7, #24]
        break;
 80088a6:	e00a      	b.n	80088be <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088a8:	2380      	movs	r3, #128	; 0x80
 80088aa:	021b      	lsls	r3, r3, #8
 80088ac:	61bb      	str	r3, [r7, #24]
        break;
 80088ae:	e006      	b.n	80088be <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80088b4:	231e      	movs	r3, #30
 80088b6:	18fb      	adds	r3, r7, r3
 80088b8:	2201      	movs	r2, #1
 80088ba:	701a      	strb	r2, [r3, #0]
        break;
 80088bc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d01e      	beq.n	8008902 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	085a      	lsrs	r2, r3, #1
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	18d2      	adds	r2, r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	0019      	movs	r1, r3
 80088d4:	0010      	movs	r0, r2
 80088d6:	f7f7 fc33 	bl	8000140 <__udivsi3>
 80088da:	0003      	movs	r3, r0
 80088dc:	b29b      	uxth	r3, r3
 80088de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	2b0f      	cmp	r3, #15
 80088e4:	d909      	bls.n	80088fa <UART_SetConfig+0x2ca>
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	2380      	movs	r3, #128	; 0x80
 80088ea:	025b      	lsls	r3, r3, #9
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d204      	bcs.n	80088fa <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	60da      	str	r2, [r3, #12]
 80088f8:	e003      	b.n	8008902 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80088fa:	231e      	movs	r3, #30
 80088fc:	18fb      	adds	r3, r7, r3
 80088fe:	2201      	movs	r2, #1
 8008900:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800890e:	231e      	movs	r3, #30
 8008910:	18fb      	adds	r3, r7, r3
 8008912:	781b      	ldrb	r3, [r3, #0]
}
 8008914:	0018      	movs	r0, r3
 8008916:	46bd      	mov	sp, r7
 8008918:	b008      	add	sp, #32
 800891a:	bd80      	pop	{r7, pc}
 800891c:	efff69f3 	.word	0xefff69f3
 8008920:	ffffcfff 	.word	0xffffcfff
 8008924:	fffff4ff 	.word	0xfffff4ff
 8008928:	40013800 	.word	0x40013800
 800892c:	40021000 	.word	0x40021000
 8008930:	40004400 	.word	0x40004400
 8008934:	40004800 	.word	0x40004800
 8008938:	40004c00 	.word	0x40004c00
 800893c:	007a1200 	.word	0x007a1200

08008940 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	2201      	movs	r2, #1
 800894e:	4013      	ands	r3, r2
 8008950:	d00b      	beq.n	800896a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	4a4a      	ldr	r2, [pc, #296]	; (8008a84 <UART_AdvFeatureConfig+0x144>)
 800895a:	4013      	ands	r3, r2
 800895c:	0019      	movs	r1, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	2202      	movs	r2, #2
 8008970:	4013      	ands	r3, r2
 8008972:	d00b      	beq.n	800898c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	4a43      	ldr	r2, [pc, #268]	; (8008a88 <UART_AdvFeatureConfig+0x148>)
 800897c:	4013      	ands	r3, r2
 800897e:	0019      	movs	r1, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	430a      	orrs	r2, r1
 800898a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008990:	2204      	movs	r2, #4
 8008992:	4013      	ands	r3, r2
 8008994:	d00b      	beq.n	80089ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	4a3b      	ldr	r2, [pc, #236]	; (8008a8c <UART_AdvFeatureConfig+0x14c>)
 800899e:	4013      	ands	r3, r2
 80089a0:	0019      	movs	r1, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b2:	2208      	movs	r2, #8
 80089b4:	4013      	ands	r3, r2
 80089b6:	d00b      	beq.n	80089d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	4a34      	ldr	r2, [pc, #208]	; (8008a90 <UART_AdvFeatureConfig+0x150>)
 80089c0:	4013      	ands	r3, r2
 80089c2:	0019      	movs	r1, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	2210      	movs	r2, #16
 80089d6:	4013      	ands	r3, r2
 80089d8:	d00b      	beq.n	80089f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	4a2c      	ldr	r2, [pc, #176]	; (8008a94 <UART_AdvFeatureConfig+0x154>)
 80089e2:	4013      	ands	r3, r2
 80089e4:	0019      	movs	r1, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	2220      	movs	r2, #32
 80089f8:	4013      	ands	r3, r2
 80089fa:	d00b      	beq.n	8008a14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	4a25      	ldr	r2, [pc, #148]	; (8008a98 <UART_AdvFeatureConfig+0x158>)
 8008a04:	4013      	ands	r3, r2
 8008a06:	0019      	movs	r1, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	2240      	movs	r2, #64	; 0x40
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	d01d      	beq.n	8008a5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	4a1d      	ldr	r2, [pc, #116]	; (8008a9c <UART_AdvFeatureConfig+0x15c>)
 8008a26:	4013      	ands	r3, r2
 8008a28:	0019      	movs	r1, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a3a:	2380      	movs	r3, #128	; 0x80
 8008a3c:	035b      	lsls	r3, r3, #13
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d10b      	bne.n	8008a5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	4a15      	ldr	r2, [pc, #84]	; (8008aa0 <UART_AdvFeatureConfig+0x160>)
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	0019      	movs	r1, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	430a      	orrs	r2, r1
 8008a58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	2280      	movs	r2, #128	; 0x80
 8008a60:	4013      	ands	r3, r2
 8008a62:	d00b      	beq.n	8008a7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	4a0e      	ldr	r2, [pc, #56]	; (8008aa4 <UART_AdvFeatureConfig+0x164>)
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	0019      	movs	r1, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	605a      	str	r2, [r3, #4]
  }
}
 8008a7c:	46c0      	nop			; (mov r8, r8)
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	b002      	add	sp, #8
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	fffdffff 	.word	0xfffdffff
 8008a88:	fffeffff 	.word	0xfffeffff
 8008a8c:	fffbffff 	.word	0xfffbffff
 8008a90:	ffff7fff 	.word	0xffff7fff
 8008a94:	ffffefff 	.word	0xffffefff
 8008a98:	ffffdfff 	.word	0xffffdfff
 8008a9c:	ffefffff 	.word	0xffefffff
 8008aa0:	ff9fffff 	.word	0xff9fffff
 8008aa4:	fff7ffff 	.word	0xfff7ffff

08008aa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af02      	add	r7, sp, #8
 8008aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2280      	movs	r2, #128	; 0x80
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ab8:	f7fb fc6a 	bl	8004390 <HAL_GetTick>
 8008abc:	0003      	movs	r3, r0
 8008abe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2208      	movs	r2, #8
 8008ac8:	4013      	ands	r3, r2
 8008aca:	2b08      	cmp	r3, #8
 8008acc:	d10c      	bne.n	8008ae8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2280      	movs	r2, #128	; 0x80
 8008ad2:	0391      	lsls	r1, r2, #14
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	4a17      	ldr	r2, [pc, #92]	; (8008b34 <UART_CheckIdleState+0x8c>)
 8008ad8:	9200      	str	r2, [sp, #0]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f000 f82c 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8008ae0:	1e03      	subs	r3, r0, #0
 8008ae2:	d001      	beq.n	8008ae8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e021      	b.n	8008b2c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2204      	movs	r2, #4
 8008af0:	4013      	ands	r3, r2
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	d10c      	bne.n	8008b10 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2280      	movs	r2, #128	; 0x80
 8008afa:	03d1      	lsls	r1, r2, #15
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	4a0d      	ldr	r2, [pc, #52]	; (8008b34 <UART_CheckIdleState+0x8c>)
 8008b00:	9200      	str	r2, [sp, #0]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f000 f818 	bl	8008b38 <UART_WaitOnFlagUntilTimeout>
 8008b08:	1e03      	subs	r3, r0, #0
 8008b0a:	d001      	beq.n	8008b10 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e00d      	b.n	8008b2c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2220      	movs	r2, #32
 8008b1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2274      	movs	r2, #116	; 0x74
 8008b26:	2100      	movs	r1, #0
 8008b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	b004      	add	sp, #16
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	01ffffff 	.word	0x01ffffff

08008b38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b094      	sub	sp, #80	; 0x50
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	1dfb      	adds	r3, r7, #7
 8008b46:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b48:	e0a3      	b.n	8008c92 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	d100      	bne.n	8008b52 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008b50:	e09f      	b.n	8008c92 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b52:	f7fb fc1d 	bl	8004390 <HAL_GetTick>
 8008b56:	0002      	movs	r2, r0
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d302      	bcc.n	8008b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d13d      	bne.n	8008be4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b68:	f3ef 8310 	mrs	r3, PRIMASK
 8008b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b70:	647b      	str	r3, [r7, #68]	; 0x44
 8008b72:	2301      	movs	r3, #1
 8008b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b78:	f383 8810 	msr	PRIMASK, r3
}
 8008b7c:	46c0      	nop			; (mov r8, r8)
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	494c      	ldr	r1, [pc, #304]	; (8008cbc <UART_WaitOnFlagUntilTimeout+0x184>)
 8008b8a:	400a      	ands	r2, r1
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b90:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	f383 8810 	msr	PRIMASK, r3
}
 8008b98:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b9e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba2:	643b      	str	r3, [r7, #64]	; 0x40
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	f383 8810 	msr	PRIMASK, r3
}
 8008bae:	46c0      	nop			; (mov r8, r8)
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2101      	movs	r1, #1
 8008bbc:	438a      	bics	r2, r1
 8008bbe:	609a      	str	r2, [r3, #8]
 8008bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc6:	f383 8810 	msr	PRIMASK, r3
}
 8008bca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2274      	movs	r2, #116	; 0x74
 8008bdc:	2100      	movs	r1, #0
 8008bde:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e067      	b.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2204      	movs	r2, #4
 8008bec:	4013      	ands	r3, r2
 8008bee:	d050      	beq.n	8008c92 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	69da      	ldr	r2, [r3, #28]
 8008bf6:	2380      	movs	r3, #128	; 0x80
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	401a      	ands	r2, r3
 8008bfc:	2380      	movs	r3, #128	; 0x80
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d146      	bne.n	8008c92 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2280      	movs	r2, #128	; 0x80
 8008c0a:	0112      	lsls	r2, r2, #4
 8008c0c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008c12:	613b      	str	r3, [r7, #16]
  return(result);
 8008c14:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c18:	2301      	movs	r3, #1
 8008c1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f383 8810 	msr	PRIMASK, r3
}
 8008c22:	46c0      	nop			; (mov r8, r8)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4923      	ldr	r1, [pc, #140]	; (8008cbc <UART_WaitOnFlagUntilTimeout+0x184>)
 8008c30:	400a      	ands	r2, r1
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	f383 8810 	msr	PRIMASK, r3
}
 8008c3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c40:	f3ef 8310 	mrs	r3, PRIMASK
 8008c44:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c46:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c4e:	6a3b      	ldr	r3, [r7, #32]
 8008c50:	f383 8810 	msr	PRIMASK, r3
}
 8008c54:	46c0      	nop			; (mov r8, r8)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2101      	movs	r1, #1
 8008c62:	438a      	bics	r2, r1
 8008c64:	609a      	str	r2, [r3, #8]
 8008c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	f383 8810 	msr	PRIMASK, r3
}
 8008c70:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2220      	movs	r2, #32
 8008c76:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2220      	movs	r2, #32
 8008c7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2280      	movs	r2, #128	; 0x80
 8008c82:	2120      	movs	r1, #32
 8008c84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2274      	movs	r2, #116	; 0x74
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e010      	b.n	8008cb4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	425a      	negs	r2, r3
 8008ca2:	4153      	adcs	r3, r2
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	001a      	movs	r2, r3
 8008ca8:	1dfb      	adds	r3, r7, #7
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d100      	bne.n	8008cb2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8008cb0:	e74b      	b.n	8008b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	b014      	add	sp, #80	; 0x50
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	fffffe5f 	.word	0xfffffe5f

08008cc0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b090      	sub	sp, #64	; 0x40
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	1dbb      	adds	r3, r7, #6
 8008ccc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	68ba      	ldr	r2, [r7, #8]
 8008cd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	1dba      	adds	r2, r7, #6
 8008cd8:	2158      	movs	r1, #88	; 0x58
 8008cda:	8812      	ldrh	r2, [r2, #0]
 8008cdc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2280      	movs	r2, #128	; 0x80
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2222      	movs	r2, #34	; 0x22
 8008cea:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d02b      	beq.n	8008d4c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf8:	4a3f      	ldr	r2, [pc, #252]	; (8008df8 <UART_Start_Receive_DMA+0x138>)
 8008cfa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d00:	4a3e      	ldr	r2, [pc, #248]	; (8008dfc <UART_Start_Receive_DMA+0x13c>)
 8008d02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d08:	4a3d      	ldr	r2, [pc, #244]	; (8008e00 <UART_Start_Receive_DMA+0x140>)
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d10:	2200      	movs	r2, #0
 8008d12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3324      	adds	r3, #36	; 0x24
 8008d1e:	0019      	movs	r1, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d24:	001a      	movs	r2, r3
 8008d26:	1dbb      	adds	r3, r7, #6
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	f7fc f933 	bl	8004f94 <HAL_DMA_Start_IT>
 8008d2e:	1e03      	subs	r3, r0, #0
 8008d30:	d00c      	beq.n	8008d4c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2280      	movs	r2, #128	; 0x80
 8008d36:	2110      	movs	r1, #16
 8008d38:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2274      	movs	r2, #116	; 0x74
 8008d3e:	2100      	movs	r1, #0
 8008d40:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2220      	movs	r2, #32
 8008d46:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e050      	b.n	8008dee <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2274      	movs	r2, #116	; 0x74
 8008d50:	2100      	movs	r1, #0
 8008d52:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d54:	f3ef 8310 	mrs	r3, PRIMASK
 8008d58:	613b      	str	r3, [r7, #16]
  return(result);
 8008d5a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d5e:	2301      	movs	r3, #1
 8008d60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f383 8810 	msr	PRIMASK, r3
}
 8008d68:	46c0      	nop			; (mov r8, r8)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2180      	movs	r1, #128	; 0x80
 8008d76:	0049      	lsls	r1, r1, #1
 8008d78:	430a      	orrs	r2, r1
 8008d7a:	601a      	str	r2, [r3, #0]
 8008d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	f383 8810 	msr	PRIMASK, r3
}
 8008d86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d88:	f3ef 8310 	mrs	r3, PRIMASK
 8008d8c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d8e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d92:	2301      	movs	r3, #1
 8008d94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	f383 8810 	msr	PRIMASK, r3
}
 8008d9c:	46c0      	nop			; (mov r8, r8)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689a      	ldr	r2, [r3, #8]
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	2101      	movs	r1, #1
 8008daa:	430a      	orrs	r2, r1
 8008dac:	609a      	str	r2, [r3, #8]
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	f383 8810 	msr	PRIMASK, r3
}
 8008db8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dba:	f3ef 8310 	mrs	r3, PRIMASK
 8008dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	f383 8810 	msr	PRIMASK, r3
}
 8008dce:	46c0      	nop			; (mov r8, r8)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2140      	movs	r1, #64	; 0x40
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	609a      	str	r2, [r3, #8]
 8008de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	f383 8810 	msr	PRIMASK, r3
}
 8008dea:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	0018      	movs	r0, r3
 8008df0:	46bd      	mov	sp, r7
 8008df2:	b010      	add	sp, #64	; 0x40
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	46c0      	nop			; (mov r8, r8)
 8008df8:	08008f11 	.word	0x08008f11
 8008dfc:	08009035 	.word	0x08009035
 8008e00:	08009071 	.word	0x08009071

08008e04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e10:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e12:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	2301      	movs	r3, #1
 8008e18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f383 8810 	msr	PRIMASK, r3
}
 8008e20:	46c0      	nop			; (mov r8, r8)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	21c0      	movs	r1, #192	; 0xc0
 8008e2e:	438a      	bics	r2, r1
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	f383 8810 	msr	PRIMASK, r3
}
 8008e3c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2220      	movs	r2, #32
 8008e42:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008e44:	46c0      	nop			; (mov r8, r8)
 8008e46:	46bd      	mov	sp, r7
 8008e48:	b006      	add	sp, #24
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08e      	sub	sp, #56	; 0x38
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e54:	f3ef 8310 	mrs	r3, PRIMASK
 8008e58:	617b      	str	r3, [r7, #20]
  return(result);
 8008e5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e5e:	2301      	movs	r3, #1
 8008e60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	f383 8810 	msr	PRIMASK, r3
}
 8008e68:	46c0      	nop			; (mov r8, r8)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4925      	ldr	r1, [pc, #148]	; (8008f0c <UART_EndRxTransfer+0xc0>)
 8008e76:	400a      	ands	r2, r1
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	f383 8810 	msr	PRIMASK, r3
}
 8008e84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e86:	f3ef 8310 	mrs	r3, PRIMASK
 8008e8a:	623b      	str	r3, [r7, #32]
  return(result);
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e90:	2301      	movs	r3, #1
 8008e92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	f383 8810 	msr	PRIMASK, r3
}
 8008e9a:	46c0      	nop			; (mov r8, r8)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689a      	ldr	r2, [r3, #8]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	438a      	bics	r2, r1
 8008eaa:	609a      	str	r2, [r3, #8]
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	f383 8810 	msr	PRIMASK, r3
}
 8008eb6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d118      	bne.n	8008ef2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ec4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ec6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eca:	2301      	movs	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f383 8810 	msr	PRIMASK, r3
}
 8008ed4:	46c0      	nop			; (mov r8, r8)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2110      	movs	r1, #16
 8008ee2:	438a      	bics	r2, r1
 8008ee4:	601a      	str	r2, [r3, #0]
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f383 8810 	msr	PRIMASK, r3
}
 8008ef0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2220      	movs	r2, #32
 8008ef6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008f04:	46c0      	nop			; (mov r8, r8)
 8008f06:	46bd      	mov	sp, r7
 8008f08:	b00e      	add	sp, #56	; 0x38
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	fffffedf 	.word	0xfffffedf

08008f10 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b094      	sub	sp, #80	; 0x50
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	2b20      	cmp	r3, #32
 8008f24:	d06e      	beq.n	8009004 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8008f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f28:	225a      	movs	r2, #90	; 0x5a
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f32:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f34:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f38:	2301      	movs	r3, #1
 8008f3a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	f383 8810 	msr	PRIMASK, r3
}
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4938      	ldr	r1, [pc, #224]	; (8009030 <UART_DMAReceiveCplt+0x120>)
 8008f50:	400a      	ands	r2, r1
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f56:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	f383 8810 	msr	PRIMASK, r3
}
 8008f5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f60:	f3ef 8310 	mrs	r3, PRIMASK
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f68:	647b      	str	r3, [r7, #68]	; 0x44
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f70:	f383 8810 	msr	PRIMASK, r3
}
 8008f74:	46c0      	nop			; (mov r8, r8)
 8008f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2101      	movs	r1, #1
 8008f82:	438a      	bics	r2, r1
 8008f84:	609a      	str	r2, [r3, #8]
 8008f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	f383 8810 	msr	PRIMASK, r3
}
 8008f90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f92:	f3ef 8310 	mrs	r3, PRIMASK
 8008f96:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f9a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fa2:	f383 8810 	msr	PRIMASK, r3
}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2140      	movs	r1, #64	; 0x40
 8008fb4:	438a      	bics	r2, r1
 8008fb6:	609a      	str	r2, [r3, #8]
 8008fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fbe:	f383 8810 	msr	PRIMASK, r3
}
 8008fc2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d118      	bne.n	8009004 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8008fd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fdc:	2301      	movs	r3, #1
 8008fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f383 8810 	msr	PRIMASK, r3
}
 8008fe6:	46c0      	nop			; (mov r8, r8)
 8008fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2110      	movs	r1, #16
 8008ff4:	438a      	bics	r2, r1
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f383 8810 	msr	PRIMASK, r3
}
 8009002:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009008:	2b01      	cmp	r3, #1
 800900a:	d108      	bne.n	800901e <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800900c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800900e:	2258      	movs	r2, #88	; 0x58
 8009010:	5a9a      	ldrh	r2, [r3, r2]
 8009012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009014:	0011      	movs	r1, r2
 8009016:	0018      	movs	r0, r3
 8009018:	f7ff fafe 	bl	8008618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800901c:	e003      	b.n	8009026 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800901e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009020:	0018      	movs	r0, r3
 8009022:	f7ff fae1 	bl	80085e8 <HAL_UART_RxCpltCallback>
}
 8009026:	46c0      	nop			; (mov r8, r8)
 8009028:	46bd      	mov	sp, r7
 800902a:	b014      	add	sp, #80	; 0x50
 800902c:	bd80      	pop	{r7, pc}
 800902e:	46c0      	nop			; (mov r8, r8)
 8009030:	fffffeff 	.word	0xfffffeff

08009034 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009046:	2b01      	cmp	r3, #1
 8009048:	d10a      	bne.n	8009060 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2258      	movs	r2, #88	; 0x58
 800904e:	5a9b      	ldrh	r3, [r3, r2]
 8009050:	085b      	lsrs	r3, r3, #1
 8009052:	b29a      	uxth	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	0011      	movs	r1, r2
 8009058:	0018      	movs	r0, r3
 800905a:	f7ff fadd 	bl	8008618 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800905e:	e003      	b.n	8009068 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	0018      	movs	r0, r3
 8009064:	f7ff fac8 	bl	80085f8 <HAL_UART_RxHalfCpltCallback>
}
 8009068:	46c0      	nop			; (mov r8, r8)
 800906a:	46bd      	mov	sp, r7
 800906c:	b004      	add	sp, #16
 800906e:	bd80      	pop	{r7, pc}

08009070 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009082:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009088:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	2280      	movs	r2, #128	; 0x80
 8009092:	4013      	ands	r3, r2
 8009094:	2b80      	cmp	r3, #128	; 0x80
 8009096:	d10a      	bne.n	80090ae <UART_DMAError+0x3e>
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	2b21      	cmp	r3, #33	; 0x21
 800909c:	d107      	bne.n	80090ae <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2252      	movs	r2, #82	; 0x52
 80090a2:	2100      	movs	r1, #0
 80090a4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	0018      	movs	r0, r3
 80090aa:	f7ff feab 	bl	8008e04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	2240      	movs	r2, #64	; 0x40
 80090b6:	4013      	ands	r3, r2
 80090b8:	2b40      	cmp	r3, #64	; 0x40
 80090ba:	d10a      	bne.n	80090d2 <UART_DMAError+0x62>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2b22      	cmp	r3, #34	; 0x22
 80090c0:	d107      	bne.n	80090d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	225a      	movs	r2, #90	; 0x5a
 80090c6:	2100      	movs	r1, #0
 80090c8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	0018      	movs	r0, r3
 80090ce:	f7ff febd 	bl	8008e4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2280      	movs	r2, #128	; 0x80
 80090d6:	589b      	ldr	r3, [r3, r2]
 80090d8:	2210      	movs	r2, #16
 80090da:	431a      	orrs	r2, r3
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2180      	movs	r1, #128	; 0x80
 80090e0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	0018      	movs	r0, r3
 80090e6:	f7ff fa8f 	bl	8008608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ea:	46c0      	nop			; (mov r8, r8)
 80090ec:	46bd      	mov	sp, r7
 80090ee:	b006      	add	sp, #24
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	225a      	movs	r2, #90	; 0x5a
 8009104:	2100      	movs	r1, #0
 8009106:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2252      	movs	r2, #82	; 0x52
 800910c:	2100      	movs	r1, #0
 800910e:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	0018      	movs	r0, r3
 8009114:	f7ff fa78 	bl	8008608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009118:	46c0      	nop			; (mov r8, r8)
 800911a:	46bd      	mov	sp, r7
 800911c:	b004      	add	sp, #16
 800911e:	bd80      	pop	{r7, pc}

08009120 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009128:	f3ef 8310 	mrs	r3, PRIMASK
 800912c:	60bb      	str	r3, [r7, #8]
  return(result);
 800912e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009130:	617b      	str	r3, [r7, #20]
 8009132:	2301      	movs	r3, #1
 8009134:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f383 8810 	msr	PRIMASK, r3
}
 800913c:	46c0      	nop			; (mov r8, r8)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2140      	movs	r1, #64	; 0x40
 800914a:	438a      	bics	r2, r1
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	f383 8810 	msr	PRIMASK, r3
}
 8009158:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	0018      	movs	r0, r3
 800916a:	f7ff fa35 	bl	80085d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	46bd      	mov	sp, r7
 8009172:	b006      	add	sp, #24
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800917e:	46c0      	nop			; (mov r8, r8)
 8009180:	46bd      	mov	sp, r7
 8009182:	b002      	add	sp, #8
 8009184:	bd80      	pop	{r7, pc}

08009186 <atoi>:
 8009186:	b510      	push	{r4, lr}
 8009188:	220a      	movs	r2, #10
 800918a:	2100      	movs	r1, #0
 800918c:	f000 f954 	bl	8009438 <strtol>
 8009190:	bd10      	pop	{r4, pc}
	...

08009194 <gcvt>:
 8009194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009196:	001c      	movs	r4, r3
 8009198:	0015      	movs	r5, r2
 800919a:	2300      	movs	r3, #0
 800919c:	2200      	movs	r2, #0
 800919e:	b085      	sub	sp, #20
 80091a0:	0006      	movs	r6, r0
 80091a2:	000f      	movs	r7, r1
 80091a4:	f7f7 f958 	bl	8000458 <__aeabi_dcmplt>
 80091a8:	0023      	movs	r3, r4
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d003      	beq.n	80091b6 <gcvt+0x22>
 80091ae:	232d      	movs	r3, #45	; 0x2d
 80091b0:	3d01      	subs	r5, #1
 80091b2:	7023      	strb	r3, [r4, #0]
 80091b4:	1c63      	adds	r3, r4, #1
 80091b6:	2200      	movs	r2, #0
 80091b8:	4908      	ldr	r1, [pc, #32]	; (80091dc <gcvt+0x48>)
 80091ba:	9203      	str	r2, [sp, #12]
 80091bc:	3267      	adds	r2, #103	; 0x67
 80091be:	9202      	str	r2, [sp, #8]
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	9500      	str	r5, [sp, #0]
 80091c4:	003b      	movs	r3, r7
 80091c6:	0032      	movs	r2, r6
 80091c8:	6808      	ldr	r0, [r1, #0]
 80091ca:	f000 f9c3 	bl	8009554 <_gcvt>
 80091ce:	1e43      	subs	r3, r0, #1
 80091d0:	4198      	sbcs	r0, r3
 80091d2:	4240      	negs	r0, r0
 80091d4:	4004      	ands	r4, r0
 80091d6:	0020      	movs	r0, r4
 80091d8:	b005      	add	sp, #20
 80091da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091dc:	20000014 	.word	0x20000014

080091e0 <__errno>:
 80091e0:	4b01      	ldr	r3, [pc, #4]	; (80091e8 <__errno+0x8>)
 80091e2:	6818      	ldr	r0, [r3, #0]
 80091e4:	4770      	bx	lr
 80091e6:	46c0      	nop			; (mov r8, r8)
 80091e8:	20000014 	.word	0x20000014

080091ec <__libc_init_array>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	2600      	movs	r6, #0
 80091f0:	4d0c      	ldr	r5, [pc, #48]	; (8009224 <__libc_init_array+0x38>)
 80091f2:	4c0d      	ldr	r4, [pc, #52]	; (8009228 <__libc_init_array+0x3c>)
 80091f4:	1b64      	subs	r4, r4, r5
 80091f6:	10a4      	asrs	r4, r4, #2
 80091f8:	42a6      	cmp	r6, r4
 80091fa:	d109      	bne.n	8009210 <__libc_init_array+0x24>
 80091fc:	2600      	movs	r6, #0
 80091fe:	f002 fefd 	bl	800bffc <_init>
 8009202:	4d0a      	ldr	r5, [pc, #40]	; (800922c <__libc_init_array+0x40>)
 8009204:	4c0a      	ldr	r4, [pc, #40]	; (8009230 <__libc_init_array+0x44>)
 8009206:	1b64      	subs	r4, r4, r5
 8009208:	10a4      	asrs	r4, r4, #2
 800920a:	42a6      	cmp	r6, r4
 800920c:	d105      	bne.n	800921a <__libc_init_array+0x2e>
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	00b3      	lsls	r3, r6, #2
 8009212:	58eb      	ldr	r3, [r5, r3]
 8009214:	4798      	blx	r3
 8009216:	3601      	adds	r6, #1
 8009218:	e7ee      	b.n	80091f8 <__libc_init_array+0xc>
 800921a:	00b3      	lsls	r3, r6, #2
 800921c:	58eb      	ldr	r3, [r5, r3]
 800921e:	4798      	blx	r3
 8009220:	3601      	adds	r6, #1
 8009222:	e7f2      	b.n	800920a <__libc_init_array+0x1e>
 8009224:	0800c620 	.word	0x0800c620
 8009228:	0800c620 	.word	0x0800c620
 800922c:	0800c620 	.word	0x0800c620
 8009230:	0800c624 	.word	0x0800c624

08009234 <memcpy>:
 8009234:	2300      	movs	r3, #0
 8009236:	b510      	push	{r4, lr}
 8009238:	429a      	cmp	r2, r3
 800923a:	d100      	bne.n	800923e <memcpy+0xa>
 800923c:	bd10      	pop	{r4, pc}
 800923e:	5ccc      	ldrb	r4, [r1, r3]
 8009240:	54c4      	strb	r4, [r0, r3]
 8009242:	3301      	adds	r3, #1
 8009244:	e7f8      	b.n	8009238 <memcpy+0x4>

08009246 <memset>:
 8009246:	0003      	movs	r3, r0
 8009248:	1882      	adds	r2, r0, r2
 800924a:	4293      	cmp	r3, r2
 800924c:	d100      	bne.n	8009250 <memset+0xa>
 800924e:	4770      	bx	lr
 8009250:	7019      	strb	r1, [r3, #0]
 8009252:	3301      	adds	r3, #1
 8009254:	e7f9      	b.n	800924a <memset+0x4>
	...

08009258 <sniprintf>:
 8009258:	b40c      	push	{r2, r3}
 800925a:	b530      	push	{r4, r5, lr}
 800925c:	4b17      	ldr	r3, [pc, #92]	; (80092bc <sniprintf+0x64>)
 800925e:	000c      	movs	r4, r1
 8009260:	681d      	ldr	r5, [r3, #0]
 8009262:	b09d      	sub	sp, #116	; 0x74
 8009264:	2900      	cmp	r1, #0
 8009266:	da08      	bge.n	800927a <sniprintf+0x22>
 8009268:	238b      	movs	r3, #139	; 0x8b
 800926a:	2001      	movs	r0, #1
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	4240      	negs	r0, r0
 8009270:	b01d      	add	sp, #116	; 0x74
 8009272:	bc30      	pop	{r4, r5}
 8009274:	bc08      	pop	{r3}
 8009276:	b002      	add	sp, #8
 8009278:	4718      	bx	r3
 800927a:	2382      	movs	r3, #130	; 0x82
 800927c:	466a      	mov	r2, sp
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	8293      	strh	r3, [r2, #20]
 8009282:	2300      	movs	r3, #0
 8009284:	9002      	str	r0, [sp, #8]
 8009286:	9006      	str	r0, [sp, #24]
 8009288:	4299      	cmp	r1, r3
 800928a:	d000      	beq.n	800928e <sniprintf+0x36>
 800928c:	1e4b      	subs	r3, r1, #1
 800928e:	9304      	str	r3, [sp, #16]
 8009290:	9307      	str	r3, [sp, #28]
 8009292:	2301      	movs	r3, #1
 8009294:	466a      	mov	r2, sp
 8009296:	425b      	negs	r3, r3
 8009298:	82d3      	strh	r3, [r2, #22]
 800929a:	0028      	movs	r0, r5
 800929c:	ab21      	add	r3, sp, #132	; 0x84
 800929e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092a0:	a902      	add	r1, sp, #8
 80092a2:	9301      	str	r3, [sp, #4]
 80092a4:	f000 ff32 	bl	800a10c <_svfiprintf_r>
 80092a8:	1c43      	adds	r3, r0, #1
 80092aa:	da01      	bge.n	80092b0 <sniprintf+0x58>
 80092ac:	238b      	movs	r3, #139	; 0x8b
 80092ae:	602b      	str	r3, [r5, #0]
 80092b0:	2c00      	cmp	r4, #0
 80092b2:	d0dd      	beq.n	8009270 <sniprintf+0x18>
 80092b4:	2300      	movs	r3, #0
 80092b6:	9a02      	ldr	r2, [sp, #8]
 80092b8:	7013      	strb	r3, [r2, #0]
 80092ba:	e7d9      	b.n	8009270 <sniprintf+0x18>
 80092bc:	20000014 	.word	0x20000014

080092c0 <siprintf>:
 80092c0:	b40e      	push	{r1, r2, r3}
 80092c2:	b500      	push	{lr}
 80092c4:	490b      	ldr	r1, [pc, #44]	; (80092f4 <siprintf+0x34>)
 80092c6:	b09c      	sub	sp, #112	; 0x70
 80092c8:	ab1d      	add	r3, sp, #116	; 0x74
 80092ca:	9002      	str	r0, [sp, #8]
 80092cc:	9006      	str	r0, [sp, #24]
 80092ce:	9107      	str	r1, [sp, #28]
 80092d0:	9104      	str	r1, [sp, #16]
 80092d2:	4809      	ldr	r0, [pc, #36]	; (80092f8 <siprintf+0x38>)
 80092d4:	4909      	ldr	r1, [pc, #36]	; (80092fc <siprintf+0x3c>)
 80092d6:	cb04      	ldmia	r3!, {r2}
 80092d8:	9105      	str	r1, [sp, #20]
 80092da:	6800      	ldr	r0, [r0, #0]
 80092dc:	a902      	add	r1, sp, #8
 80092de:	9301      	str	r3, [sp, #4]
 80092e0:	f000 ff14 	bl	800a10c <_svfiprintf_r>
 80092e4:	2300      	movs	r3, #0
 80092e6:	9a02      	ldr	r2, [sp, #8]
 80092e8:	7013      	strb	r3, [r2, #0]
 80092ea:	b01c      	add	sp, #112	; 0x70
 80092ec:	bc08      	pop	{r3}
 80092ee:	b003      	add	sp, #12
 80092f0:	4718      	bx	r3
 80092f2:	46c0      	nop			; (mov r8, r8)
 80092f4:	7fffffff 	.word	0x7fffffff
 80092f8:	20000014 	.word	0x20000014
 80092fc:	ffff0208 	.word	0xffff0208

08009300 <strchr>:
 8009300:	b2c9      	uxtb	r1, r1
 8009302:	7803      	ldrb	r3, [r0, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d004      	beq.n	8009312 <strchr+0x12>
 8009308:	428b      	cmp	r3, r1
 800930a:	d100      	bne.n	800930e <strchr+0xe>
 800930c:	4770      	bx	lr
 800930e:	3001      	adds	r0, #1
 8009310:	e7f7      	b.n	8009302 <strchr+0x2>
 8009312:	424b      	negs	r3, r1
 8009314:	4159      	adcs	r1, r3
 8009316:	4249      	negs	r1, r1
 8009318:	4008      	ands	r0, r1
 800931a:	e7f7      	b.n	800930c <strchr+0xc>

0800931c <_strtol_l.constprop.0>:
 800931c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800931e:	b087      	sub	sp, #28
 8009320:	001e      	movs	r6, r3
 8009322:	9005      	str	r0, [sp, #20]
 8009324:	9101      	str	r1, [sp, #4]
 8009326:	9202      	str	r2, [sp, #8]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d045      	beq.n	80093b8 <_strtol_l.constprop.0+0x9c>
 800932c:	000b      	movs	r3, r1
 800932e:	2e24      	cmp	r6, #36	; 0x24
 8009330:	d842      	bhi.n	80093b8 <_strtol_l.constprop.0+0x9c>
 8009332:	4a3f      	ldr	r2, [pc, #252]	; (8009430 <_strtol_l.constprop.0+0x114>)
 8009334:	2108      	movs	r1, #8
 8009336:	4694      	mov	ip, r2
 8009338:	001a      	movs	r2, r3
 800933a:	4660      	mov	r0, ip
 800933c:	7814      	ldrb	r4, [r2, #0]
 800933e:	3301      	adds	r3, #1
 8009340:	5d00      	ldrb	r0, [r0, r4]
 8009342:	001d      	movs	r5, r3
 8009344:	0007      	movs	r7, r0
 8009346:	400f      	ands	r7, r1
 8009348:	4208      	tst	r0, r1
 800934a:	d1f5      	bne.n	8009338 <_strtol_l.constprop.0+0x1c>
 800934c:	2c2d      	cmp	r4, #45	; 0x2d
 800934e:	d13a      	bne.n	80093c6 <_strtol_l.constprop.0+0xaa>
 8009350:	2701      	movs	r7, #1
 8009352:	781c      	ldrb	r4, [r3, #0]
 8009354:	1c95      	adds	r5, r2, #2
 8009356:	2e00      	cmp	r6, #0
 8009358:	d065      	beq.n	8009426 <_strtol_l.constprop.0+0x10a>
 800935a:	2e10      	cmp	r6, #16
 800935c:	d109      	bne.n	8009372 <_strtol_l.constprop.0+0x56>
 800935e:	2c30      	cmp	r4, #48	; 0x30
 8009360:	d107      	bne.n	8009372 <_strtol_l.constprop.0+0x56>
 8009362:	2220      	movs	r2, #32
 8009364:	782b      	ldrb	r3, [r5, #0]
 8009366:	4393      	bics	r3, r2
 8009368:	2b58      	cmp	r3, #88	; 0x58
 800936a:	d157      	bne.n	800941c <_strtol_l.constprop.0+0x100>
 800936c:	2610      	movs	r6, #16
 800936e:	786c      	ldrb	r4, [r5, #1]
 8009370:	3502      	adds	r5, #2
 8009372:	4b30      	ldr	r3, [pc, #192]	; (8009434 <_strtol_l.constprop.0+0x118>)
 8009374:	0031      	movs	r1, r6
 8009376:	18fb      	adds	r3, r7, r3
 8009378:	0018      	movs	r0, r3
 800937a:	9303      	str	r3, [sp, #12]
 800937c:	f7f6 ff66 	bl	800024c <__aeabi_uidivmod>
 8009380:	2300      	movs	r3, #0
 8009382:	2201      	movs	r2, #1
 8009384:	4684      	mov	ip, r0
 8009386:	0018      	movs	r0, r3
 8009388:	9104      	str	r1, [sp, #16]
 800938a:	4252      	negs	r2, r2
 800938c:	0021      	movs	r1, r4
 800938e:	3930      	subs	r1, #48	; 0x30
 8009390:	2909      	cmp	r1, #9
 8009392:	d81d      	bhi.n	80093d0 <_strtol_l.constprop.0+0xb4>
 8009394:	000c      	movs	r4, r1
 8009396:	42a6      	cmp	r6, r4
 8009398:	dd28      	ble.n	80093ec <_strtol_l.constprop.0+0xd0>
 800939a:	2b00      	cmp	r3, #0
 800939c:	db24      	blt.n	80093e8 <_strtol_l.constprop.0+0xcc>
 800939e:	0013      	movs	r3, r2
 80093a0:	4584      	cmp	ip, r0
 80093a2:	d306      	bcc.n	80093b2 <_strtol_l.constprop.0+0x96>
 80093a4:	d102      	bne.n	80093ac <_strtol_l.constprop.0+0x90>
 80093a6:	9904      	ldr	r1, [sp, #16]
 80093a8:	42a1      	cmp	r1, r4
 80093aa:	db02      	blt.n	80093b2 <_strtol_l.constprop.0+0x96>
 80093ac:	2301      	movs	r3, #1
 80093ae:	4370      	muls	r0, r6
 80093b0:	1820      	adds	r0, r4, r0
 80093b2:	782c      	ldrb	r4, [r5, #0]
 80093b4:	3501      	adds	r5, #1
 80093b6:	e7e9      	b.n	800938c <_strtol_l.constprop.0+0x70>
 80093b8:	f7ff ff12 	bl	80091e0 <__errno>
 80093bc:	2316      	movs	r3, #22
 80093be:	6003      	str	r3, [r0, #0]
 80093c0:	2000      	movs	r0, #0
 80093c2:	b007      	add	sp, #28
 80093c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c6:	2c2b      	cmp	r4, #43	; 0x2b
 80093c8:	d1c5      	bne.n	8009356 <_strtol_l.constprop.0+0x3a>
 80093ca:	781c      	ldrb	r4, [r3, #0]
 80093cc:	1c95      	adds	r5, r2, #2
 80093ce:	e7c2      	b.n	8009356 <_strtol_l.constprop.0+0x3a>
 80093d0:	0021      	movs	r1, r4
 80093d2:	3941      	subs	r1, #65	; 0x41
 80093d4:	2919      	cmp	r1, #25
 80093d6:	d801      	bhi.n	80093dc <_strtol_l.constprop.0+0xc0>
 80093d8:	3c37      	subs	r4, #55	; 0x37
 80093da:	e7dc      	b.n	8009396 <_strtol_l.constprop.0+0x7a>
 80093dc:	0021      	movs	r1, r4
 80093de:	3961      	subs	r1, #97	; 0x61
 80093e0:	2919      	cmp	r1, #25
 80093e2:	d803      	bhi.n	80093ec <_strtol_l.constprop.0+0xd0>
 80093e4:	3c57      	subs	r4, #87	; 0x57
 80093e6:	e7d6      	b.n	8009396 <_strtol_l.constprop.0+0x7a>
 80093e8:	0013      	movs	r3, r2
 80093ea:	e7e2      	b.n	80093b2 <_strtol_l.constprop.0+0x96>
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	da09      	bge.n	8009404 <_strtol_l.constprop.0+0xe8>
 80093f0:	2322      	movs	r3, #34	; 0x22
 80093f2:	9a05      	ldr	r2, [sp, #20]
 80093f4:	9803      	ldr	r0, [sp, #12]
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	9b02      	ldr	r3, [sp, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0e1      	beq.n	80093c2 <_strtol_l.constprop.0+0xa6>
 80093fe:	1e6b      	subs	r3, r5, #1
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	e007      	b.n	8009414 <_strtol_l.constprop.0+0xf8>
 8009404:	2f00      	cmp	r7, #0
 8009406:	d000      	beq.n	800940a <_strtol_l.constprop.0+0xee>
 8009408:	4240      	negs	r0, r0
 800940a:	9a02      	ldr	r2, [sp, #8]
 800940c:	2a00      	cmp	r2, #0
 800940e:	d0d8      	beq.n	80093c2 <_strtol_l.constprop.0+0xa6>
 8009410:	2b00      	cmp	r3, #0
 8009412:	d1f4      	bne.n	80093fe <_strtol_l.constprop.0+0xe2>
 8009414:	9b02      	ldr	r3, [sp, #8]
 8009416:	9a01      	ldr	r2, [sp, #4]
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	e7d2      	b.n	80093c2 <_strtol_l.constprop.0+0xa6>
 800941c:	2430      	movs	r4, #48	; 0x30
 800941e:	2e00      	cmp	r6, #0
 8009420:	d1a7      	bne.n	8009372 <_strtol_l.constprop.0+0x56>
 8009422:	3608      	adds	r6, #8
 8009424:	e7a5      	b.n	8009372 <_strtol_l.constprop.0+0x56>
 8009426:	2c30      	cmp	r4, #48	; 0x30
 8009428:	d09b      	beq.n	8009362 <_strtol_l.constprop.0+0x46>
 800942a:	260a      	movs	r6, #10
 800942c:	e7a1      	b.n	8009372 <_strtol_l.constprop.0+0x56>
 800942e:	46c0      	nop			; (mov r8, r8)
 8009430:	0800c261 	.word	0x0800c261
 8009434:	7fffffff 	.word	0x7fffffff

08009438 <strtol>:
 8009438:	b510      	push	{r4, lr}
 800943a:	0013      	movs	r3, r2
 800943c:	000a      	movs	r2, r1
 800943e:	0001      	movs	r1, r0
 8009440:	4802      	ldr	r0, [pc, #8]	; (800944c <strtol+0x14>)
 8009442:	6800      	ldr	r0, [r0, #0]
 8009444:	f7ff ff6a 	bl	800931c <_strtol_l.constprop.0>
 8009448:	bd10      	pop	{r4, pc}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	20000014 	.word	0x20000014

08009450 <print_e>:
 8009450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009452:	b08b      	sub	sp, #44	; 0x2c
 8009454:	000f      	movs	r7, r1
 8009456:	a910      	add	r1, sp, #64	; 0x40
 8009458:	c920      	ldmia	r1!, {r5}
 800945a:	780e      	ldrb	r6, [r1, #0]
 800945c:	a908      	add	r1, sp, #32
 800945e:	9104      	str	r1, [sp, #16]
 8009460:	a907      	add	r1, sp, #28
 8009462:	9103      	str	r1, [sp, #12]
 8009464:	a909      	add	r1, sp, #36	; 0x24
 8009466:	9102      	str	r1, [sp, #8]
 8009468:	1c69      	adds	r1, r5, #1
 800946a:	9101      	str	r1, [sp, #4]
 800946c:	2102      	movs	r1, #2
 800946e:	9100      	str	r1, [sp, #0]
 8009470:	f001 f992 	bl	800a798 <_dtoa_r>
 8009474:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009476:	4b36      	ldr	r3, [pc, #216]	; (8009550 <print_e+0x100>)
 8009478:	0001      	movs	r1, r0
 800947a:	429a      	cmp	r2, r3
 800947c:	d104      	bne.n	8009488 <print_e+0x38>
 800947e:	0038      	movs	r0, r7
 8009480:	f001 f8d8 	bl	800a634 <strcpy>
 8009484:	b00b      	add	sp, #44	; 0x2c
 8009486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009488:	7801      	ldrb	r1, [r0, #0]
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	1c7c      	adds	r4, r7, #1
 800948e:	7039      	strb	r1, [r7, #0]
 8009490:	2d00      	cmp	r5, #0
 8009492:	dd01      	ble.n	8009498 <print_e+0x48>
 8009494:	2101      	movs	r1, #1
 8009496:	9112      	str	r1, [sp, #72]	; 0x48
 8009498:	212e      	movs	r1, #46	; 0x2e
 800949a:	7818      	ldrb	r0, [r3, #0]
 800949c:	2800      	cmp	r0, #0
 800949e:	d001      	beq.n	80094a4 <print_e+0x54>
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	dc35      	bgt.n	8009510 <print_e+0xc0>
 80094a4:	2e67      	cmp	r6, #103	; 0x67
 80094a6:	d04b      	beq.n	8009540 <print_e+0xf0>
 80094a8:	2e47      	cmp	r6, #71	; 0x47
 80094aa:	d04b      	beq.n	8009544 <print_e+0xf4>
 80094ac:	232e      	movs	r3, #46	; 0x2e
 80094ae:	2130      	movs	r1, #48	; 0x30
 80094b0:	2d00      	cmp	r5, #0
 80094b2:	dc3a      	bgt.n	800952a <print_e+0xda>
 80094b4:	1e53      	subs	r3, r2, #1
 80094b6:	7026      	strb	r6, [r4, #0]
 80094b8:	9309      	str	r3, [sp, #36]	; 0x24
 80094ba:	1ca5      	adds	r5, r4, #2
 80094bc:	2b00      	cmp	r3, #0
 80094be:	da43      	bge.n	8009548 <print_e+0xf8>
 80094c0:	232d      	movs	r3, #45	; 0x2d
 80094c2:	7063      	strb	r3, [r4, #1]
 80094c4:	3b2c      	subs	r3, #44	; 0x2c
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	9309      	str	r3, [sp, #36]	; 0x24
 80094ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80094cc:	2e63      	cmp	r6, #99	; 0x63
 80094ce:	dd0d      	ble.n	80094ec <print_e+0x9c>
 80094d0:	2164      	movs	r1, #100	; 0x64
 80094d2:	0030      	movs	r0, r6
 80094d4:	f7f6 febe 	bl	8000254 <__divsi3>
 80094d8:	0003      	movs	r3, r0
 80094da:	0002      	movs	r2, r0
 80094dc:	2064      	movs	r0, #100	; 0x64
 80094de:	4240      	negs	r0, r0
 80094e0:	4358      	muls	r0, r3
 80094e2:	3230      	adds	r2, #48	; 0x30
 80094e4:	1980      	adds	r0, r0, r6
 80094e6:	1ce5      	adds	r5, r4, #3
 80094e8:	70a2      	strb	r2, [r4, #2]
 80094ea:	9009      	str	r0, [sp, #36]	; 0x24
 80094ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80094ee:	210a      	movs	r1, #10
 80094f0:	0020      	movs	r0, r4
 80094f2:	f7f6 feaf 	bl	8000254 <__divsi3>
 80094f6:	0003      	movs	r3, r0
 80094f8:	0002      	movs	r2, r0
 80094fa:	200a      	movs	r0, #10
 80094fc:	4240      	negs	r0, r0
 80094fe:	4358      	muls	r0, r3
 8009500:	2300      	movs	r3, #0
 8009502:	1900      	adds	r0, r0, r4
 8009504:	3230      	adds	r2, #48	; 0x30
 8009506:	3030      	adds	r0, #48	; 0x30
 8009508:	702a      	strb	r2, [r5, #0]
 800950a:	7068      	strb	r0, [r5, #1]
 800950c:	70ab      	strb	r3, [r5, #2]
 800950e:	e7b9      	b.n	8009484 <print_e+0x34>
 8009510:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009512:	2800      	cmp	r0, #0
 8009514:	d001      	beq.n	800951a <print_e+0xca>
 8009516:	7021      	strb	r1, [r4, #0]
 8009518:	3401      	adds	r4, #1
 800951a:	7818      	ldrb	r0, [r3, #0]
 800951c:	3d01      	subs	r5, #1
 800951e:	7020      	strb	r0, [r4, #0]
 8009520:	2000      	movs	r0, #0
 8009522:	3301      	adds	r3, #1
 8009524:	3401      	adds	r4, #1
 8009526:	9012      	str	r0, [sp, #72]	; 0x48
 8009528:	e7b7      	b.n	800949a <print_e+0x4a>
 800952a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800952c:	2800      	cmp	r0, #0
 800952e:	d001      	beq.n	8009534 <print_e+0xe4>
 8009530:	7023      	strb	r3, [r4, #0]
 8009532:	3401      	adds	r4, #1
 8009534:	2000      	movs	r0, #0
 8009536:	7021      	strb	r1, [r4, #0]
 8009538:	3d01      	subs	r5, #1
 800953a:	3401      	adds	r4, #1
 800953c:	9012      	str	r0, [sp, #72]	; 0x48
 800953e:	e7b7      	b.n	80094b0 <print_e+0x60>
 8009540:	2665      	movs	r6, #101	; 0x65
 8009542:	e7b7      	b.n	80094b4 <print_e+0x64>
 8009544:	2645      	movs	r6, #69	; 0x45
 8009546:	e7b5      	b.n	80094b4 <print_e+0x64>
 8009548:	232b      	movs	r3, #43	; 0x2b
 800954a:	7063      	strb	r3, [r4, #1]
 800954c:	e7bd      	b.n	80094ca <print_e+0x7a>
 800954e:	46c0      	nop			; (mov r8, r8)
 8009550:	0000270f 	.word	0x0000270f

08009554 <_gcvt>:
 8009554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009556:	0016      	movs	r6, r2
 8009558:	001d      	movs	r5, r3
 800955a:	b08d      	sub	sp, #52	; 0x34
 800955c:	ab14      	add	r3, sp, #80	; 0x50
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	0007      	movs	r7, r0
 8009562:	9307      	str	r3, [sp, #28]
 8009564:	2200      	movs	r2, #0
 8009566:	2300      	movs	r3, #0
 8009568:	0030      	movs	r0, r6
 800956a:	0029      	movs	r1, r5
 800956c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800956e:	f7f6 ff73 	bl	8000458 <__aeabi_dcmplt>
 8009572:	2800      	cmp	r0, #0
 8009574:	d002      	beq.n	800957c <_gcvt+0x28>
 8009576:	2380      	movs	r3, #128	; 0x80
 8009578:	061b      	lsls	r3, r3, #24
 800957a:	18ed      	adds	r5, r5, r3
 800957c:	2200      	movs	r2, #0
 800957e:	2300      	movs	r3, #0
 8009580:	0030      	movs	r0, r6
 8009582:	0029      	movs	r1, r5
 8009584:	f7f6 ff62 	bl	800044c <__aeabi_dcmpeq>
 8009588:	2800      	cmp	r0, #0
 800958a:	d006      	beq.n	800959a <_gcvt+0x46>
 800958c:	2330      	movs	r3, #48	; 0x30
 800958e:	7023      	strb	r3, [r4, #0]
 8009590:	2300      	movs	r3, #0
 8009592:	7063      	strb	r3, [r4, #1]
 8009594:	0020      	movs	r0, r4
 8009596:	b00d      	add	sp, #52	; 0x34
 8009598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959a:	0030      	movs	r0, r6
 800959c:	0029      	movs	r1, r5
 800959e:	4a52      	ldr	r2, [pc, #328]	; (80096e8 <_gcvt+0x194>)
 80095a0:	4b52      	ldr	r3, [pc, #328]	; (80096ec <_gcvt+0x198>)
 80095a2:	f7f6 ff63 	bl	800046c <__aeabi_dcmple>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d00d      	beq.n	80095c6 <_gcvt+0x72>
 80095aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095ac:	0032      	movs	r2, r6
 80095ae:	9302      	str	r3, [sp, #8]
 80095b0:	9b07      	ldr	r3, [sp, #28]
 80095b2:	0021      	movs	r1, r4
 80095b4:	9301      	str	r3, [sp, #4]
 80095b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095b8:	0038      	movs	r0, r7
 80095ba:	3b01      	subs	r3, #1
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	002b      	movs	r3, r5
 80095c0:	f7ff ff46 	bl	8009450 <print_e>
 80095c4:	e7e6      	b.n	8009594 <_gcvt+0x40>
 80095c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80095c8:	f000 fc30 	bl	8009e2c <_mprec_log10>
 80095cc:	0032      	movs	r2, r6
 80095ce:	002b      	movs	r3, r5
 80095d0:	f7f6 ff4c 	bl	800046c <__aeabi_dcmple>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d1e8      	bne.n	80095aa <_gcvt+0x56>
 80095d8:	ab0b      	add	r3, sp, #44	; 0x2c
 80095da:	9304      	str	r3, [sp, #16]
 80095dc:	ab0a      	add	r3, sp, #40	; 0x28
 80095de:	9303      	str	r3, [sp, #12]
 80095e0:	ab09      	add	r3, sp, #36	; 0x24
 80095e2:	9302      	str	r3, [sp, #8]
 80095e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095e6:	0032      	movs	r2, r6
 80095e8:	9301      	str	r3, [sp, #4]
 80095ea:	2302      	movs	r3, #2
 80095ec:	0038      	movs	r0, r7
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	002b      	movs	r3, r5
 80095f2:	f001 f8d1 	bl	800a798 <_dtoa_r>
 80095f6:	4b3e      	ldr	r3, [pc, #248]	; (80096f0 <_gcvt+0x19c>)
 80095f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095fa:	0001      	movs	r1, r0
 80095fc:	0020      	movs	r0, r4
 80095fe:	429a      	cmp	r2, r3
 8009600:	d00c      	beq.n	800961c <_gcvt+0xc8>
 8009602:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009604:	18e5      	adds	r5, r4, r3
 8009606:	780e      	ldrb	r6, [r1, #0]
 8009608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800960a:	1a2b      	subs	r3, r5, r0
 800960c:	2e00      	cmp	r6, #0
 800960e:	d001      	beq.n	8009614 <_gcvt+0xc0>
 8009610:	2a00      	cmp	r2, #0
 8009612:	dc06      	bgt.n	8009622 <_gcvt+0xce>
 8009614:	2501      	movs	r5, #1
 8009616:	2600      	movs	r6, #0
 8009618:	46ac      	mov	ip, r5
 800961a:	e00d      	b.n	8009638 <_gcvt+0xe4>
 800961c:	f001 f80a 	bl	800a634 <strcpy>
 8009620:	e7b8      	b.n	8009594 <_gcvt+0x40>
 8009622:	3a01      	subs	r2, #1
 8009624:	7006      	strb	r6, [r0, #0]
 8009626:	3101      	adds	r1, #1
 8009628:	9209      	str	r2, [sp, #36]	; 0x24
 800962a:	3001      	adds	r0, #1
 800962c:	e7eb      	b.n	8009606 <_gcvt+0xb2>
 800962e:	2530      	movs	r5, #48	; 0x30
 8009630:	4666      	mov	r6, ip
 8009632:	7005      	strb	r5, [r0, #0]
 8009634:	3b01      	subs	r3, #1
 8009636:	3001      	adds	r0, #1
 8009638:	0005      	movs	r5, r0
 800963a:	1e17      	subs	r7, r2, #0
 800963c:	dc35      	bgt.n	80096aa <_gcvt+0x156>
 800963e:	2e00      	cmp	r6, #0
 8009640:	d000      	beq.n	8009644 <_gcvt+0xf0>
 8009642:	9209      	str	r2, [sp, #36]	; 0x24
 8009644:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009646:	2a00      	cmp	r2, #0
 8009648:	d102      	bne.n	8009650 <_gcvt+0xfc>
 800964a:	780a      	ldrb	r2, [r1, #0]
 800964c:	2a00      	cmp	r2, #0
 800964e:	d029      	beq.n	80096a4 <_gcvt+0x150>
 8009650:	4284      	cmp	r4, r0
 8009652:	d102      	bne.n	800965a <_gcvt+0x106>
 8009654:	2230      	movs	r2, #48	; 0x30
 8009656:	1c65      	adds	r5, r4, #1
 8009658:	7022      	strb	r2, [r4, #0]
 800965a:	222e      	movs	r2, #46	; 0x2e
 800965c:	702a      	strb	r2, [r5, #0]
 800965e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009660:	0028      	movs	r0, r5
 8009662:	1b57      	subs	r7, r2, r5
 8009664:	9707      	str	r7, [sp, #28]
 8009666:	2701      	movs	r7, #1
 8009668:	2600      	movs	r6, #0
 800966a:	46bc      	mov	ip, r7
 800966c:	9f07      	ldr	r7, [sp, #28]
 800966e:	42c7      	cmn	r7, r0
 8009670:	d422      	bmi.n	80096b8 <_gcvt+0x164>
 8009672:	2000      	movs	r0, #0
 8009674:	4257      	negs	r7, r2
 8009676:	4282      	cmp	r2, r0
 8009678:	dc00      	bgt.n	800967c <_gcvt+0x128>
 800967a:	0038      	movs	r0, r7
 800967c:	3001      	adds	r0, #1
 800967e:	182d      	adds	r5, r5, r0
 8009680:	2000      	movs	r0, #0
 8009682:	4282      	cmp	r2, r0
 8009684:	dc00      	bgt.n	8009688 <_gcvt+0x134>
 8009686:	0038      	movs	r0, r7
 8009688:	1810      	adds	r0, r2, r0
 800968a:	2e00      	cmp	r6, #0
 800968c:	d000      	beq.n	8009690 <_gcvt+0x13c>
 800968e:	9009      	str	r0, [sp, #36]	; 0x24
 8009690:	002a      	movs	r2, r5
 8009692:	7808      	ldrb	r0, [r1, #0]
 8009694:	0015      	movs	r5, r2
 8009696:	2800      	cmp	r0, #0
 8009698:	d001      	beq.n	800969e <_gcvt+0x14a>
 800969a:	2b00      	cmp	r3, #0
 800969c:	dc11      	bgt.n	80096c2 <_gcvt+0x16e>
 800969e:	9915      	ldr	r1, [sp, #84]	; 0x54
 80096a0:	2900      	cmp	r1, #0
 80096a2:	d11d      	bne.n	80096e0 <_gcvt+0x18c>
 80096a4:	2300      	movs	r3, #0
 80096a6:	702b      	strb	r3, [r5, #0]
 80096a8:	e774      	b.n	8009594 <_gcvt+0x40>
 80096aa:	3a01      	subs	r2, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dcbe      	bgt.n	800962e <_gcvt+0xda>
 80096b0:	2e00      	cmp	r6, #0
 80096b2:	d0c7      	beq.n	8009644 <_gcvt+0xf0>
 80096b4:	9709      	str	r7, [sp, #36]	; 0x24
 80096b6:	e7c5      	b.n	8009644 <_gcvt+0xf0>
 80096b8:	2630      	movs	r6, #48	; 0x30
 80096ba:	3001      	adds	r0, #1
 80096bc:	7006      	strb	r6, [r0, #0]
 80096be:	4666      	mov	r6, ip
 80096c0:	e7d4      	b.n	800966c <_gcvt+0x118>
 80096c2:	7010      	strb	r0, [r2, #0]
 80096c4:	3101      	adds	r1, #1
 80096c6:	3b01      	subs	r3, #1
 80096c8:	3201      	adds	r2, #1
 80096ca:	e7e2      	b.n	8009692 <_gcvt+0x13e>
 80096cc:	700e      	strb	r6, [r1, #0]
 80096ce:	3101      	adds	r1, #1
 80096d0:	1a68      	subs	r0, r5, r1
 80096d2:	2800      	cmp	r0, #0
 80096d4:	dcfa      	bgt.n	80096cc <_gcvt+0x178>
 80096d6:	43dd      	mvns	r5, r3
 80096d8:	17ed      	asrs	r5, r5, #31
 80096da:	401d      	ands	r5, r3
 80096dc:	1955      	adds	r5, r2, r5
 80096de:	e7e1      	b.n	80096a4 <_gcvt+0x150>
 80096e0:	0011      	movs	r1, r2
 80096e2:	2630      	movs	r6, #48	; 0x30
 80096e4:	189d      	adds	r5, r3, r2
 80096e6:	e7f3      	b.n	80096d0 <_gcvt+0x17c>
 80096e8:	eb1c432d 	.word	0xeb1c432d
 80096ec:	3f1a36e2 	.word	0x3f1a36e2
 80096f0:	0000270f 	.word	0x0000270f

080096f4 <_Balloc>:
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80096f8:	0006      	movs	r6, r0
 80096fa:	000c      	movs	r4, r1
 80096fc:	2d00      	cmp	r5, #0
 80096fe:	d10e      	bne.n	800971e <_Balloc+0x2a>
 8009700:	2010      	movs	r0, #16
 8009702:	f001 fe73 	bl	800b3ec <malloc>
 8009706:	1e02      	subs	r2, r0, #0
 8009708:	6270      	str	r0, [r6, #36]	; 0x24
 800970a:	d104      	bne.n	8009716 <_Balloc+0x22>
 800970c:	2166      	movs	r1, #102	; 0x66
 800970e:	4b19      	ldr	r3, [pc, #100]	; (8009774 <_Balloc+0x80>)
 8009710:	4819      	ldr	r0, [pc, #100]	; (8009778 <_Balloc+0x84>)
 8009712:	f000 ff97 	bl	800a644 <__assert_func>
 8009716:	6045      	str	r5, [r0, #4]
 8009718:	6085      	str	r5, [r0, #8]
 800971a:	6005      	str	r5, [r0, #0]
 800971c:	60c5      	str	r5, [r0, #12]
 800971e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009720:	68eb      	ldr	r3, [r5, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d013      	beq.n	800974e <_Balloc+0x5a>
 8009726:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009728:	00a2      	lsls	r2, r4, #2
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	189b      	adds	r3, r3, r2
 800972e:	6818      	ldr	r0, [r3, #0]
 8009730:	2800      	cmp	r0, #0
 8009732:	d118      	bne.n	8009766 <_Balloc+0x72>
 8009734:	2101      	movs	r1, #1
 8009736:	000d      	movs	r5, r1
 8009738:	40a5      	lsls	r5, r4
 800973a:	1d6a      	adds	r2, r5, #5
 800973c:	0030      	movs	r0, r6
 800973e:	0092      	lsls	r2, r2, #2
 8009740:	f000 fb8e 	bl	8009e60 <_calloc_r>
 8009744:	2800      	cmp	r0, #0
 8009746:	d00c      	beq.n	8009762 <_Balloc+0x6e>
 8009748:	6044      	str	r4, [r0, #4]
 800974a:	6085      	str	r5, [r0, #8]
 800974c:	e00d      	b.n	800976a <_Balloc+0x76>
 800974e:	2221      	movs	r2, #33	; 0x21
 8009750:	2104      	movs	r1, #4
 8009752:	0030      	movs	r0, r6
 8009754:	f000 fb84 	bl	8009e60 <_calloc_r>
 8009758:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800975a:	60e8      	str	r0, [r5, #12]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1e1      	bne.n	8009726 <_Balloc+0x32>
 8009762:	2000      	movs	r0, #0
 8009764:	bd70      	pop	{r4, r5, r6, pc}
 8009766:	6802      	ldr	r2, [r0, #0]
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	2300      	movs	r3, #0
 800976c:	6103      	str	r3, [r0, #16]
 800976e:	60c3      	str	r3, [r0, #12]
 8009770:	e7f8      	b.n	8009764 <_Balloc+0x70>
 8009772:	46c0      	nop			; (mov r8, r8)
 8009774:	0800c361 	.word	0x0800c361
 8009778:	0800c378 	.word	0x0800c378

0800977c <_Bfree>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009780:	0005      	movs	r5, r0
 8009782:	000c      	movs	r4, r1
 8009784:	2e00      	cmp	r6, #0
 8009786:	d10e      	bne.n	80097a6 <_Bfree+0x2a>
 8009788:	2010      	movs	r0, #16
 800978a:	f001 fe2f 	bl	800b3ec <malloc>
 800978e:	1e02      	subs	r2, r0, #0
 8009790:	6268      	str	r0, [r5, #36]	; 0x24
 8009792:	d104      	bne.n	800979e <_Bfree+0x22>
 8009794:	218a      	movs	r1, #138	; 0x8a
 8009796:	4b09      	ldr	r3, [pc, #36]	; (80097bc <_Bfree+0x40>)
 8009798:	4809      	ldr	r0, [pc, #36]	; (80097c0 <_Bfree+0x44>)
 800979a:	f000 ff53 	bl	800a644 <__assert_func>
 800979e:	6046      	str	r6, [r0, #4]
 80097a0:	6086      	str	r6, [r0, #8]
 80097a2:	6006      	str	r6, [r0, #0]
 80097a4:	60c6      	str	r6, [r0, #12]
 80097a6:	2c00      	cmp	r4, #0
 80097a8:	d007      	beq.n	80097ba <_Bfree+0x3e>
 80097aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80097ac:	6862      	ldr	r2, [r4, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	0092      	lsls	r2, r2, #2
 80097b2:	189b      	adds	r3, r3, r2
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	6022      	str	r2, [r4, #0]
 80097b8:	601c      	str	r4, [r3, #0]
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	0800c361 	.word	0x0800c361
 80097c0:	0800c378 	.word	0x0800c378

080097c4 <__multadd>:
 80097c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097c6:	000e      	movs	r6, r1
 80097c8:	9001      	str	r0, [sp, #4]
 80097ca:	000c      	movs	r4, r1
 80097cc:	001d      	movs	r5, r3
 80097ce:	2000      	movs	r0, #0
 80097d0:	690f      	ldr	r7, [r1, #16]
 80097d2:	3614      	adds	r6, #20
 80097d4:	6833      	ldr	r3, [r6, #0]
 80097d6:	3001      	adds	r0, #1
 80097d8:	b299      	uxth	r1, r3
 80097da:	4351      	muls	r1, r2
 80097dc:	0c1b      	lsrs	r3, r3, #16
 80097de:	4353      	muls	r3, r2
 80097e0:	1949      	adds	r1, r1, r5
 80097e2:	0c0d      	lsrs	r5, r1, #16
 80097e4:	195b      	adds	r3, r3, r5
 80097e6:	0c1d      	lsrs	r5, r3, #16
 80097e8:	b289      	uxth	r1, r1
 80097ea:	041b      	lsls	r3, r3, #16
 80097ec:	185b      	adds	r3, r3, r1
 80097ee:	c608      	stmia	r6!, {r3}
 80097f0:	4287      	cmp	r7, r0
 80097f2:	dcef      	bgt.n	80097d4 <__multadd+0x10>
 80097f4:	2d00      	cmp	r5, #0
 80097f6:	d022      	beq.n	800983e <__multadd+0x7a>
 80097f8:	68a3      	ldr	r3, [r4, #8]
 80097fa:	42bb      	cmp	r3, r7
 80097fc:	dc19      	bgt.n	8009832 <__multadd+0x6e>
 80097fe:	6863      	ldr	r3, [r4, #4]
 8009800:	9801      	ldr	r0, [sp, #4]
 8009802:	1c59      	adds	r1, r3, #1
 8009804:	f7ff ff76 	bl	80096f4 <_Balloc>
 8009808:	1e06      	subs	r6, r0, #0
 800980a:	d105      	bne.n	8009818 <__multadd+0x54>
 800980c:	0002      	movs	r2, r0
 800980e:	21b5      	movs	r1, #181	; 0xb5
 8009810:	4b0c      	ldr	r3, [pc, #48]	; (8009844 <__multadd+0x80>)
 8009812:	480d      	ldr	r0, [pc, #52]	; (8009848 <__multadd+0x84>)
 8009814:	f000 ff16 	bl	800a644 <__assert_func>
 8009818:	0021      	movs	r1, r4
 800981a:	6923      	ldr	r3, [r4, #16]
 800981c:	310c      	adds	r1, #12
 800981e:	1c9a      	adds	r2, r3, #2
 8009820:	0092      	lsls	r2, r2, #2
 8009822:	300c      	adds	r0, #12
 8009824:	f7ff fd06 	bl	8009234 <memcpy>
 8009828:	0021      	movs	r1, r4
 800982a:	9801      	ldr	r0, [sp, #4]
 800982c:	f7ff ffa6 	bl	800977c <_Bfree>
 8009830:	0034      	movs	r4, r6
 8009832:	1d3b      	adds	r3, r7, #4
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	18e3      	adds	r3, r4, r3
 8009838:	605d      	str	r5, [r3, #4]
 800983a:	1c7b      	adds	r3, r7, #1
 800983c:	6123      	str	r3, [r4, #16]
 800983e:	0020      	movs	r0, r4
 8009840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009842:	46c0      	nop			; (mov r8, r8)
 8009844:	0800c3d4 	.word	0x0800c3d4
 8009848:	0800c378 	.word	0x0800c378

0800984c <__hi0bits>:
 800984c:	0003      	movs	r3, r0
 800984e:	0c02      	lsrs	r2, r0, #16
 8009850:	2000      	movs	r0, #0
 8009852:	4282      	cmp	r2, r0
 8009854:	d101      	bne.n	800985a <__hi0bits+0xe>
 8009856:	041b      	lsls	r3, r3, #16
 8009858:	3010      	adds	r0, #16
 800985a:	0e1a      	lsrs	r2, r3, #24
 800985c:	d101      	bne.n	8009862 <__hi0bits+0x16>
 800985e:	3008      	adds	r0, #8
 8009860:	021b      	lsls	r3, r3, #8
 8009862:	0f1a      	lsrs	r2, r3, #28
 8009864:	d101      	bne.n	800986a <__hi0bits+0x1e>
 8009866:	3004      	adds	r0, #4
 8009868:	011b      	lsls	r3, r3, #4
 800986a:	0f9a      	lsrs	r2, r3, #30
 800986c:	d101      	bne.n	8009872 <__hi0bits+0x26>
 800986e:	3002      	adds	r0, #2
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	2b00      	cmp	r3, #0
 8009874:	db03      	blt.n	800987e <__hi0bits+0x32>
 8009876:	3001      	adds	r0, #1
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	d400      	bmi.n	800987e <__hi0bits+0x32>
 800987c:	2020      	movs	r0, #32
 800987e:	4770      	bx	lr

08009880 <__lo0bits>:
 8009880:	6803      	ldr	r3, [r0, #0]
 8009882:	0002      	movs	r2, r0
 8009884:	2107      	movs	r1, #7
 8009886:	0018      	movs	r0, r3
 8009888:	4008      	ands	r0, r1
 800988a:	420b      	tst	r3, r1
 800988c:	d00d      	beq.n	80098aa <__lo0bits+0x2a>
 800988e:	3906      	subs	r1, #6
 8009890:	2000      	movs	r0, #0
 8009892:	420b      	tst	r3, r1
 8009894:	d105      	bne.n	80098a2 <__lo0bits+0x22>
 8009896:	3002      	adds	r0, #2
 8009898:	4203      	tst	r3, r0
 800989a:	d003      	beq.n	80098a4 <__lo0bits+0x24>
 800989c:	40cb      	lsrs	r3, r1
 800989e:	0008      	movs	r0, r1
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	4770      	bx	lr
 80098a4:	089b      	lsrs	r3, r3, #2
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	e7fb      	b.n	80098a2 <__lo0bits+0x22>
 80098aa:	b299      	uxth	r1, r3
 80098ac:	2900      	cmp	r1, #0
 80098ae:	d101      	bne.n	80098b4 <__lo0bits+0x34>
 80098b0:	2010      	movs	r0, #16
 80098b2:	0c1b      	lsrs	r3, r3, #16
 80098b4:	b2d9      	uxtb	r1, r3
 80098b6:	2900      	cmp	r1, #0
 80098b8:	d101      	bne.n	80098be <__lo0bits+0x3e>
 80098ba:	3008      	adds	r0, #8
 80098bc:	0a1b      	lsrs	r3, r3, #8
 80098be:	0719      	lsls	r1, r3, #28
 80098c0:	d101      	bne.n	80098c6 <__lo0bits+0x46>
 80098c2:	3004      	adds	r0, #4
 80098c4:	091b      	lsrs	r3, r3, #4
 80098c6:	0799      	lsls	r1, r3, #30
 80098c8:	d101      	bne.n	80098ce <__lo0bits+0x4e>
 80098ca:	3002      	adds	r0, #2
 80098cc:	089b      	lsrs	r3, r3, #2
 80098ce:	07d9      	lsls	r1, r3, #31
 80098d0:	d4e9      	bmi.n	80098a6 <__lo0bits+0x26>
 80098d2:	3001      	adds	r0, #1
 80098d4:	085b      	lsrs	r3, r3, #1
 80098d6:	d1e6      	bne.n	80098a6 <__lo0bits+0x26>
 80098d8:	2020      	movs	r0, #32
 80098da:	e7e2      	b.n	80098a2 <__lo0bits+0x22>

080098dc <__i2b>:
 80098dc:	b510      	push	{r4, lr}
 80098de:	000c      	movs	r4, r1
 80098e0:	2101      	movs	r1, #1
 80098e2:	f7ff ff07 	bl	80096f4 <_Balloc>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	d106      	bne.n	80098f8 <__i2b+0x1c>
 80098ea:	21a0      	movs	r1, #160	; 0xa0
 80098ec:	0002      	movs	r2, r0
 80098ee:	4b04      	ldr	r3, [pc, #16]	; (8009900 <__i2b+0x24>)
 80098f0:	4804      	ldr	r0, [pc, #16]	; (8009904 <__i2b+0x28>)
 80098f2:	0049      	lsls	r1, r1, #1
 80098f4:	f000 fea6 	bl	800a644 <__assert_func>
 80098f8:	2301      	movs	r3, #1
 80098fa:	6144      	str	r4, [r0, #20]
 80098fc:	6103      	str	r3, [r0, #16]
 80098fe:	bd10      	pop	{r4, pc}
 8009900:	0800c3d4 	.word	0x0800c3d4
 8009904:	0800c378 	.word	0x0800c378

08009908 <__multiply>:
 8009908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800990a:	690b      	ldr	r3, [r1, #16]
 800990c:	0014      	movs	r4, r2
 800990e:	6912      	ldr	r2, [r2, #16]
 8009910:	000d      	movs	r5, r1
 8009912:	b089      	sub	sp, #36	; 0x24
 8009914:	4293      	cmp	r3, r2
 8009916:	da01      	bge.n	800991c <__multiply+0x14>
 8009918:	0025      	movs	r5, r4
 800991a:	000c      	movs	r4, r1
 800991c:	692f      	ldr	r7, [r5, #16]
 800991e:	6926      	ldr	r6, [r4, #16]
 8009920:	6869      	ldr	r1, [r5, #4]
 8009922:	19bb      	adds	r3, r7, r6
 8009924:	9302      	str	r3, [sp, #8]
 8009926:	68ab      	ldr	r3, [r5, #8]
 8009928:	19ba      	adds	r2, r7, r6
 800992a:	4293      	cmp	r3, r2
 800992c:	da00      	bge.n	8009930 <__multiply+0x28>
 800992e:	3101      	adds	r1, #1
 8009930:	f7ff fee0 	bl	80096f4 <_Balloc>
 8009934:	9001      	str	r0, [sp, #4]
 8009936:	2800      	cmp	r0, #0
 8009938:	d106      	bne.n	8009948 <__multiply+0x40>
 800993a:	215e      	movs	r1, #94	; 0x5e
 800993c:	0002      	movs	r2, r0
 800993e:	4b48      	ldr	r3, [pc, #288]	; (8009a60 <__multiply+0x158>)
 8009940:	4848      	ldr	r0, [pc, #288]	; (8009a64 <__multiply+0x15c>)
 8009942:	31ff      	adds	r1, #255	; 0xff
 8009944:	f000 fe7e 	bl	800a644 <__assert_func>
 8009948:	9b01      	ldr	r3, [sp, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	3314      	adds	r3, #20
 800994e:	469c      	mov	ip, r3
 8009950:	19bb      	adds	r3, r7, r6
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4463      	add	r3, ip
 8009956:	9303      	str	r3, [sp, #12]
 8009958:	4663      	mov	r3, ip
 800995a:	9903      	ldr	r1, [sp, #12]
 800995c:	428b      	cmp	r3, r1
 800995e:	d32c      	bcc.n	80099ba <__multiply+0xb2>
 8009960:	002b      	movs	r3, r5
 8009962:	0022      	movs	r2, r4
 8009964:	3314      	adds	r3, #20
 8009966:	00bf      	lsls	r7, r7, #2
 8009968:	3214      	adds	r2, #20
 800996a:	9306      	str	r3, [sp, #24]
 800996c:	00b6      	lsls	r6, r6, #2
 800996e:	19db      	adds	r3, r3, r7
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	1993      	adds	r3, r2, r6
 8009974:	9307      	str	r3, [sp, #28]
 8009976:	2304      	movs	r3, #4
 8009978:	9305      	str	r3, [sp, #20]
 800997a:	002b      	movs	r3, r5
 800997c:	9904      	ldr	r1, [sp, #16]
 800997e:	3315      	adds	r3, #21
 8009980:	9200      	str	r2, [sp, #0]
 8009982:	4299      	cmp	r1, r3
 8009984:	d305      	bcc.n	8009992 <__multiply+0x8a>
 8009986:	1b4b      	subs	r3, r1, r5
 8009988:	3b15      	subs	r3, #21
 800998a:	089b      	lsrs	r3, r3, #2
 800998c:	3301      	adds	r3, #1
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	9305      	str	r3, [sp, #20]
 8009992:	9b07      	ldr	r3, [sp, #28]
 8009994:	9a00      	ldr	r2, [sp, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d311      	bcc.n	80099be <__multiply+0xb6>
 800999a:	9b02      	ldr	r3, [sp, #8]
 800999c:	2b00      	cmp	r3, #0
 800999e:	dd06      	ble.n	80099ae <__multiply+0xa6>
 80099a0:	9b03      	ldr	r3, [sp, #12]
 80099a2:	3b04      	subs	r3, #4
 80099a4:	9303      	str	r3, [sp, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d053      	beq.n	8009a56 <__multiply+0x14e>
 80099ae:	9b01      	ldr	r3, [sp, #4]
 80099b0:	9a02      	ldr	r2, [sp, #8]
 80099b2:	0018      	movs	r0, r3
 80099b4:	611a      	str	r2, [r3, #16]
 80099b6:	b009      	add	sp, #36	; 0x24
 80099b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ba:	c304      	stmia	r3!, {r2}
 80099bc:	e7cd      	b.n	800995a <__multiply+0x52>
 80099be:	9b00      	ldr	r3, [sp, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	b298      	uxth	r0, r3
 80099c4:	2800      	cmp	r0, #0
 80099c6:	d01b      	beq.n	8009a00 <__multiply+0xf8>
 80099c8:	4667      	mov	r7, ip
 80099ca:	2400      	movs	r4, #0
 80099cc:	9e06      	ldr	r6, [sp, #24]
 80099ce:	ce02      	ldmia	r6!, {r1}
 80099d0:	683a      	ldr	r2, [r7, #0]
 80099d2:	b28b      	uxth	r3, r1
 80099d4:	4343      	muls	r3, r0
 80099d6:	b292      	uxth	r2, r2
 80099d8:	189b      	adds	r3, r3, r2
 80099da:	191b      	adds	r3, r3, r4
 80099dc:	0c0c      	lsrs	r4, r1, #16
 80099de:	4344      	muls	r4, r0
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	0c11      	lsrs	r1, r2, #16
 80099e4:	1861      	adds	r1, r4, r1
 80099e6:	0c1c      	lsrs	r4, r3, #16
 80099e8:	1909      	adds	r1, r1, r4
 80099ea:	0c0c      	lsrs	r4, r1, #16
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	0409      	lsls	r1, r1, #16
 80099f0:	430b      	orrs	r3, r1
 80099f2:	c708      	stmia	r7!, {r3}
 80099f4:	9b04      	ldr	r3, [sp, #16]
 80099f6:	42b3      	cmp	r3, r6
 80099f8:	d8e9      	bhi.n	80099ce <__multiply+0xc6>
 80099fa:	4663      	mov	r3, ip
 80099fc:	9a05      	ldr	r2, [sp, #20]
 80099fe:	509c      	str	r4, [r3, r2]
 8009a00:	9b00      	ldr	r3, [sp, #0]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	0c1e      	lsrs	r6, r3, #16
 8009a06:	d020      	beq.n	8009a4a <__multiply+0x142>
 8009a08:	4663      	mov	r3, ip
 8009a0a:	002c      	movs	r4, r5
 8009a0c:	4660      	mov	r0, ip
 8009a0e:	2700      	movs	r7, #0
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3414      	adds	r4, #20
 8009a14:	6822      	ldr	r2, [r4, #0]
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	b291      	uxth	r1, r2
 8009a1a:	4371      	muls	r1, r6
 8009a1c:	6802      	ldr	r2, [r0, #0]
 8009a1e:	0c12      	lsrs	r2, r2, #16
 8009a20:	1889      	adds	r1, r1, r2
 8009a22:	19cf      	adds	r7, r1, r7
 8009a24:	0439      	lsls	r1, r7, #16
 8009a26:	430b      	orrs	r3, r1
 8009a28:	6003      	str	r3, [r0, #0]
 8009a2a:	cc02      	ldmia	r4!, {r1}
 8009a2c:	6843      	ldr	r3, [r0, #4]
 8009a2e:	0c09      	lsrs	r1, r1, #16
 8009a30:	4371      	muls	r1, r6
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	0c3f      	lsrs	r7, r7, #16
 8009a36:	18cb      	adds	r3, r1, r3
 8009a38:	9a04      	ldr	r2, [sp, #16]
 8009a3a:	19db      	adds	r3, r3, r7
 8009a3c:	0c1f      	lsrs	r7, r3, #16
 8009a3e:	3004      	adds	r0, #4
 8009a40:	42a2      	cmp	r2, r4
 8009a42:	d8e7      	bhi.n	8009a14 <__multiply+0x10c>
 8009a44:	4662      	mov	r2, ip
 8009a46:	9905      	ldr	r1, [sp, #20]
 8009a48:	5053      	str	r3, [r2, r1]
 8009a4a:	9b00      	ldr	r3, [sp, #0]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	2304      	movs	r3, #4
 8009a52:	449c      	add	ip, r3
 8009a54:	e79d      	b.n	8009992 <__multiply+0x8a>
 8009a56:	9b02      	ldr	r3, [sp, #8]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	9302      	str	r3, [sp, #8]
 8009a5c:	e79d      	b.n	800999a <__multiply+0x92>
 8009a5e:	46c0      	nop			; (mov r8, r8)
 8009a60:	0800c3d4 	.word	0x0800c3d4
 8009a64:	0800c378 	.word	0x0800c378

08009a68 <__pow5mult>:
 8009a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	0015      	movs	r5, r2
 8009a6e:	0007      	movs	r7, r0
 8009a70:	000e      	movs	r6, r1
 8009a72:	401a      	ands	r2, r3
 8009a74:	421d      	tst	r5, r3
 8009a76:	d008      	beq.n	8009a8a <__pow5mult+0x22>
 8009a78:	4925      	ldr	r1, [pc, #148]	; (8009b10 <__pow5mult+0xa8>)
 8009a7a:	3a01      	subs	r2, #1
 8009a7c:	0092      	lsls	r2, r2, #2
 8009a7e:	5852      	ldr	r2, [r2, r1]
 8009a80:	2300      	movs	r3, #0
 8009a82:	0031      	movs	r1, r6
 8009a84:	f7ff fe9e 	bl	80097c4 <__multadd>
 8009a88:	0006      	movs	r6, r0
 8009a8a:	10ad      	asrs	r5, r5, #2
 8009a8c:	d03d      	beq.n	8009b0a <__pow5mult+0xa2>
 8009a8e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009a90:	2c00      	cmp	r4, #0
 8009a92:	d10f      	bne.n	8009ab4 <__pow5mult+0x4c>
 8009a94:	2010      	movs	r0, #16
 8009a96:	f001 fca9 	bl	800b3ec <malloc>
 8009a9a:	1e02      	subs	r2, r0, #0
 8009a9c:	6278      	str	r0, [r7, #36]	; 0x24
 8009a9e:	d105      	bne.n	8009aac <__pow5mult+0x44>
 8009aa0:	21d7      	movs	r1, #215	; 0xd7
 8009aa2:	4b1c      	ldr	r3, [pc, #112]	; (8009b14 <__pow5mult+0xac>)
 8009aa4:	481c      	ldr	r0, [pc, #112]	; (8009b18 <__pow5mult+0xb0>)
 8009aa6:	0049      	lsls	r1, r1, #1
 8009aa8:	f000 fdcc 	bl	800a644 <__assert_func>
 8009aac:	6044      	str	r4, [r0, #4]
 8009aae:	6084      	str	r4, [r0, #8]
 8009ab0:	6004      	str	r4, [r0, #0]
 8009ab2:	60c4      	str	r4, [r0, #12]
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	689c      	ldr	r4, [r3, #8]
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	2c00      	cmp	r4, #0
 8009abc:	d108      	bne.n	8009ad0 <__pow5mult+0x68>
 8009abe:	0038      	movs	r0, r7
 8009ac0:	4916      	ldr	r1, [pc, #88]	; (8009b1c <__pow5mult+0xb4>)
 8009ac2:	f7ff ff0b 	bl	80098dc <__i2b>
 8009ac6:	9b01      	ldr	r3, [sp, #4]
 8009ac8:	0004      	movs	r4, r0
 8009aca:	6098      	str	r0, [r3, #8]
 8009acc:	2300      	movs	r3, #0
 8009ace:	6003      	str	r3, [r0, #0]
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	421d      	tst	r5, r3
 8009ad4:	d00a      	beq.n	8009aec <__pow5mult+0x84>
 8009ad6:	0031      	movs	r1, r6
 8009ad8:	0022      	movs	r2, r4
 8009ada:	0038      	movs	r0, r7
 8009adc:	f7ff ff14 	bl	8009908 <__multiply>
 8009ae0:	0031      	movs	r1, r6
 8009ae2:	9001      	str	r0, [sp, #4]
 8009ae4:	0038      	movs	r0, r7
 8009ae6:	f7ff fe49 	bl	800977c <_Bfree>
 8009aea:	9e01      	ldr	r6, [sp, #4]
 8009aec:	106d      	asrs	r5, r5, #1
 8009aee:	d00c      	beq.n	8009b0a <__pow5mult+0xa2>
 8009af0:	6820      	ldr	r0, [r4, #0]
 8009af2:	2800      	cmp	r0, #0
 8009af4:	d107      	bne.n	8009b06 <__pow5mult+0x9e>
 8009af6:	0022      	movs	r2, r4
 8009af8:	0021      	movs	r1, r4
 8009afa:	0038      	movs	r0, r7
 8009afc:	f7ff ff04 	bl	8009908 <__multiply>
 8009b00:	2300      	movs	r3, #0
 8009b02:	6020      	str	r0, [r4, #0]
 8009b04:	6003      	str	r3, [r0, #0]
 8009b06:	0004      	movs	r4, r0
 8009b08:	e7e2      	b.n	8009ad0 <__pow5mult+0x68>
 8009b0a:	0030      	movs	r0, r6
 8009b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009b0e:	46c0      	nop			; (mov r8, r8)
 8009b10:	0800c4d8 	.word	0x0800c4d8
 8009b14:	0800c361 	.word	0x0800c361
 8009b18:	0800c378 	.word	0x0800c378
 8009b1c:	00000271 	.word	0x00000271

08009b20 <__lshift>:
 8009b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b22:	000c      	movs	r4, r1
 8009b24:	0017      	movs	r7, r2
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	1155      	asrs	r5, r2, #5
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	18eb      	adds	r3, r5, r3
 8009b2e:	9302      	str	r3, [sp, #8]
 8009b30:	3301      	adds	r3, #1
 8009b32:	9301      	str	r3, [sp, #4]
 8009b34:	6849      	ldr	r1, [r1, #4]
 8009b36:	68a3      	ldr	r3, [r4, #8]
 8009b38:	9004      	str	r0, [sp, #16]
 8009b3a:	9a01      	ldr	r2, [sp, #4]
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	db10      	blt.n	8009b62 <__lshift+0x42>
 8009b40:	9804      	ldr	r0, [sp, #16]
 8009b42:	f7ff fdd7 	bl	80096f4 <_Balloc>
 8009b46:	2300      	movs	r3, #0
 8009b48:	0002      	movs	r2, r0
 8009b4a:	0006      	movs	r6, r0
 8009b4c:	0019      	movs	r1, r3
 8009b4e:	3214      	adds	r2, #20
 8009b50:	4298      	cmp	r0, r3
 8009b52:	d10c      	bne.n	8009b6e <__lshift+0x4e>
 8009b54:	21da      	movs	r1, #218	; 0xda
 8009b56:	0002      	movs	r2, r0
 8009b58:	4b26      	ldr	r3, [pc, #152]	; (8009bf4 <__lshift+0xd4>)
 8009b5a:	4827      	ldr	r0, [pc, #156]	; (8009bf8 <__lshift+0xd8>)
 8009b5c:	31ff      	adds	r1, #255	; 0xff
 8009b5e:	f000 fd71 	bl	800a644 <__assert_func>
 8009b62:	3101      	adds	r1, #1
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	e7e8      	b.n	8009b3a <__lshift+0x1a>
 8009b68:	0098      	lsls	r0, r3, #2
 8009b6a:	5011      	str	r1, [r2, r0]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	42ab      	cmp	r3, r5
 8009b70:	dbfa      	blt.n	8009b68 <__lshift+0x48>
 8009b72:	43eb      	mvns	r3, r5
 8009b74:	17db      	asrs	r3, r3, #31
 8009b76:	401d      	ands	r5, r3
 8009b78:	211f      	movs	r1, #31
 8009b7a:	0023      	movs	r3, r4
 8009b7c:	0038      	movs	r0, r7
 8009b7e:	00ad      	lsls	r5, r5, #2
 8009b80:	1955      	adds	r5, r2, r5
 8009b82:	6922      	ldr	r2, [r4, #16]
 8009b84:	3314      	adds	r3, #20
 8009b86:	0092      	lsls	r2, r2, #2
 8009b88:	4008      	ands	r0, r1
 8009b8a:	4684      	mov	ip, r0
 8009b8c:	189a      	adds	r2, r3, r2
 8009b8e:	420f      	tst	r7, r1
 8009b90:	d02a      	beq.n	8009be8 <__lshift+0xc8>
 8009b92:	3101      	adds	r1, #1
 8009b94:	1a09      	subs	r1, r1, r0
 8009b96:	9105      	str	r1, [sp, #20]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	9503      	str	r5, [sp, #12]
 8009b9c:	4667      	mov	r7, ip
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	40b8      	lsls	r0, r7
 8009ba2:	4301      	orrs	r1, r0
 8009ba4:	9803      	ldr	r0, [sp, #12]
 8009ba6:	c002      	stmia	r0!, {r1}
 8009ba8:	cb02      	ldmia	r3!, {r1}
 8009baa:	9003      	str	r0, [sp, #12]
 8009bac:	9805      	ldr	r0, [sp, #20]
 8009bae:	40c1      	lsrs	r1, r0
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d8f3      	bhi.n	8009b9c <__lshift+0x7c>
 8009bb4:	0020      	movs	r0, r4
 8009bb6:	3015      	adds	r0, #21
 8009bb8:	2304      	movs	r3, #4
 8009bba:	4282      	cmp	r2, r0
 8009bbc:	d304      	bcc.n	8009bc8 <__lshift+0xa8>
 8009bbe:	1b13      	subs	r3, r2, r4
 8009bc0:	3b15      	subs	r3, #21
 8009bc2:	089b      	lsrs	r3, r3, #2
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	50e9      	str	r1, [r5, r3]
 8009bca:	2900      	cmp	r1, #0
 8009bcc:	d002      	beq.n	8009bd4 <__lshift+0xb4>
 8009bce:	9b02      	ldr	r3, [sp, #8]
 8009bd0:	3302      	adds	r3, #2
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	9b01      	ldr	r3, [sp, #4]
 8009bd6:	9804      	ldr	r0, [sp, #16]
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	0021      	movs	r1, r4
 8009bdc:	6133      	str	r3, [r6, #16]
 8009bde:	f7ff fdcd 	bl	800977c <_Bfree>
 8009be2:	0030      	movs	r0, r6
 8009be4:	b007      	add	sp, #28
 8009be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009be8:	cb02      	ldmia	r3!, {r1}
 8009bea:	c502      	stmia	r5!, {r1}
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d8fb      	bhi.n	8009be8 <__lshift+0xc8>
 8009bf0:	e7f0      	b.n	8009bd4 <__lshift+0xb4>
 8009bf2:	46c0      	nop			; (mov r8, r8)
 8009bf4:	0800c3d4 	.word	0x0800c3d4
 8009bf8:	0800c378 	.word	0x0800c378

08009bfc <__mcmp>:
 8009bfc:	6902      	ldr	r2, [r0, #16]
 8009bfe:	690b      	ldr	r3, [r1, #16]
 8009c00:	b530      	push	{r4, r5, lr}
 8009c02:	0004      	movs	r4, r0
 8009c04:	1ad0      	subs	r0, r2, r3
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d10d      	bne.n	8009c26 <__mcmp+0x2a>
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	3414      	adds	r4, #20
 8009c0e:	3114      	adds	r1, #20
 8009c10:	18e2      	adds	r2, r4, r3
 8009c12:	18c9      	adds	r1, r1, r3
 8009c14:	3a04      	subs	r2, #4
 8009c16:	3904      	subs	r1, #4
 8009c18:	6815      	ldr	r5, [r2, #0]
 8009c1a:	680b      	ldr	r3, [r1, #0]
 8009c1c:	429d      	cmp	r5, r3
 8009c1e:	d003      	beq.n	8009c28 <__mcmp+0x2c>
 8009c20:	2001      	movs	r0, #1
 8009c22:	429d      	cmp	r5, r3
 8009c24:	d303      	bcc.n	8009c2e <__mcmp+0x32>
 8009c26:	bd30      	pop	{r4, r5, pc}
 8009c28:	4294      	cmp	r4, r2
 8009c2a:	d3f3      	bcc.n	8009c14 <__mcmp+0x18>
 8009c2c:	e7fb      	b.n	8009c26 <__mcmp+0x2a>
 8009c2e:	4240      	negs	r0, r0
 8009c30:	e7f9      	b.n	8009c26 <__mcmp+0x2a>
	...

08009c34 <__mdiff>:
 8009c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c36:	000e      	movs	r6, r1
 8009c38:	0007      	movs	r7, r0
 8009c3a:	0011      	movs	r1, r2
 8009c3c:	0030      	movs	r0, r6
 8009c3e:	b087      	sub	sp, #28
 8009c40:	0014      	movs	r4, r2
 8009c42:	f7ff ffdb 	bl	8009bfc <__mcmp>
 8009c46:	1e05      	subs	r5, r0, #0
 8009c48:	d110      	bne.n	8009c6c <__mdiff+0x38>
 8009c4a:	0001      	movs	r1, r0
 8009c4c:	0038      	movs	r0, r7
 8009c4e:	f7ff fd51 	bl	80096f4 <_Balloc>
 8009c52:	1e02      	subs	r2, r0, #0
 8009c54:	d104      	bne.n	8009c60 <__mdiff+0x2c>
 8009c56:	4b40      	ldr	r3, [pc, #256]	; (8009d58 <__mdiff+0x124>)
 8009c58:	4940      	ldr	r1, [pc, #256]	; (8009d5c <__mdiff+0x128>)
 8009c5a:	4841      	ldr	r0, [pc, #260]	; (8009d60 <__mdiff+0x12c>)
 8009c5c:	f000 fcf2 	bl	800a644 <__assert_func>
 8009c60:	2301      	movs	r3, #1
 8009c62:	6145      	str	r5, [r0, #20]
 8009c64:	6103      	str	r3, [r0, #16]
 8009c66:	0010      	movs	r0, r2
 8009c68:	b007      	add	sp, #28
 8009c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	9301      	str	r3, [sp, #4]
 8009c70:	2800      	cmp	r0, #0
 8009c72:	db04      	blt.n	8009c7e <__mdiff+0x4a>
 8009c74:	0023      	movs	r3, r4
 8009c76:	0034      	movs	r4, r6
 8009c78:	001e      	movs	r6, r3
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	0038      	movs	r0, r7
 8009c80:	6861      	ldr	r1, [r4, #4]
 8009c82:	f7ff fd37 	bl	80096f4 <_Balloc>
 8009c86:	1e02      	subs	r2, r0, #0
 8009c88:	d103      	bne.n	8009c92 <__mdiff+0x5e>
 8009c8a:	2190      	movs	r1, #144	; 0x90
 8009c8c:	4b32      	ldr	r3, [pc, #200]	; (8009d58 <__mdiff+0x124>)
 8009c8e:	0089      	lsls	r1, r1, #2
 8009c90:	e7e3      	b.n	8009c5a <__mdiff+0x26>
 8009c92:	9b01      	ldr	r3, [sp, #4]
 8009c94:	2700      	movs	r7, #0
 8009c96:	60c3      	str	r3, [r0, #12]
 8009c98:	6920      	ldr	r0, [r4, #16]
 8009c9a:	3414      	adds	r4, #20
 8009c9c:	9401      	str	r4, [sp, #4]
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	0084      	lsls	r4, r0, #2
 8009ca2:	191b      	adds	r3, r3, r4
 8009ca4:	0034      	movs	r4, r6
 8009ca6:	9302      	str	r3, [sp, #8]
 8009ca8:	6933      	ldr	r3, [r6, #16]
 8009caa:	3414      	adds	r4, #20
 8009cac:	0099      	lsls	r1, r3, #2
 8009cae:	1863      	adds	r3, r4, r1
 8009cb0:	9303      	str	r3, [sp, #12]
 8009cb2:	0013      	movs	r3, r2
 8009cb4:	3314      	adds	r3, #20
 8009cb6:	469c      	mov	ip, r3
 8009cb8:	9305      	str	r3, [sp, #20]
 8009cba:	9b01      	ldr	r3, [sp, #4]
 8009cbc:	9304      	str	r3, [sp, #16]
 8009cbe:	9b04      	ldr	r3, [sp, #16]
 8009cc0:	cc02      	ldmia	r4!, {r1}
 8009cc2:	cb20      	ldmia	r3!, {r5}
 8009cc4:	9304      	str	r3, [sp, #16]
 8009cc6:	b2ab      	uxth	r3, r5
 8009cc8:	19df      	adds	r7, r3, r7
 8009cca:	b28b      	uxth	r3, r1
 8009ccc:	1afb      	subs	r3, r7, r3
 8009cce:	0c09      	lsrs	r1, r1, #16
 8009cd0:	0c2d      	lsrs	r5, r5, #16
 8009cd2:	1a6d      	subs	r5, r5, r1
 8009cd4:	1419      	asrs	r1, r3, #16
 8009cd6:	186d      	adds	r5, r5, r1
 8009cd8:	4661      	mov	r1, ip
 8009cda:	142f      	asrs	r7, r5, #16
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	042d      	lsls	r5, r5, #16
 8009ce0:	432b      	orrs	r3, r5
 8009ce2:	c108      	stmia	r1!, {r3}
 8009ce4:	9b03      	ldr	r3, [sp, #12]
 8009ce6:	468c      	mov	ip, r1
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	d8e8      	bhi.n	8009cbe <__mdiff+0x8a>
 8009cec:	0031      	movs	r1, r6
 8009cee:	9c03      	ldr	r4, [sp, #12]
 8009cf0:	3115      	adds	r1, #21
 8009cf2:	2304      	movs	r3, #4
 8009cf4:	428c      	cmp	r4, r1
 8009cf6:	d304      	bcc.n	8009d02 <__mdiff+0xce>
 8009cf8:	1ba3      	subs	r3, r4, r6
 8009cfa:	3b15      	subs	r3, #21
 8009cfc:	089b      	lsrs	r3, r3, #2
 8009cfe:	3301      	adds	r3, #1
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	9901      	ldr	r1, [sp, #4]
 8009d04:	18cc      	adds	r4, r1, r3
 8009d06:	9905      	ldr	r1, [sp, #20]
 8009d08:	0026      	movs	r6, r4
 8009d0a:	18cb      	adds	r3, r1, r3
 8009d0c:	469c      	mov	ip, r3
 8009d0e:	9902      	ldr	r1, [sp, #8]
 8009d10:	428e      	cmp	r6, r1
 8009d12:	d310      	bcc.n	8009d36 <__mdiff+0x102>
 8009d14:	9e02      	ldr	r6, [sp, #8]
 8009d16:	1ee1      	subs	r1, r4, #3
 8009d18:	2500      	movs	r5, #0
 8009d1a:	428e      	cmp	r6, r1
 8009d1c:	d304      	bcc.n	8009d28 <__mdiff+0xf4>
 8009d1e:	0031      	movs	r1, r6
 8009d20:	3103      	adds	r1, #3
 8009d22:	1b0c      	subs	r4, r1, r4
 8009d24:	08a4      	lsrs	r4, r4, #2
 8009d26:	00a5      	lsls	r5, r4, #2
 8009d28:	195b      	adds	r3, r3, r5
 8009d2a:	3b04      	subs	r3, #4
 8009d2c:	6819      	ldr	r1, [r3, #0]
 8009d2e:	2900      	cmp	r1, #0
 8009d30:	d00f      	beq.n	8009d52 <__mdiff+0x11e>
 8009d32:	6110      	str	r0, [r2, #16]
 8009d34:	e797      	b.n	8009c66 <__mdiff+0x32>
 8009d36:	ce02      	ldmia	r6!, {r1}
 8009d38:	b28d      	uxth	r5, r1
 8009d3a:	19ed      	adds	r5, r5, r7
 8009d3c:	0c0f      	lsrs	r7, r1, #16
 8009d3e:	1429      	asrs	r1, r5, #16
 8009d40:	1879      	adds	r1, r7, r1
 8009d42:	140f      	asrs	r7, r1, #16
 8009d44:	b2ad      	uxth	r5, r5
 8009d46:	0409      	lsls	r1, r1, #16
 8009d48:	430d      	orrs	r5, r1
 8009d4a:	4661      	mov	r1, ip
 8009d4c:	c120      	stmia	r1!, {r5}
 8009d4e:	468c      	mov	ip, r1
 8009d50:	e7dd      	b.n	8009d0e <__mdiff+0xda>
 8009d52:	3801      	subs	r0, #1
 8009d54:	e7e9      	b.n	8009d2a <__mdiff+0xf6>
 8009d56:	46c0      	nop			; (mov r8, r8)
 8009d58:	0800c3d4 	.word	0x0800c3d4
 8009d5c:	00000232 	.word	0x00000232
 8009d60:	0800c378 	.word	0x0800c378

08009d64 <__d2b>:
 8009d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d66:	2101      	movs	r1, #1
 8009d68:	0014      	movs	r4, r2
 8009d6a:	001e      	movs	r6, r3
 8009d6c:	9f08      	ldr	r7, [sp, #32]
 8009d6e:	f7ff fcc1 	bl	80096f4 <_Balloc>
 8009d72:	1e05      	subs	r5, r0, #0
 8009d74:	d105      	bne.n	8009d82 <__d2b+0x1e>
 8009d76:	0002      	movs	r2, r0
 8009d78:	4b26      	ldr	r3, [pc, #152]	; (8009e14 <__d2b+0xb0>)
 8009d7a:	4927      	ldr	r1, [pc, #156]	; (8009e18 <__d2b+0xb4>)
 8009d7c:	4827      	ldr	r0, [pc, #156]	; (8009e1c <__d2b+0xb8>)
 8009d7e:	f000 fc61 	bl	800a644 <__assert_func>
 8009d82:	0333      	lsls	r3, r6, #12
 8009d84:	0076      	lsls	r6, r6, #1
 8009d86:	0b1b      	lsrs	r3, r3, #12
 8009d88:	0d76      	lsrs	r6, r6, #21
 8009d8a:	d124      	bne.n	8009dd6 <__d2b+0x72>
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	2c00      	cmp	r4, #0
 8009d90:	d027      	beq.n	8009de2 <__d2b+0x7e>
 8009d92:	4668      	mov	r0, sp
 8009d94:	9400      	str	r4, [sp, #0]
 8009d96:	f7ff fd73 	bl	8009880 <__lo0bits>
 8009d9a:	9c00      	ldr	r4, [sp, #0]
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d01e      	beq.n	8009dde <__d2b+0x7a>
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	2120      	movs	r1, #32
 8009da4:	001a      	movs	r2, r3
 8009da6:	1a09      	subs	r1, r1, r0
 8009da8:	408a      	lsls	r2, r1
 8009daa:	40c3      	lsrs	r3, r0
 8009dac:	4322      	orrs	r2, r4
 8009dae:	616a      	str	r2, [r5, #20]
 8009db0:	9301      	str	r3, [sp, #4]
 8009db2:	9c01      	ldr	r4, [sp, #4]
 8009db4:	61ac      	str	r4, [r5, #24]
 8009db6:	1e63      	subs	r3, r4, #1
 8009db8:	419c      	sbcs	r4, r3
 8009dba:	3401      	adds	r4, #1
 8009dbc:	612c      	str	r4, [r5, #16]
 8009dbe:	2e00      	cmp	r6, #0
 8009dc0:	d018      	beq.n	8009df4 <__d2b+0x90>
 8009dc2:	4b17      	ldr	r3, [pc, #92]	; (8009e20 <__d2b+0xbc>)
 8009dc4:	18f6      	adds	r6, r6, r3
 8009dc6:	2335      	movs	r3, #53	; 0x35
 8009dc8:	1836      	adds	r6, r6, r0
 8009dca:	1a18      	subs	r0, r3, r0
 8009dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dce:	603e      	str	r6, [r7, #0]
 8009dd0:	6018      	str	r0, [r3, #0]
 8009dd2:	0028      	movs	r0, r5
 8009dd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009dd6:	2280      	movs	r2, #128	; 0x80
 8009dd8:	0352      	lsls	r2, r2, #13
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	e7d6      	b.n	8009d8c <__d2b+0x28>
 8009dde:	616c      	str	r4, [r5, #20]
 8009de0:	e7e7      	b.n	8009db2 <__d2b+0x4e>
 8009de2:	a801      	add	r0, sp, #4
 8009de4:	f7ff fd4c 	bl	8009880 <__lo0bits>
 8009de8:	2401      	movs	r4, #1
 8009dea:	9b01      	ldr	r3, [sp, #4]
 8009dec:	612c      	str	r4, [r5, #16]
 8009dee:	616b      	str	r3, [r5, #20]
 8009df0:	3020      	adds	r0, #32
 8009df2:	e7e4      	b.n	8009dbe <__d2b+0x5a>
 8009df4:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <__d2b+0xc0>)
 8009df6:	18c0      	adds	r0, r0, r3
 8009df8:	4b0b      	ldr	r3, [pc, #44]	; (8009e28 <__d2b+0xc4>)
 8009dfa:	6038      	str	r0, [r7, #0]
 8009dfc:	18e3      	adds	r3, r4, r3
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	18eb      	adds	r3, r5, r3
 8009e02:	6958      	ldr	r0, [r3, #20]
 8009e04:	f7ff fd22 	bl	800984c <__hi0bits>
 8009e08:	0164      	lsls	r4, r4, #5
 8009e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0c:	1a24      	subs	r4, r4, r0
 8009e0e:	601c      	str	r4, [r3, #0]
 8009e10:	e7df      	b.n	8009dd2 <__d2b+0x6e>
 8009e12:	46c0      	nop			; (mov r8, r8)
 8009e14:	0800c3d4 	.word	0x0800c3d4
 8009e18:	0000030a 	.word	0x0000030a
 8009e1c:	0800c378 	.word	0x0800c378
 8009e20:	fffffbcd 	.word	0xfffffbcd
 8009e24:	fffffbce 	.word	0xfffffbce
 8009e28:	3fffffff 	.word	0x3fffffff

08009e2c <_mprec_log10>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	0004      	movs	r4, r0
 8009e30:	2817      	cmp	r0, #23
 8009e32:	dc05      	bgt.n	8009e40 <_mprec_log10+0x14>
 8009e34:	4c07      	ldr	r4, [pc, #28]	; (8009e54 <_mprec_log10+0x28>)
 8009e36:	00c0      	lsls	r0, r0, #3
 8009e38:	1824      	adds	r4, r4, r0
 8009e3a:	6820      	ldr	r0, [r4, #0]
 8009e3c:	6861      	ldr	r1, [r4, #4]
 8009e3e:	bd10      	pop	{r4, pc}
 8009e40:	2000      	movs	r0, #0
 8009e42:	4905      	ldr	r1, [pc, #20]	; (8009e58 <_mprec_log10+0x2c>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	4b05      	ldr	r3, [pc, #20]	; (8009e5c <_mprec_log10+0x30>)
 8009e48:	3c01      	subs	r4, #1
 8009e4a:	f7f7 fb97 	bl	800157c <__aeabi_dmul>
 8009e4e:	2c00      	cmp	r4, #0
 8009e50:	d1f8      	bne.n	8009e44 <_mprec_log10+0x18>
 8009e52:	e7f4      	b.n	8009e3e <_mprec_log10+0x12>
 8009e54:	0800c410 	.word	0x0800c410
 8009e58:	3ff00000 	.word	0x3ff00000
 8009e5c:	40240000 	.word	0x40240000

08009e60 <_calloc_r>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	0c13      	lsrs	r3, r2, #16
 8009e64:	0c0d      	lsrs	r5, r1, #16
 8009e66:	d11e      	bne.n	8009ea6 <_calloc_r+0x46>
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10c      	bne.n	8009e86 <_calloc_r+0x26>
 8009e6c:	b289      	uxth	r1, r1
 8009e6e:	b294      	uxth	r4, r2
 8009e70:	434c      	muls	r4, r1
 8009e72:	0021      	movs	r1, r4
 8009e74:	f000 f842 	bl	8009efc <_malloc_r>
 8009e78:	1e05      	subs	r5, r0, #0
 8009e7a:	d01b      	beq.n	8009eb4 <_calloc_r+0x54>
 8009e7c:	0022      	movs	r2, r4
 8009e7e:	2100      	movs	r1, #0
 8009e80:	f7ff f9e1 	bl	8009246 <memset>
 8009e84:	e016      	b.n	8009eb4 <_calloc_r+0x54>
 8009e86:	1c1d      	adds	r5, r3, #0
 8009e88:	1c0b      	adds	r3, r1, #0
 8009e8a:	b292      	uxth	r2, r2
 8009e8c:	b289      	uxth	r1, r1
 8009e8e:	b29c      	uxth	r4, r3
 8009e90:	4351      	muls	r1, r2
 8009e92:	b2ab      	uxth	r3, r5
 8009e94:	4363      	muls	r3, r4
 8009e96:	0c0c      	lsrs	r4, r1, #16
 8009e98:	191c      	adds	r4, r3, r4
 8009e9a:	0c22      	lsrs	r2, r4, #16
 8009e9c:	d107      	bne.n	8009eae <_calloc_r+0x4e>
 8009e9e:	0424      	lsls	r4, r4, #16
 8009ea0:	b289      	uxth	r1, r1
 8009ea2:	430c      	orrs	r4, r1
 8009ea4:	e7e5      	b.n	8009e72 <_calloc_r+0x12>
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d101      	bne.n	8009eae <_calloc_r+0x4e>
 8009eaa:	1c13      	adds	r3, r2, #0
 8009eac:	e7ed      	b.n	8009e8a <_calloc_r+0x2a>
 8009eae:	230c      	movs	r3, #12
 8009eb0:	2500      	movs	r5, #0
 8009eb2:	6003      	str	r3, [r0, #0]
 8009eb4:	0028      	movs	r0, r5
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}

08009eb8 <sbrk_aligned>:
 8009eb8:	b570      	push	{r4, r5, r6, lr}
 8009eba:	4e0f      	ldr	r6, [pc, #60]	; (8009ef8 <sbrk_aligned+0x40>)
 8009ebc:	000d      	movs	r5, r1
 8009ebe:	6831      	ldr	r1, [r6, #0]
 8009ec0:	0004      	movs	r4, r0
 8009ec2:	2900      	cmp	r1, #0
 8009ec4:	d102      	bne.n	8009ecc <sbrk_aligned+0x14>
 8009ec6:	f000 fba3 	bl	800a610 <_sbrk_r>
 8009eca:	6030      	str	r0, [r6, #0]
 8009ecc:	0029      	movs	r1, r5
 8009ece:	0020      	movs	r0, r4
 8009ed0:	f000 fb9e 	bl	800a610 <_sbrk_r>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d00a      	beq.n	8009eee <sbrk_aligned+0x36>
 8009ed8:	2303      	movs	r3, #3
 8009eda:	1cc5      	adds	r5, r0, #3
 8009edc:	439d      	bics	r5, r3
 8009ede:	42a8      	cmp	r0, r5
 8009ee0:	d007      	beq.n	8009ef2 <sbrk_aligned+0x3a>
 8009ee2:	1a29      	subs	r1, r5, r0
 8009ee4:	0020      	movs	r0, r4
 8009ee6:	f000 fb93 	bl	800a610 <_sbrk_r>
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	d101      	bne.n	8009ef2 <sbrk_aligned+0x3a>
 8009eee:	2501      	movs	r5, #1
 8009ef0:	426d      	negs	r5, r5
 8009ef2:	0028      	movs	r0, r5
 8009ef4:	bd70      	pop	{r4, r5, r6, pc}
 8009ef6:	46c0      	nop			; (mov r8, r8)
 8009ef8:	20000e3c 	.word	0x20000e3c

08009efc <_malloc_r>:
 8009efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009efe:	2203      	movs	r2, #3
 8009f00:	1ccb      	adds	r3, r1, #3
 8009f02:	4393      	bics	r3, r2
 8009f04:	3308      	adds	r3, #8
 8009f06:	0006      	movs	r6, r0
 8009f08:	001f      	movs	r7, r3
 8009f0a:	2b0c      	cmp	r3, #12
 8009f0c:	d232      	bcs.n	8009f74 <_malloc_r+0x78>
 8009f0e:	270c      	movs	r7, #12
 8009f10:	42b9      	cmp	r1, r7
 8009f12:	d831      	bhi.n	8009f78 <_malloc_r+0x7c>
 8009f14:	0030      	movs	r0, r6
 8009f16:	f001 fa91 	bl	800b43c <__malloc_lock>
 8009f1a:	4d32      	ldr	r5, [pc, #200]	; (8009fe4 <_malloc_r+0xe8>)
 8009f1c:	682b      	ldr	r3, [r5, #0]
 8009f1e:	001c      	movs	r4, r3
 8009f20:	2c00      	cmp	r4, #0
 8009f22:	d12e      	bne.n	8009f82 <_malloc_r+0x86>
 8009f24:	0039      	movs	r1, r7
 8009f26:	0030      	movs	r0, r6
 8009f28:	f7ff ffc6 	bl	8009eb8 <sbrk_aligned>
 8009f2c:	0004      	movs	r4, r0
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	d11e      	bne.n	8009f70 <_malloc_r+0x74>
 8009f32:	682c      	ldr	r4, [r5, #0]
 8009f34:	0025      	movs	r5, r4
 8009f36:	2d00      	cmp	r5, #0
 8009f38:	d14a      	bne.n	8009fd0 <_malloc_r+0xd4>
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	0029      	movs	r1, r5
 8009f3e:	18e3      	adds	r3, r4, r3
 8009f40:	0030      	movs	r0, r6
 8009f42:	9301      	str	r3, [sp, #4]
 8009f44:	f000 fb64 	bl	800a610 <_sbrk_r>
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	4283      	cmp	r3, r0
 8009f4c:	d143      	bne.n	8009fd6 <_malloc_r+0xda>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	3703      	adds	r7, #3
 8009f52:	1aff      	subs	r7, r7, r3
 8009f54:	2303      	movs	r3, #3
 8009f56:	439f      	bics	r7, r3
 8009f58:	3708      	adds	r7, #8
 8009f5a:	2f0c      	cmp	r7, #12
 8009f5c:	d200      	bcs.n	8009f60 <_malloc_r+0x64>
 8009f5e:	270c      	movs	r7, #12
 8009f60:	0039      	movs	r1, r7
 8009f62:	0030      	movs	r0, r6
 8009f64:	f7ff ffa8 	bl	8009eb8 <sbrk_aligned>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d034      	beq.n	8009fd6 <_malloc_r+0xda>
 8009f6c:	6823      	ldr	r3, [r4, #0]
 8009f6e:	19df      	adds	r7, r3, r7
 8009f70:	6027      	str	r7, [r4, #0]
 8009f72:	e013      	b.n	8009f9c <_malloc_r+0xa0>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dacb      	bge.n	8009f10 <_malloc_r+0x14>
 8009f78:	230c      	movs	r3, #12
 8009f7a:	2500      	movs	r5, #0
 8009f7c:	6033      	str	r3, [r6, #0]
 8009f7e:	0028      	movs	r0, r5
 8009f80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f82:	6822      	ldr	r2, [r4, #0]
 8009f84:	1bd1      	subs	r1, r2, r7
 8009f86:	d420      	bmi.n	8009fca <_malloc_r+0xce>
 8009f88:	290b      	cmp	r1, #11
 8009f8a:	d917      	bls.n	8009fbc <_malloc_r+0xc0>
 8009f8c:	19e2      	adds	r2, r4, r7
 8009f8e:	6027      	str	r7, [r4, #0]
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	d111      	bne.n	8009fb8 <_malloc_r+0xbc>
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	6863      	ldr	r3, [r4, #4]
 8009f98:	6011      	str	r1, [r2, #0]
 8009f9a:	6053      	str	r3, [r2, #4]
 8009f9c:	0030      	movs	r0, r6
 8009f9e:	0025      	movs	r5, r4
 8009fa0:	f001 fa54 	bl	800b44c <__malloc_unlock>
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	350b      	adds	r5, #11
 8009fa8:	1d23      	adds	r3, r4, #4
 8009faa:	4395      	bics	r5, r2
 8009fac:	1aea      	subs	r2, r5, r3
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	d0e5      	beq.n	8009f7e <_malloc_r+0x82>
 8009fb2:	1b5b      	subs	r3, r3, r5
 8009fb4:	50a3      	str	r3, [r4, r2]
 8009fb6:	e7e2      	b.n	8009f7e <_malloc_r+0x82>
 8009fb8:	605a      	str	r2, [r3, #4]
 8009fba:	e7ec      	b.n	8009f96 <_malloc_r+0x9a>
 8009fbc:	6862      	ldr	r2, [r4, #4]
 8009fbe:	42a3      	cmp	r3, r4
 8009fc0:	d101      	bne.n	8009fc6 <_malloc_r+0xca>
 8009fc2:	602a      	str	r2, [r5, #0]
 8009fc4:	e7ea      	b.n	8009f9c <_malloc_r+0xa0>
 8009fc6:	605a      	str	r2, [r3, #4]
 8009fc8:	e7e8      	b.n	8009f9c <_malloc_r+0xa0>
 8009fca:	0023      	movs	r3, r4
 8009fcc:	6864      	ldr	r4, [r4, #4]
 8009fce:	e7a7      	b.n	8009f20 <_malloc_r+0x24>
 8009fd0:	002c      	movs	r4, r5
 8009fd2:	686d      	ldr	r5, [r5, #4]
 8009fd4:	e7af      	b.n	8009f36 <_malloc_r+0x3a>
 8009fd6:	230c      	movs	r3, #12
 8009fd8:	0030      	movs	r0, r6
 8009fda:	6033      	str	r3, [r6, #0]
 8009fdc:	f001 fa36 	bl	800b44c <__malloc_unlock>
 8009fe0:	e7cd      	b.n	8009f7e <_malloc_r+0x82>
 8009fe2:	46c0      	nop			; (mov r8, r8)
 8009fe4:	20000e38 	.word	0x20000e38

08009fe8 <_realloc_r>:
 8009fe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fea:	0007      	movs	r7, r0
 8009fec:	000e      	movs	r6, r1
 8009fee:	0014      	movs	r4, r2
 8009ff0:	2900      	cmp	r1, #0
 8009ff2:	d105      	bne.n	800a000 <_realloc_r+0x18>
 8009ff4:	0011      	movs	r1, r2
 8009ff6:	f7ff ff81 	bl	8009efc <_malloc_r>
 8009ffa:	0005      	movs	r5, r0
 8009ffc:	0028      	movs	r0, r5
 8009ffe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a000:	2a00      	cmp	r2, #0
 800a002:	d103      	bne.n	800a00c <_realloc_r+0x24>
 800a004:	f001 fa2a 	bl	800b45c <_free_r>
 800a008:	0025      	movs	r5, r4
 800a00a:	e7f7      	b.n	8009ffc <_realloc_r+0x14>
 800a00c:	f001 fa70 	bl	800b4f0 <_malloc_usable_size_r>
 800a010:	9001      	str	r0, [sp, #4]
 800a012:	4284      	cmp	r4, r0
 800a014:	d803      	bhi.n	800a01e <_realloc_r+0x36>
 800a016:	0035      	movs	r5, r6
 800a018:	0843      	lsrs	r3, r0, #1
 800a01a:	42a3      	cmp	r3, r4
 800a01c:	d3ee      	bcc.n	8009ffc <_realloc_r+0x14>
 800a01e:	0021      	movs	r1, r4
 800a020:	0038      	movs	r0, r7
 800a022:	f7ff ff6b 	bl	8009efc <_malloc_r>
 800a026:	1e05      	subs	r5, r0, #0
 800a028:	d0e8      	beq.n	8009ffc <_realloc_r+0x14>
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	0022      	movs	r2, r4
 800a02e:	429c      	cmp	r4, r3
 800a030:	d900      	bls.n	800a034 <_realloc_r+0x4c>
 800a032:	001a      	movs	r2, r3
 800a034:	0031      	movs	r1, r6
 800a036:	0028      	movs	r0, r5
 800a038:	f7ff f8fc 	bl	8009234 <memcpy>
 800a03c:	0031      	movs	r1, r6
 800a03e:	0038      	movs	r0, r7
 800a040:	f001 fa0c 	bl	800b45c <_free_r>
 800a044:	e7da      	b.n	8009ffc <_realloc_r+0x14>
	...

0800a048 <__ssputs_r>:
 800a048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a04a:	688e      	ldr	r6, [r1, #8]
 800a04c:	b085      	sub	sp, #20
 800a04e:	0007      	movs	r7, r0
 800a050:	000c      	movs	r4, r1
 800a052:	9203      	str	r2, [sp, #12]
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	429e      	cmp	r6, r3
 800a058:	d83c      	bhi.n	800a0d4 <__ssputs_r+0x8c>
 800a05a:	2390      	movs	r3, #144	; 0x90
 800a05c:	898a      	ldrh	r2, [r1, #12]
 800a05e:	00db      	lsls	r3, r3, #3
 800a060:	421a      	tst	r2, r3
 800a062:	d034      	beq.n	800a0ce <__ssputs_r+0x86>
 800a064:	6909      	ldr	r1, [r1, #16]
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	6960      	ldr	r0, [r4, #20]
 800a06a:	1a5b      	subs	r3, r3, r1
 800a06c:	9302      	str	r3, [sp, #8]
 800a06e:	2303      	movs	r3, #3
 800a070:	4343      	muls	r3, r0
 800a072:	0fdd      	lsrs	r5, r3, #31
 800a074:	18ed      	adds	r5, r5, r3
 800a076:	9b01      	ldr	r3, [sp, #4]
 800a078:	9802      	ldr	r0, [sp, #8]
 800a07a:	3301      	adds	r3, #1
 800a07c:	181b      	adds	r3, r3, r0
 800a07e:	106d      	asrs	r5, r5, #1
 800a080:	42ab      	cmp	r3, r5
 800a082:	d900      	bls.n	800a086 <__ssputs_r+0x3e>
 800a084:	001d      	movs	r5, r3
 800a086:	0553      	lsls	r3, r2, #21
 800a088:	d532      	bpl.n	800a0f0 <__ssputs_r+0xa8>
 800a08a:	0029      	movs	r1, r5
 800a08c:	0038      	movs	r0, r7
 800a08e:	f7ff ff35 	bl	8009efc <_malloc_r>
 800a092:	1e06      	subs	r6, r0, #0
 800a094:	d109      	bne.n	800a0aa <__ssputs_r+0x62>
 800a096:	230c      	movs	r3, #12
 800a098:	603b      	str	r3, [r7, #0]
 800a09a:	2340      	movs	r3, #64	; 0x40
 800a09c:	2001      	movs	r0, #1
 800a09e:	89a2      	ldrh	r2, [r4, #12]
 800a0a0:	4240      	negs	r0, r0
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	b005      	add	sp, #20
 800a0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0aa:	9a02      	ldr	r2, [sp, #8]
 800a0ac:	6921      	ldr	r1, [r4, #16]
 800a0ae:	f7ff f8c1 	bl	8009234 <memcpy>
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	4a14      	ldr	r2, [pc, #80]	; (800a108 <__ssputs_r+0xc0>)
 800a0b6:	401a      	ands	r2, r3
 800a0b8:	2380      	movs	r3, #128	; 0x80
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	81a3      	strh	r3, [r4, #12]
 800a0be:	9b02      	ldr	r3, [sp, #8]
 800a0c0:	6126      	str	r6, [r4, #16]
 800a0c2:	18f6      	adds	r6, r6, r3
 800a0c4:	6026      	str	r6, [r4, #0]
 800a0c6:	6165      	str	r5, [r4, #20]
 800a0c8:	9e01      	ldr	r6, [sp, #4]
 800a0ca:	1aed      	subs	r5, r5, r3
 800a0cc:	60a5      	str	r5, [r4, #8]
 800a0ce:	9b01      	ldr	r3, [sp, #4]
 800a0d0:	429e      	cmp	r6, r3
 800a0d2:	d900      	bls.n	800a0d6 <__ssputs_r+0x8e>
 800a0d4:	9e01      	ldr	r6, [sp, #4]
 800a0d6:	0032      	movs	r2, r6
 800a0d8:	9903      	ldr	r1, [sp, #12]
 800a0da:	6820      	ldr	r0, [r4, #0]
 800a0dc:	f001 f99b 	bl	800b416 <memmove>
 800a0e0:	68a3      	ldr	r3, [r4, #8]
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	1b9b      	subs	r3, r3, r6
 800a0e6:	60a3      	str	r3, [r4, #8]
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	199e      	adds	r6, r3, r6
 800a0ec:	6026      	str	r6, [r4, #0]
 800a0ee:	e7da      	b.n	800a0a6 <__ssputs_r+0x5e>
 800a0f0:	002a      	movs	r2, r5
 800a0f2:	0038      	movs	r0, r7
 800a0f4:	f7ff ff78 	bl	8009fe8 <_realloc_r>
 800a0f8:	1e06      	subs	r6, r0, #0
 800a0fa:	d1e0      	bne.n	800a0be <__ssputs_r+0x76>
 800a0fc:	0038      	movs	r0, r7
 800a0fe:	6921      	ldr	r1, [r4, #16]
 800a100:	f001 f9ac 	bl	800b45c <_free_r>
 800a104:	e7c7      	b.n	800a096 <__ssputs_r+0x4e>
 800a106:	46c0      	nop			; (mov r8, r8)
 800a108:	fffffb7f 	.word	0xfffffb7f

0800a10c <_svfiprintf_r>:
 800a10c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a10e:	b0a1      	sub	sp, #132	; 0x84
 800a110:	9003      	str	r0, [sp, #12]
 800a112:	001d      	movs	r5, r3
 800a114:	898b      	ldrh	r3, [r1, #12]
 800a116:	000f      	movs	r7, r1
 800a118:	0016      	movs	r6, r2
 800a11a:	061b      	lsls	r3, r3, #24
 800a11c:	d511      	bpl.n	800a142 <_svfiprintf_r+0x36>
 800a11e:	690b      	ldr	r3, [r1, #16]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10e      	bne.n	800a142 <_svfiprintf_r+0x36>
 800a124:	2140      	movs	r1, #64	; 0x40
 800a126:	f7ff fee9 	bl	8009efc <_malloc_r>
 800a12a:	6038      	str	r0, [r7, #0]
 800a12c:	6138      	str	r0, [r7, #16]
 800a12e:	2800      	cmp	r0, #0
 800a130:	d105      	bne.n	800a13e <_svfiprintf_r+0x32>
 800a132:	230c      	movs	r3, #12
 800a134:	9a03      	ldr	r2, [sp, #12]
 800a136:	3801      	subs	r0, #1
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	b021      	add	sp, #132	; 0x84
 800a13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a13e:	2340      	movs	r3, #64	; 0x40
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	2300      	movs	r3, #0
 800a144:	ac08      	add	r4, sp, #32
 800a146:	6163      	str	r3, [r4, #20]
 800a148:	3320      	adds	r3, #32
 800a14a:	7663      	strb	r3, [r4, #25]
 800a14c:	3310      	adds	r3, #16
 800a14e:	76a3      	strb	r3, [r4, #26]
 800a150:	9507      	str	r5, [sp, #28]
 800a152:	0035      	movs	r5, r6
 800a154:	782b      	ldrb	r3, [r5, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <_svfiprintf_r+0x52>
 800a15a:	2b25      	cmp	r3, #37	; 0x25
 800a15c:	d147      	bne.n	800a1ee <_svfiprintf_r+0xe2>
 800a15e:	1bab      	subs	r3, r5, r6
 800a160:	9305      	str	r3, [sp, #20]
 800a162:	42b5      	cmp	r5, r6
 800a164:	d00c      	beq.n	800a180 <_svfiprintf_r+0x74>
 800a166:	0032      	movs	r2, r6
 800a168:	0039      	movs	r1, r7
 800a16a:	9803      	ldr	r0, [sp, #12]
 800a16c:	f7ff ff6c 	bl	800a048 <__ssputs_r>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d100      	bne.n	800a176 <_svfiprintf_r+0x6a>
 800a174:	e0ae      	b.n	800a2d4 <_svfiprintf_r+0x1c8>
 800a176:	6962      	ldr	r2, [r4, #20]
 800a178:	9b05      	ldr	r3, [sp, #20]
 800a17a:	4694      	mov	ip, r2
 800a17c:	4463      	add	r3, ip
 800a17e:	6163      	str	r3, [r4, #20]
 800a180:	782b      	ldrb	r3, [r5, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d100      	bne.n	800a188 <_svfiprintf_r+0x7c>
 800a186:	e0a5      	b.n	800a2d4 <_svfiprintf_r+0x1c8>
 800a188:	2201      	movs	r2, #1
 800a18a:	2300      	movs	r3, #0
 800a18c:	4252      	negs	r2, r2
 800a18e:	6062      	str	r2, [r4, #4]
 800a190:	a904      	add	r1, sp, #16
 800a192:	3254      	adds	r2, #84	; 0x54
 800a194:	1852      	adds	r2, r2, r1
 800a196:	1c6e      	adds	r6, r5, #1
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	60e3      	str	r3, [r4, #12]
 800a19c:	60a3      	str	r3, [r4, #8]
 800a19e:	7013      	strb	r3, [r2, #0]
 800a1a0:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1a2:	2205      	movs	r2, #5
 800a1a4:	7831      	ldrb	r1, [r6, #0]
 800a1a6:	4854      	ldr	r0, [pc, #336]	; (800a2f8 <_svfiprintf_r+0x1ec>)
 800a1a8:	f001 f92a 	bl	800b400 <memchr>
 800a1ac:	1c75      	adds	r5, r6, #1
 800a1ae:	2800      	cmp	r0, #0
 800a1b0:	d11f      	bne.n	800a1f2 <_svfiprintf_r+0xe6>
 800a1b2:	6822      	ldr	r2, [r4, #0]
 800a1b4:	06d3      	lsls	r3, r2, #27
 800a1b6:	d504      	bpl.n	800a1c2 <_svfiprintf_r+0xb6>
 800a1b8:	2353      	movs	r3, #83	; 0x53
 800a1ba:	a904      	add	r1, sp, #16
 800a1bc:	185b      	adds	r3, r3, r1
 800a1be:	2120      	movs	r1, #32
 800a1c0:	7019      	strb	r1, [r3, #0]
 800a1c2:	0713      	lsls	r3, r2, #28
 800a1c4:	d504      	bpl.n	800a1d0 <_svfiprintf_r+0xc4>
 800a1c6:	2353      	movs	r3, #83	; 0x53
 800a1c8:	a904      	add	r1, sp, #16
 800a1ca:	185b      	adds	r3, r3, r1
 800a1cc:	212b      	movs	r1, #43	; 0x2b
 800a1ce:	7019      	strb	r1, [r3, #0]
 800a1d0:	7833      	ldrb	r3, [r6, #0]
 800a1d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a1d4:	d016      	beq.n	800a204 <_svfiprintf_r+0xf8>
 800a1d6:	0035      	movs	r5, r6
 800a1d8:	2100      	movs	r1, #0
 800a1da:	200a      	movs	r0, #10
 800a1dc:	68e3      	ldr	r3, [r4, #12]
 800a1de:	782a      	ldrb	r2, [r5, #0]
 800a1e0:	1c6e      	adds	r6, r5, #1
 800a1e2:	3a30      	subs	r2, #48	; 0x30
 800a1e4:	2a09      	cmp	r2, #9
 800a1e6:	d94e      	bls.n	800a286 <_svfiprintf_r+0x17a>
 800a1e8:	2900      	cmp	r1, #0
 800a1ea:	d111      	bne.n	800a210 <_svfiprintf_r+0x104>
 800a1ec:	e017      	b.n	800a21e <_svfiprintf_r+0x112>
 800a1ee:	3501      	adds	r5, #1
 800a1f0:	e7b0      	b.n	800a154 <_svfiprintf_r+0x48>
 800a1f2:	4b41      	ldr	r3, [pc, #260]	; (800a2f8 <_svfiprintf_r+0x1ec>)
 800a1f4:	6822      	ldr	r2, [r4, #0]
 800a1f6:	1ac0      	subs	r0, r0, r3
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	4083      	lsls	r3, r0
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	002e      	movs	r6, r5
 800a200:	6023      	str	r3, [r4, #0]
 800a202:	e7ce      	b.n	800a1a2 <_svfiprintf_r+0x96>
 800a204:	9b07      	ldr	r3, [sp, #28]
 800a206:	1d19      	adds	r1, r3, #4
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	9107      	str	r1, [sp, #28]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	db01      	blt.n	800a214 <_svfiprintf_r+0x108>
 800a210:	930b      	str	r3, [sp, #44]	; 0x2c
 800a212:	e004      	b.n	800a21e <_svfiprintf_r+0x112>
 800a214:	425b      	negs	r3, r3
 800a216:	60e3      	str	r3, [r4, #12]
 800a218:	2302      	movs	r3, #2
 800a21a:	4313      	orrs	r3, r2
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	782b      	ldrb	r3, [r5, #0]
 800a220:	2b2e      	cmp	r3, #46	; 0x2e
 800a222:	d10a      	bne.n	800a23a <_svfiprintf_r+0x12e>
 800a224:	786b      	ldrb	r3, [r5, #1]
 800a226:	2b2a      	cmp	r3, #42	; 0x2a
 800a228:	d135      	bne.n	800a296 <_svfiprintf_r+0x18a>
 800a22a:	9b07      	ldr	r3, [sp, #28]
 800a22c:	3502      	adds	r5, #2
 800a22e:	1d1a      	adds	r2, r3, #4
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	9207      	str	r2, [sp, #28]
 800a234:	2b00      	cmp	r3, #0
 800a236:	db2b      	blt.n	800a290 <_svfiprintf_r+0x184>
 800a238:	9309      	str	r3, [sp, #36]	; 0x24
 800a23a:	4e30      	ldr	r6, [pc, #192]	; (800a2fc <_svfiprintf_r+0x1f0>)
 800a23c:	2203      	movs	r2, #3
 800a23e:	0030      	movs	r0, r6
 800a240:	7829      	ldrb	r1, [r5, #0]
 800a242:	f001 f8dd 	bl	800b400 <memchr>
 800a246:	2800      	cmp	r0, #0
 800a248:	d006      	beq.n	800a258 <_svfiprintf_r+0x14c>
 800a24a:	2340      	movs	r3, #64	; 0x40
 800a24c:	1b80      	subs	r0, r0, r6
 800a24e:	4083      	lsls	r3, r0
 800a250:	6822      	ldr	r2, [r4, #0]
 800a252:	3501      	adds	r5, #1
 800a254:	4313      	orrs	r3, r2
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	7829      	ldrb	r1, [r5, #0]
 800a25a:	2206      	movs	r2, #6
 800a25c:	4828      	ldr	r0, [pc, #160]	; (800a300 <_svfiprintf_r+0x1f4>)
 800a25e:	1c6e      	adds	r6, r5, #1
 800a260:	7621      	strb	r1, [r4, #24]
 800a262:	f001 f8cd 	bl	800b400 <memchr>
 800a266:	2800      	cmp	r0, #0
 800a268:	d03c      	beq.n	800a2e4 <_svfiprintf_r+0x1d8>
 800a26a:	4b26      	ldr	r3, [pc, #152]	; (800a304 <_svfiprintf_r+0x1f8>)
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d125      	bne.n	800a2bc <_svfiprintf_r+0x1b0>
 800a270:	2207      	movs	r2, #7
 800a272:	9b07      	ldr	r3, [sp, #28]
 800a274:	3307      	adds	r3, #7
 800a276:	4393      	bics	r3, r2
 800a278:	3308      	adds	r3, #8
 800a27a:	9307      	str	r3, [sp, #28]
 800a27c:	6963      	ldr	r3, [r4, #20]
 800a27e:	9a04      	ldr	r2, [sp, #16]
 800a280:	189b      	adds	r3, r3, r2
 800a282:	6163      	str	r3, [r4, #20]
 800a284:	e765      	b.n	800a152 <_svfiprintf_r+0x46>
 800a286:	4343      	muls	r3, r0
 800a288:	0035      	movs	r5, r6
 800a28a:	2101      	movs	r1, #1
 800a28c:	189b      	adds	r3, r3, r2
 800a28e:	e7a6      	b.n	800a1de <_svfiprintf_r+0xd2>
 800a290:	2301      	movs	r3, #1
 800a292:	425b      	negs	r3, r3
 800a294:	e7d0      	b.n	800a238 <_svfiprintf_r+0x12c>
 800a296:	2300      	movs	r3, #0
 800a298:	200a      	movs	r0, #10
 800a29a:	001a      	movs	r2, r3
 800a29c:	3501      	adds	r5, #1
 800a29e:	6063      	str	r3, [r4, #4]
 800a2a0:	7829      	ldrb	r1, [r5, #0]
 800a2a2:	1c6e      	adds	r6, r5, #1
 800a2a4:	3930      	subs	r1, #48	; 0x30
 800a2a6:	2909      	cmp	r1, #9
 800a2a8:	d903      	bls.n	800a2b2 <_svfiprintf_r+0x1a6>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d0c5      	beq.n	800a23a <_svfiprintf_r+0x12e>
 800a2ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a2b0:	e7c3      	b.n	800a23a <_svfiprintf_r+0x12e>
 800a2b2:	4342      	muls	r2, r0
 800a2b4:	0035      	movs	r5, r6
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	1852      	adds	r2, r2, r1
 800a2ba:	e7f1      	b.n	800a2a0 <_svfiprintf_r+0x194>
 800a2bc:	ab07      	add	r3, sp, #28
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	003a      	movs	r2, r7
 800a2c2:	0021      	movs	r1, r4
 800a2c4:	4b10      	ldr	r3, [pc, #64]	; (800a308 <_svfiprintf_r+0x1fc>)
 800a2c6:	9803      	ldr	r0, [sp, #12]
 800a2c8:	e000      	b.n	800a2cc <_svfiprintf_r+0x1c0>
 800a2ca:	bf00      	nop
 800a2cc:	9004      	str	r0, [sp, #16]
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	d1d3      	bne.n	800a27c <_svfiprintf_r+0x170>
 800a2d4:	89bb      	ldrh	r3, [r7, #12]
 800a2d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a2d8:	065b      	lsls	r3, r3, #25
 800a2da:	d400      	bmi.n	800a2de <_svfiprintf_r+0x1d2>
 800a2dc:	e72d      	b.n	800a13a <_svfiprintf_r+0x2e>
 800a2de:	2001      	movs	r0, #1
 800a2e0:	4240      	negs	r0, r0
 800a2e2:	e72a      	b.n	800a13a <_svfiprintf_r+0x2e>
 800a2e4:	ab07      	add	r3, sp, #28
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	003a      	movs	r2, r7
 800a2ea:	0021      	movs	r1, r4
 800a2ec:	4b06      	ldr	r3, [pc, #24]	; (800a308 <_svfiprintf_r+0x1fc>)
 800a2ee:	9803      	ldr	r0, [sp, #12]
 800a2f0:	f000 f87c 	bl	800a3ec <_printf_i>
 800a2f4:	e7ea      	b.n	800a2cc <_svfiprintf_r+0x1c0>
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	0800c4e4 	.word	0x0800c4e4
 800a2fc:	0800c4ea 	.word	0x0800c4ea
 800a300:	0800c4ee 	.word	0x0800c4ee
 800a304:	00000000 	.word	0x00000000
 800a308:	0800a049 	.word	0x0800a049

0800a30c <_printf_common>:
 800a30c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a30e:	0015      	movs	r5, r2
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	688a      	ldr	r2, [r1, #8]
 800a314:	690b      	ldr	r3, [r1, #16]
 800a316:	000c      	movs	r4, r1
 800a318:	9000      	str	r0, [sp, #0]
 800a31a:	4293      	cmp	r3, r2
 800a31c:	da00      	bge.n	800a320 <_printf_common+0x14>
 800a31e:	0013      	movs	r3, r2
 800a320:	0022      	movs	r2, r4
 800a322:	602b      	str	r3, [r5, #0]
 800a324:	3243      	adds	r2, #67	; 0x43
 800a326:	7812      	ldrb	r2, [r2, #0]
 800a328:	2a00      	cmp	r2, #0
 800a32a:	d001      	beq.n	800a330 <_printf_common+0x24>
 800a32c:	3301      	adds	r3, #1
 800a32e:	602b      	str	r3, [r5, #0]
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	069b      	lsls	r3, r3, #26
 800a334:	d502      	bpl.n	800a33c <_printf_common+0x30>
 800a336:	682b      	ldr	r3, [r5, #0]
 800a338:	3302      	adds	r3, #2
 800a33a:	602b      	str	r3, [r5, #0]
 800a33c:	6822      	ldr	r2, [r4, #0]
 800a33e:	2306      	movs	r3, #6
 800a340:	0017      	movs	r7, r2
 800a342:	401f      	ands	r7, r3
 800a344:	421a      	tst	r2, r3
 800a346:	d027      	beq.n	800a398 <_printf_common+0x8c>
 800a348:	0023      	movs	r3, r4
 800a34a:	3343      	adds	r3, #67	; 0x43
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	1e5a      	subs	r2, r3, #1
 800a350:	4193      	sbcs	r3, r2
 800a352:	6822      	ldr	r2, [r4, #0]
 800a354:	0692      	lsls	r2, r2, #26
 800a356:	d430      	bmi.n	800a3ba <_printf_common+0xae>
 800a358:	0022      	movs	r2, r4
 800a35a:	9901      	ldr	r1, [sp, #4]
 800a35c:	9800      	ldr	r0, [sp, #0]
 800a35e:	9e08      	ldr	r6, [sp, #32]
 800a360:	3243      	adds	r2, #67	; 0x43
 800a362:	47b0      	blx	r6
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d025      	beq.n	800a3b4 <_printf_common+0xa8>
 800a368:	2306      	movs	r3, #6
 800a36a:	6820      	ldr	r0, [r4, #0]
 800a36c:	682a      	ldr	r2, [r5, #0]
 800a36e:	68e1      	ldr	r1, [r4, #12]
 800a370:	2500      	movs	r5, #0
 800a372:	4003      	ands	r3, r0
 800a374:	2b04      	cmp	r3, #4
 800a376:	d103      	bne.n	800a380 <_printf_common+0x74>
 800a378:	1a8d      	subs	r5, r1, r2
 800a37a:	43eb      	mvns	r3, r5
 800a37c:	17db      	asrs	r3, r3, #31
 800a37e:	401d      	ands	r5, r3
 800a380:	68a3      	ldr	r3, [r4, #8]
 800a382:	6922      	ldr	r2, [r4, #16]
 800a384:	4293      	cmp	r3, r2
 800a386:	dd01      	ble.n	800a38c <_printf_common+0x80>
 800a388:	1a9b      	subs	r3, r3, r2
 800a38a:	18ed      	adds	r5, r5, r3
 800a38c:	2700      	movs	r7, #0
 800a38e:	42bd      	cmp	r5, r7
 800a390:	d120      	bne.n	800a3d4 <_printf_common+0xc8>
 800a392:	2000      	movs	r0, #0
 800a394:	e010      	b.n	800a3b8 <_printf_common+0xac>
 800a396:	3701      	adds	r7, #1
 800a398:	68e3      	ldr	r3, [r4, #12]
 800a39a:	682a      	ldr	r2, [r5, #0]
 800a39c:	1a9b      	subs	r3, r3, r2
 800a39e:	42bb      	cmp	r3, r7
 800a3a0:	ddd2      	ble.n	800a348 <_printf_common+0x3c>
 800a3a2:	0022      	movs	r2, r4
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	9901      	ldr	r1, [sp, #4]
 800a3a8:	9800      	ldr	r0, [sp, #0]
 800a3aa:	9e08      	ldr	r6, [sp, #32]
 800a3ac:	3219      	adds	r2, #25
 800a3ae:	47b0      	blx	r6
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	d1f0      	bne.n	800a396 <_printf_common+0x8a>
 800a3b4:	2001      	movs	r0, #1
 800a3b6:	4240      	negs	r0, r0
 800a3b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3ba:	2030      	movs	r0, #48	; 0x30
 800a3bc:	18e1      	adds	r1, r4, r3
 800a3be:	3143      	adds	r1, #67	; 0x43
 800a3c0:	7008      	strb	r0, [r1, #0]
 800a3c2:	0021      	movs	r1, r4
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	3145      	adds	r1, #69	; 0x45
 800a3c8:	7809      	ldrb	r1, [r1, #0]
 800a3ca:	18a2      	adds	r2, r4, r2
 800a3cc:	3243      	adds	r2, #67	; 0x43
 800a3ce:	3302      	adds	r3, #2
 800a3d0:	7011      	strb	r1, [r2, #0]
 800a3d2:	e7c1      	b.n	800a358 <_printf_common+0x4c>
 800a3d4:	0022      	movs	r2, r4
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	9901      	ldr	r1, [sp, #4]
 800a3da:	9800      	ldr	r0, [sp, #0]
 800a3dc:	9e08      	ldr	r6, [sp, #32]
 800a3de:	321a      	adds	r2, #26
 800a3e0:	47b0      	blx	r6
 800a3e2:	1c43      	adds	r3, r0, #1
 800a3e4:	d0e6      	beq.n	800a3b4 <_printf_common+0xa8>
 800a3e6:	3701      	adds	r7, #1
 800a3e8:	e7d1      	b.n	800a38e <_printf_common+0x82>
	...

0800a3ec <_printf_i>:
 800a3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3ee:	b08b      	sub	sp, #44	; 0x2c
 800a3f0:	9206      	str	r2, [sp, #24]
 800a3f2:	000a      	movs	r2, r1
 800a3f4:	3243      	adds	r2, #67	; 0x43
 800a3f6:	9307      	str	r3, [sp, #28]
 800a3f8:	9005      	str	r0, [sp, #20]
 800a3fa:	9204      	str	r2, [sp, #16]
 800a3fc:	7e0a      	ldrb	r2, [r1, #24]
 800a3fe:	000c      	movs	r4, r1
 800a400:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a402:	2a78      	cmp	r2, #120	; 0x78
 800a404:	d807      	bhi.n	800a416 <_printf_i+0x2a>
 800a406:	2a62      	cmp	r2, #98	; 0x62
 800a408:	d809      	bhi.n	800a41e <_printf_i+0x32>
 800a40a:	2a00      	cmp	r2, #0
 800a40c:	d100      	bne.n	800a410 <_printf_i+0x24>
 800a40e:	e0c1      	b.n	800a594 <_printf_i+0x1a8>
 800a410:	2a58      	cmp	r2, #88	; 0x58
 800a412:	d100      	bne.n	800a416 <_printf_i+0x2a>
 800a414:	e08c      	b.n	800a530 <_printf_i+0x144>
 800a416:	0026      	movs	r6, r4
 800a418:	3642      	adds	r6, #66	; 0x42
 800a41a:	7032      	strb	r2, [r6, #0]
 800a41c:	e022      	b.n	800a464 <_printf_i+0x78>
 800a41e:	0010      	movs	r0, r2
 800a420:	3863      	subs	r0, #99	; 0x63
 800a422:	2815      	cmp	r0, #21
 800a424:	d8f7      	bhi.n	800a416 <_printf_i+0x2a>
 800a426:	f7f5 fe81 	bl	800012c <__gnu_thumb1_case_shi>
 800a42a:	0016      	.short	0x0016
 800a42c:	fff6001f 	.word	0xfff6001f
 800a430:	fff6fff6 	.word	0xfff6fff6
 800a434:	001ffff6 	.word	0x001ffff6
 800a438:	fff6fff6 	.word	0xfff6fff6
 800a43c:	fff6fff6 	.word	0xfff6fff6
 800a440:	003600a8 	.word	0x003600a8
 800a444:	fff6009a 	.word	0xfff6009a
 800a448:	00b9fff6 	.word	0x00b9fff6
 800a44c:	0036fff6 	.word	0x0036fff6
 800a450:	fff6fff6 	.word	0xfff6fff6
 800a454:	009e      	.short	0x009e
 800a456:	0026      	movs	r6, r4
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	3642      	adds	r6, #66	; 0x42
 800a45c:	1d11      	adds	r1, r2, #4
 800a45e:	6019      	str	r1, [r3, #0]
 800a460:	6813      	ldr	r3, [r2, #0]
 800a462:	7033      	strb	r3, [r6, #0]
 800a464:	2301      	movs	r3, #1
 800a466:	e0a7      	b.n	800a5b8 <_printf_i+0x1cc>
 800a468:	6808      	ldr	r0, [r1, #0]
 800a46a:	6819      	ldr	r1, [r3, #0]
 800a46c:	1d0a      	adds	r2, r1, #4
 800a46e:	0605      	lsls	r5, r0, #24
 800a470:	d50b      	bpl.n	800a48a <_printf_i+0x9e>
 800a472:	680d      	ldr	r5, [r1, #0]
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	2d00      	cmp	r5, #0
 800a478:	da03      	bge.n	800a482 <_printf_i+0x96>
 800a47a:	232d      	movs	r3, #45	; 0x2d
 800a47c:	9a04      	ldr	r2, [sp, #16]
 800a47e:	426d      	negs	r5, r5
 800a480:	7013      	strb	r3, [r2, #0]
 800a482:	4b61      	ldr	r3, [pc, #388]	; (800a608 <_printf_i+0x21c>)
 800a484:	270a      	movs	r7, #10
 800a486:	9303      	str	r3, [sp, #12]
 800a488:	e01b      	b.n	800a4c2 <_printf_i+0xd6>
 800a48a:	680d      	ldr	r5, [r1, #0]
 800a48c:	601a      	str	r2, [r3, #0]
 800a48e:	0641      	lsls	r1, r0, #25
 800a490:	d5f1      	bpl.n	800a476 <_printf_i+0x8a>
 800a492:	b22d      	sxth	r5, r5
 800a494:	e7ef      	b.n	800a476 <_printf_i+0x8a>
 800a496:	680d      	ldr	r5, [r1, #0]
 800a498:	6819      	ldr	r1, [r3, #0]
 800a49a:	1d08      	adds	r0, r1, #4
 800a49c:	6018      	str	r0, [r3, #0]
 800a49e:	062e      	lsls	r6, r5, #24
 800a4a0:	d501      	bpl.n	800a4a6 <_printf_i+0xba>
 800a4a2:	680d      	ldr	r5, [r1, #0]
 800a4a4:	e003      	b.n	800a4ae <_printf_i+0xc2>
 800a4a6:	066d      	lsls	r5, r5, #25
 800a4a8:	d5fb      	bpl.n	800a4a2 <_printf_i+0xb6>
 800a4aa:	680d      	ldr	r5, [r1, #0]
 800a4ac:	b2ad      	uxth	r5, r5
 800a4ae:	4b56      	ldr	r3, [pc, #344]	; (800a608 <_printf_i+0x21c>)
 800a4b0:	2708      	movs	r7, #8
 800a4b2:	9303      	str	r3, [sp, #12]
 800a4b4:	2a6f      	cmp	r2, #111	; 0x6f
 800a4b6:	d000      	beq.n	800a4ba <_printf_i+0xce>
 800a4b8:	3702      	adds	r7, #2
 800a4ba:	0023      	movs	r3, r4
 800a4bc:	2200      	movs	r2, #0
 800a4be:	3343      	adds	r3, #67	; 0x43
 800a4c0:	701a      	strb	r2, [r3, #0]
 800a4c2:	6863      	ldr	r3, [r4, #4]
 800a4c4:	60a3      	str	r3, [r4, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	db03      	blt.n	800a4d2 <_printf_i+0xe6>
 800a4ca:	2204      	movs	r2, #4
 800a4cc:	6821      	ldr	r1, [r4, #0]
 800a4ce:	4391      	bics	r1, r2
 800a4d0:	6021      	str	r1, [r4, #0]
 800a4d2:	2d00      	cmp	r5, #0
 800a4d4:	d102      	bne.n	800a4dc <_printf_i+0xf0>
 800a4d6:	9e04      	ldr	r6, [sp, #16]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00c      	beq.n	800a4f6 <_printf_i+0x10a>
 800a4dc:	9e04      	ldr	r6, [sp, #16]
 800a4de:	0028      	movs	r0, r5
 800a4e0:	0039      	movs	r1, r7
 800a4e2:	f7f5 feb3 	bl	800024c <__aeabi_uidivmod>
 800a4e6:	9b03      	ldr	r3, [sp, #12]
 800a4e8:	3e01      	subs	r6, #1
 800a4ea:	5c5b      	ldrb	r3, [r3, r1]
 800a4ec:	7033      	strb	r3, [r6, #0]
 800a4ee:	002b      	movs	r3, r5
 800a4f0:	0005      	movs	r5, r0
 800a4f2:	429f      	cmp	r7, r3
 800a4f4:	d9f3      	bls.n	800a4de <_printf_i+0xf2>
 800a4f6:	2f08      	cmp	r7, #8
 800a4f8:	d109      	bne.n	800a50e <_printf_i+0x122>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	07db      	lsls	r3, r3, #31
 800a4fe:	d506      	bpl.n	800a50e <_printf_i+0x122>
 800a500:	6863      	ldr	r3, [r4, #4]
 800a502:	6922      	ldr	r2, [r4, #16]
 800a504:	4293      	cmp	r3, r2
 800a506:	dc02      	bgt.n	800a50e <_printf_i+0x122>
 800a508:	2330      	movs	r3, #48	; 0x30
 800a50a:	3e01      	subs	r6, #1
 800a50c:	7033      	strb	r3, [r6, #0]
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	1b9b      	subs	r3, r3, r6
 800a512:	6123      	str	r3, [r4, #16]
 800a514:	9b07      	ldr	r3, [sp, #28]
 800a516:	0021      	movs	r1, r4
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	9805      	ldr	r0, [sp, #20]
 800a51c:	9b06      	ldr	r3, [sp, #24]
 800a51e:	aa09      	add	r2, sp, #36	; 0x24
 800a520:	f7ff fef4 	bl	800a30c <_printf_common>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d14c      	bne.n	800a5c2 <_printf_i+0x1d6>
 800a528:	2001      	movs	r0, #1
 800a52a:	4240      	negs	r0, r0
 800a52c:	b00b      	add	sp, #44	; 0x2c
 800a52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a530:	3145      	adds	r1, #69	; 0x45
 800a532:	700a      	strb	r2, [r1, #0]
 800a534:	4a34      	ldr	r2, [pc, #208]	; (800a608 <_printf_i+0x21c>)
 800a536:	9203      	str	r2, [sp, #12]
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	6821      	ldr	r1, [r4, #0]
 800a53c:	ca20      	ldmia	r2!, {r5}
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	0608      	lsls	r0, r1, #24
 800a542:	d516      	bpl.n	800a572 <_printf_i+0x186>
 800a544:	07cb      	lsls	r3, r1, #31
 800a546:	d502      	bpl.n	800a54e <_printf_i+0x162>
 800a548:	2320      	movs	r3, #32
 800a54a:	4319      	orrs	r1, r3
 800a54c:	6021      	str	r1, [r4, #0]
 800a54e:	2710      	movs	r7, #16
 800a550:	2d00      	cmp	r5, #0
 800a552:	d1b2      	bne.n	800a4ba <_printf_i+0xce>
 800a554:	2320      	movs	r3, #32
 800a556:	6822      	ldr	r2, [r4, #0]
 800a558:	439a      	bics	r2, r3
 800a55a:	6022      	str	r2, [r4, #0]
 800a55c:	e7ad      	b.n	800a4ba <_printf_i+0xce>
 800a55e:	2220      	movs	r2, #32
 800a560:	6809      	ldr	r1, [r1, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	6022      	str	r2, [r4, #0]
 800a566:	0022      	movs	r2, r4
 800a568:	2178      	movs	r1, #120	; 0x78
 800a56a:	3245      	adds	r2, #69	; 0x45
 800a56c:	7011      	strb	r1, [r2, #0]
 800a56e:	4a27      	ldr	r2, [pc, #156]	; (800a60c <_printf_i+0x220>)
 800a570:	e7e1      	b.n	800a536 <_printf_i+0x14a>
 800a572:	0648      	lsls	r0, r1, #25
 800a574:	d5e6      	bpl.n	800a544 <_printf_i+0x158>
 800a576:	b2ad      	uxth	r5, r5
 800a578:	e7e4      	b.n	800a544 <_printf_i+0x158>
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	680d      	ldr	r5, [r1, #0]
 800a57e:	1d10      	adds	r0, r2, #4
 800a580:	6949      	ldr	r1, [r1, #20]
 800a582:	6018      	str	r0, [r3, #0]
 800a584:	6813      	ldr	r3, [r2, #0]
 800a586:	062e      	lsls	r6, r5, #24
 800a588:	d501      	bpl.n	800a58e <_printf_i+0x1a2>
 800a58a:	6019      	str	r1, [r3, #0]
 800a58c:	e002      	b.n	800a594 <_printf_i+0x1a8>
 800a58e:	066d      	lsls	r5, r5, #25
 800a590:	d5fb      	bpl.n	800a58a <_printf_i+0x19e>
 800a592:	8019      	strh	r1, [r3, #0]
 800a594:	2300      	movs	r3, #0
 800a596:	9e04      	ldr	r6, [sp, #16]
 800a598:	6123      	str	r3, [r4, #16]
 800a59a:	e7bb      	b.n	800a514 <_printf_i+0x128>
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	1d11      	adds	r1, r2, #4
 800a5a0:	6019      	str	r1, [r3, #0]
 800a5a2:	6816      	ldr	r6, [r2, #0]
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	0030      	movs	r0, r6
 800a5a8:	6862      	ldr	r2, [r4, #4]
 800a5aa:	f000 ff29 	bl	800b400 <memchr>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d001      	beq.n	800a5b6 <_printf_i+0x1ca>
 800a5b2:	1b80      	subs	r0, r0, r6
 800a5b4:	6060      	str	r0, [r4, #4]
 800a5b6:	6863      	ldr	r3, [r4, #4]
 800a5b8:	6123      	str	r3, [r4, #16]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	9a04      	ldr	r2, [sp, #16]
 800a5be:	7013      	strb	r3, [r2, #0]
 800a5c0:	e7a8      	b.n	800a514 <_printf_i+0x128>
 800a5c2:	6923      	ldr	r3, [r4, #16]
 800a5c4:	0032      	movs	r2, r6
 800a5c6:	9906      	ldr	r1, [sp, #24]
 800a5c8:	9805      	ldr	r0, [sp, #20]
 800a5ca:	9d07      	ldr	r5, [sp, #28]
 800a5cc:	47a8      	blx	r5
 800a5ce:	1c43      	adds	r3, r0, #1
 800a5d0:	d0aa      	beq.n	800a528 <_printf_i+0x13c>
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	079b      	lsls	r3, r3, #30
 800a5d6:	d415      	bmi.n	800a604 <_printf_i+0x218>
 800a5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5da:	68e0      	ldr	r0, [r4, #12]
 800a5dc:	4298      	cmp	r0, r3
 800a5de:	daa5      	bge.n	800a52c <_printf_i+0x140>
 800a5e0:	0018      	movs	r0, r3
 800a5e2:	e7a3      	b.n	800a52c <_printf_i+0x140>
 800a5e4:	0022      	movs	r2, r4
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	9906      	ldr	r1, [sp, #24]
 800a5ea:	9805      	ldr	r0, [sp, #20]
 800a5ec:	9e07      	ldr	r6, [sp, #28]
 800a5ee:	3219      	adds	r2, #25
 800a5f0:	47b0      	blx	r6
 800a5f2:	1c43      	adds	r3, r0, #1
 800a5f4:	d098      	beq.n	800a528 <_printf_i+0x13c>
 800a5f6:	3501      	adds	r5, #1
 800a5f8:	68e3      	ldr	r3, [r4, #12]
 800a5fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5fc:	1a9b      	subs	r3, r3, r2
 800a5fe:	42ab      	cmp	r3, r5
 800a600:	dcf0      	bgt.n	800a5e4 <_printf_i+0x1f8>
 800a602:	e7e9      	b.n	800a5d8 <_printf_i+0x1ec>
 800a604:	2500      	movs	r5, #0
 800a606:	e7f7      	b.n	800a5f8 <_printf_i+0x20c>
 800a608:	0800c4f5 	.word	0x0800c4f5
 800a60c:	0800c506 	.word	0x0800c506

0800a610 <_sbrk_r>:
 800a610:	2300      	movs	r3, #0
 800a612:	b570      	push	{r4, r5, r6, lr}
 800a614:	4d06      	ldr	r5, [pc, #24]	; (800a630 <_sbrk_r+0x20>)
 800a616:	0004      	movs	r4, r0
 800a618:	0008      	movs	r0, r1
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	f7f9 fcec 	bl	8003ff8 <_sbrk>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d103      	bne.n	800a62c <_sbrk_r+0x1c>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d000      	beq.n	800a62c <_sbrk_r+0x1c>
 800a62a:	6023      	str	r3, [r4, #0]
 800a62c:	bd70      	pop	{r4, r5, r6, pc}
 800a62e:	46c0      	nop			; (mov r8, r8)
 800a630:	20000e40 	.word	0x20000e40

0800a634 <strcpy>:
 800a634:	0003      	movs	r3, r0
 800a636:	780a      	ldrb	r2, [r1, #0]
 800a638:	3101      	adds	r1, #1
 800a63a:	701a      	strb	r2, [r3, #0]
 800a63c:	3301      	adds	r3, #1
 800a63e:	2a00      	cmp	r2, #0
 800a640:	d1f9      	bne.n	800a636 <strcpy+0x2>
 800a642:	4770      	bx	lr

0800a644 <__assert_func>:
 800a644:	b530      	push	{r4, r5, lr}
 800a646:	0014      	movs	r4, r2
 800a648:	001a      	movs	r2, r3
 800a64a:	4b09      	ldr	r3, [pc, #36]	; (800a670 <__assert_func+0x2c>)
 800a64c:	0005      	movs	r5, r0
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	b085      	sub	sp, #20
 800a652:	68d8      	ldr	r0, [r3, #12]
 800a654:	4b07      	ldr	r3, [pc, #28]	; (800a674 <__assert_func+0x30>)
 800a656:	2c00      	cmp	r4, #0
 800a658:	d101      	bne.n	800a65e <__assert_func+0x1a>
 800a65a:	4b07      	ldr	r3, [pc, #28]	; (800a678 <__assert_func+0x34>)
 800a65c:	001c      	movs	r4, r3
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	9100      	str	r1, [sp, #0]
 800a662:	002b      	movs	r3, r5
 800a664:	4905      	ldr	r1, [pc, #20]	; (800a67c <__assert_func+0x38>)
 800a666:	9402      	str	r4, [sp, #8]
 800a668:	f000 feb0 	bl	800b3cc <fiprintf>
 800a66c:	f001 f978 	bl	800b960 <abort>
 800a670:	20000014 	.word	0x20000014
 800a674:	0800c517 	.word	0x0800c517
 800a678:	0800c552 	.word	0x0800c552
 800a67c:	0800c524 	.word	0x0800c524

0800a680 <quorem>:
 800a680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a682:	0006      	movs	r6, r0
 800a684:	690b      	ldr	r3, [r1, #16]
 800a686:	6932      	ldr	r2, [r6, #16]
 800a688:	b087      	sub	sp, #28
 800a68a:	2000      	movs	r0, #0
 800a68c:	9103      	str	r1, [sp, #12]
 800a68e:	429a      	cmp	r2, r3
 800a690:	db65      	blt.n	800a75e <quorem+0xde>
 800a692:	3b01      	subs	r3, #1
 800a694:	009c      	lsls	r4, r3, #2
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	000b      	movs	r3, r1
 800a69a:	3314      	adds	r3, #20
 800a69c:	9305      	str	r3, [sp, #20]
 800a69e:	191b      	adds	r3, r3, r4
 800a6a0:	9304      	str	r3, [sp, #16]
 800a6a2:	0033      	movs	r3, r6
 800a6a4:	3314      	adds	r3, #20
 800a6a6:	9302      	str	r3, [sp, #8]
 800a6a8:	191c      	adds	r4, r3, r4
 800a6aa:	9b04      	ldr	r3, [sp, #16]
 800a6ac:	6827      	ldr	r7, [r4, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	0038      	movs	r0, r7
 800a6b2:	1c5d      	adds	r5, r3, #1
 800a6b4:	0029      	movs	r1, r5
 800a6b6:	9301      	str	r3, [sp, #4]
 800a6b8:	f7f5 fd42 	bl	8000140 <__udivsi3>
 800a6bc:	9001      	str	r0, [sp, #4]
 800a6be:	42af      	cmp	r7, r5
 800a6c0:	d324      	bcc.n	800a70c <quorem+0x8c>
 800a6c2:	2500      	movs	r5, #0
 800a6c4:	46ac      	mov	ip, r5
 800a6c6:	9802      	ldr	r0, [sp, #8]
 800a6c8:	9f05      	ldr	r7, [sp, #20]
 800a6ca:	cf08      	ldmia	r7!, {r3}
 800a6cc:	9a01      	ldr	r2, [sp, #4]
 800a6ce:	b299      	uxth	r1, r3
 800a6d0:	4351      	muls	r1, r2
 800a6d2:	0c1b      	lsrs	r3, r3, #16
 800a6d4:	4353      	muls	r3, r2
 800a6d6:	1949      	adds	r1, r1, r5
 800a6d8:	0c0a      	lsrs	r2, r1, #16
 800a6da:	189b      	adds	r3, r3, r2
 800a6dc:	6802      	ldr	r2, [r0, #0]
 800a6de:	b289      	uxth	r1, r1
 800a6e0:	b292      	uxth	r2, r2
 800a6e2:	4462      	add	r2, ip
 800a6e4:	1a52      	subs	r2, r2, r1
 800a6e6:	6801      	ldr	r1, [r0, #0]
 800a6e8:	0c1d      	lsrs	r5, r3, #16
 800a6ea:	0c09      	lsrs	r1, r1, #16
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	1acb      	subs	r3, r1, r3
 800a6f0:	1411      	asrs	r1, r2, #16
 800a6f2:	185b      	adds	r3, r3, r1
 800a6f4:	1419      	asrs	r1, r3, #16
 800a6f6:	b292      	uxth	r2, r2
 800a6f8:	041b      	lsls	r3, r3, #16
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	9b04      	ldr	r3, [sp, #16]
 800a6fe:	468c      	mov	ip, r1
 800a700:	c004      	stmia	r0!, {r2}
 800a702:	42bb      	cmp	r3, r7
 800a704:	d2e1      	bcs.n	800a6ca <quorem+0x4a>
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d030      	beq.n	800a76e <quorem+0xee>
 800a70c:	0030      	movs	r0, r6
 800a70e:	9903      	ldr	r1, [sp, #12]
 800a710:	f7ff fa74 	bl	8009bfc <__mcmp>
 800a714:	2800      	cmp	r0, #0
 800a716:	db21      	blt.n	800a75c <quorem+0xdc>
 800a718:	0030      	movs	r0, r6
 800a71a:	2400      	movs	r4, #0
 800a71c:	9b01      	ldr	r3, [sp, #4]
 800a71e:	9903      	ldr	r1, [sp, #12]
 800a720:	3301      	adds	r3, #1
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	3014      	adds	r0, #20
 800a726:	3114      	adds	r1, #20
 800a728:	6803      	ldr	r3, [r0, #0]
 800a72a:	c920      	ldmia	r1!, {r5}
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	1914      	adds	r4, r2, r4
 800a730:	b2aa      	uxth	r2, r5
 800a732:	1aa2      	subs	r2, r4, r2
 800a734:	0c1b      	lsrs	r3, r3, #16
 800a736:	0c2d      	lsrs	r5, r5, #16
 800a738:	1414      	asrs	r4, r2, #16
 800a73a:	1b5b      	subs	r3, r3, r5
 800a73c:	191b      	adds	r3, r3, r4
 800a73e:	141c      	asrs	r4, r3, #16
 800a740:	b292      	uxth	r2, r2
 800a742:	041b      	lsls	r3, r3, #16
 800a744:	4313      	orrs	r3, r2
 800a746:	c008      	stmia	r0!, {r3}
 800a748:	9b04      	ldr	r3, [sp, #16]
 800a74a:	428b      	cmp	r3, r1
 800a74c:	d2ec      	bcs.n	800a728 <quorem+0xa8>
 800a74e:	9b00      	ldr	r3, [sp, #0]
 800a750:	9a02      	ldr	r2, [sp, #8]
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	18d3      	adds	r3, r2, r3
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	2a00      	cmp	r2, #0
 800a75a:	d015      	beq.n	800a788 <quorem+0x108>
 800a75c:	9801      	ldr	r0, [sp, #4]
 800a75e:	b007      	add	sp, #28
 800a760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d106      	bne.n	800a776 <quorem+0xf6>
 800a768:	9b00      	ldr	r3, [sp, #0]
 800a76a:	3b01      	subs	r3, #1
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	9b02      	ldr	r3, [sp, #8]
 800a770:	3c04      	subs	r4, #4
 800a772:	42a3      	cmp	r3, r4
 800a774:	d3f5      	bcc.n	800a762 <quorem+0xe2>
 800a776:	9b00      	ldr	r3, [sp, #0]
 800a778:	6133      	str	r3, [r6, #16]
 800a77a:	e7c7      	b.n	800a70c <quorem+0x8c>
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	2a00      	cmp	r2, #0
 800a780:	d106      	bne.n	800a790 <quorem+0x110>
 800a782:	9a00      	ldr	r2, [sp, #0]
 800a784:	3a01      	subs	r2, #1
 800a786:	9200      	str	r2, [sp, #0]
 800a788:	9a02      	ldr	r2, [sp, #8]
 800a78a:	3b04      	subs	r3, #4
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d3f5      	bcc.n	800a77c <quorem+0xfc>
 800a790:	9b00      	ldr	r3, [sp, #0]
 800a792:	6133      	str	r3, [r6, #16]
 800a794:	e7e2      	b.n	800a75c <quorem+0xdc>
	...

0800a798 <_dtoa_r>:
 800a798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a79a:	b09d      	sub	sp, #116	; 0x74
 800a79c:	9202      	str	r2, [sp, #8]
 800a79e:	9303      	str	r3, [sp, #12]
 800a7a0:	9b02      	ldr	r3, [sp, #8]
 800a7a2:	9c03      	ldr	r4, [sp, #12]
 800a7a4:	9308      	str	r3, [sp, #32]
 800a7a6:	9409      	str	r4, [sp, #36]	; 0x24
 800a7a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a7aa:	0007      	movs	r7, r0
 800a7ac:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a7ae:	2c00      	cmp	r4, #0
 800a7b0:	d10e      	bne.n	800a7d0 <_dtoa_r+0x38>
 800a7b2:	2010      	movs	r0, #16
 800a7b4:	f000 fe1a 	bl	800b3ec <malloc>
 800a7b8:	1e02      	subs	r2, r0, #0
 800a7ba:	6278      	str	r0, [r7, #36]	; 0x24
 800a7bc:	d104      	bne.n	800a7c8 <_dtoa_r+0x30>
 800a7be:	21ea      	movs	r1, #234	; 0xea
 800a7c0:	4bc7      	ldr	r3, [pc, #796]	; (800aae0 <_dtoa_r+0x348>)
 800a7c2:	48c8      	ldr	r0, [pc, #800]	; (800aae4 <_dtoa_r+0x34c>)
 800a7c4:	f7ff ff3e 	bl	800a644 <__assert_func>
 800a7c8:	6044      	str	r4, [r0, #4]
 800a7ca:	6084      	str	r4, [r0, #8]
 800a7cc:	6004      	str	r4, [r0, #0]
 800a7ce:	60c4      	str	r4, [r0, #12]
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	6819      	ldr	r1, [r3, #0]
 800a7d4:	2900      	cmp	r1, #0
 800a7d6:	d00a      	beq.n	800a7ee <_dtoa_r+0x56>
 800a7d8:	685a      	ldr	r2, [r3, #4]
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4093      	lsls	r3, r2
 800a7de:	604a      	str	r2, [r1, #4]
 800a7e0:	608b      	str	r3, [r1, #8]
 800a7e2:	0038      	movs	r0, r7
 800a7e4:	f7fe ffca 	bl	800977c <_Bfree>
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	601a      	str	r2, [r3, #0]
 800a7ee:	9b03      	ldr	r3, [sp, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	da20      	bge.n	800a836 <_dtoa_r+0x9e>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	9b03      	ldr	r3, [sp, #12]
 800a7fa:	005b      	lsls	r3, r3, #1
 800a7fc:	085b      	lsrs	r3, r3, #1
 800a7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a800:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a802:	4bb9      	ldr	r3, [pc, #740]	; (800aae8 <_dtoa_r+0x350>)
 800a804:	4ab8      	ldr	r2, [pc, #736]	; (800aae8 <_dtoa_r+0x350>)
 800a806:	402b      	ands	r3, r5
 800a808:	4293      	cmp	r3, r2
 800a80a:	d117      	bne.n	800a83c <_dtoa_r+0xa4>
 800a80c:	4bb7      	ldr	r3, [pc, #732]	; (800aaec <_dtoa_r+0x354>)
 800a80e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a810:	0328      	lsls	r0, r5, #12
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	9b02      	ldr	r3, [sp, #8]
 800a816:	0b00      	lsrs	r0, r0, #12
 800a818:	4318      	orrs	r0, r3
 800a81a:	d101      	bne.n	800a820 <_dtoa_r+0x88>
 800a81c:	f000 fdbf 	bl	800b39e <_dtoa_r+0xc06>
 800a820:	48b3      	ldr	r0, [pc, #716]	; (800aaf0 <_dtoa_r+0x358>)
 800a822:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a824:	9006      	str	r0, [sp, #24]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d002      	beq.n	800a830 <_dtoa_r+0x98>
 800a82a:	4bb2      	ldr	r3, [pc, #712]	; (800aaf4 <_dtoa_r+0x35c>)
 800a82c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a82e:	6013      	str	r3, [r2, #0]
 800a830:	9806      	ldr	r0, [sp, #24]
 800a832:	b01d      	add	sp, #116	; 0x74
 800a834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a836:	2300      	movs	r3, #0
 800a838:	602b      	str	r3, [r5, #0]
 800a83a:	e7e1      	b.n	800a800 <_dtoa_r+0x68>
 800a83c:	9b08      	ldr	r3, [sp, #32]
 800a83e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a840:	9312      	str	r3, [sp, #72]	; 0x48
 800a842:	9413      	str	r4, [sp, #76]	; 0x4c
 800a844:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a846:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a848:	2200      	movs	r2, #0
 800a84a:	2300      	movs	r3, #0
 800a84c:	f7f5 fdfe 	bl	800044c <__aeabi_dcmpeq>
 800a850:	1e04      	subs	r4, r0, #0
 800a852:	d009      	beq.n	800a868 <_dtoa_r+0xd0>
 800a854:	2301      	movs	r3, #1
 800a856:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a858:	6013      	str	r3, [r2, #0]
 800a85a:	4ba7      	ldr	r3, [pc, #668]	; (800aaf8 <_dtoa_r+0x360>)
 800a85c:	9306      	str	r3, [sp, #24]
 800a85e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a860:	2b00      	cmp	r3, #0
 800a862:	d0e5      	beq.n	800a830 <_dtoa_r+0x98>
 800a864:	4ba5      	ldr	r3, [pc, #660]	; (800aafc <_dtoa_r+0x364>)
 800a866:	e7e1      	b.n	800a82c <_dtoa_r+0x94>
 800a868:	ab1a      	add	r3, sp, #104	; 0x68
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	ab1b      	add	r3, sp, #108	; 0x6c
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	0038      	movs	r0, r7
 800a872:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a876:	f7ff fa75 	bl	8009d64 <__d2b>
 800a87a:	006e      	lsls	r6, r5, #1
 800a87c:	9005      	str	r0, [sp, #20]
 800a87e:	0d76      	lsrs	r6, r6, #21
 800a880:	d100      	bne.n	800a884 <_dtoa_r+0xec>
 800a882:	e07c      	b.n	800a97e <_dtoa_r+0x1e6>
 800a884:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a886:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a888:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a88a:	4a9d      	ldr	r2, [pc, #628]	; (800ab00 <_dtoa_r+0x368>)
 800a88c:	031b      	lsls	r3, r3, #12
 800a88e:	0b1b      	lsrs	r3, r3, #12
 800a890:	431a      	orrs	r2, r3
 800a892:	0011      	movs	r1, r2
 800a894:	4b9b      	ldr	r3, [pc, #620]	; (800ab04 <_dtoa_r+0x36c>)
 800a896:	9418      	str	r4, [sp, #96]	; 0x60
 800a898:	18f6      	adds	r6, r6, r3
 800a89a:	2200      	movs	r2, #0
 800a89c:	4b9a      	ldr	r3, [pc, #616]	; (800ab08 <_dtoa_r+0x370>)
 800a89e:	f7f7 f8d9 	bl	8001a54 <__aeabi_dsub>
 800a8a2:	4a9a      	ldr	r2, [pc, #616]	; (800ab0c <_dtoa_r+0x374>)
 800a8a4:	4b9a      	ldr	r3, [pc, #616]	; (800ab10 <_dtoa_r+0x378>)
 800a8a6:	f7f6 fe69 	bl	800157c <__aeabi_dmul>
 800a8aa:	4a9a      	ldr	r2, [pc, #616]	; (800ab14 <_dtoa_r+0x37c>)
 800a8ac:	4b9a      	ldr	r3, [pc, #616]	; (800ab18 <_dtoa_r+0x380>)
 800a8ae:	f7f5 ff27 	bl	8000700 <__aeabi_dadd>
 800a8b2:	0004      	movs	r4, r0
 800a8b4:	0030      	movs	r0, r6
 800a8b6:	000d      	movs	r5, r1
 800a8b8:	f7f7 fc94 	bl	80021e4 <__aeabi_i2d>
 800a8bc:	4a97      	ldr	r2, [pc, #604]	; (800ab1c <_dtoa_r+0x384>)
 800a8be:	4b98      	ldr	r3, [pc, #608]	; (800ab20 <_dtoa_r+0x388>)
 800a8c0:	f7f6 fe5c 	bl	800157c <__aeabi_dmul>
 800a8c4:	0002      	movs	r2, r0
 800a8c6:	000b      	movs	r3, r1
 800a8c8:	0020      	movs	r0, r4
 800a8ca:	0029      	movs	r1, r5
 800a8cc:	f7f5 ff18 	bl	8000700 <__aeabi_dadd>
 800a8d0:	0004      	movs	r4, r0
 800a8d2:	000d      	movs	r5, r1
 800a8d4:	f7f7 fc50 	bl	8002178 <__aeabi_d2iz>
 800a8d8:	2200      	movs	r2, #0
 800a8da:	9002      	str	r0, [sp, #8]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	0020      	movs	r0, r4
 800a8e0:	0029      	movs	r1, r5
 800a8e2:	f7f5 fdb9 	bl	8000458 <__aeabi_dcmplt>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d00b      	beq.n	800a902 <_dtoa_r+0x16a>
 800a8ea:	9802      	ldr	r0, [sp, #8]
 800a8ec:	f7f7 fc7a 	bl	80021e4 <__aeabi_i2d>
 800a8f0:	002b      	movs	r3, r5
 800a8f2:	0022      	movs	r2, r4
 800a8f4:	f7f5 fdaa 	bl	800044c <__aeabi_dcmpeq>
 800a8f8:	4243      	negs	r3, r0
 800a8fa:	4158      	adcs	r0, r3
 800a8fc:	9b02      	ldr	r3, [sp, #8]
 800a8fe:	1a1b      	subs	r3, r3, r0
 800a900:	9302      	str	r3, [sp, #8]
 800a902:	2301      	movs	r3, #1
 800a904:	9316      	str	r3, [sp, #88]	; 0x58
 800a906:	9b02      	ldr	r3, [sp, #8]
 800a908:	2b16      	cmp	r3, #22
 800a90a:	d80f      	bhi.n	800a92c <_dtoa_r+0x194>
 800a90c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a90e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a910:	00da      	lsls	r2, r3, #3
 800a912:	4b84      	ldr	r3, [pc, #528]	; (800ab24 <_dtoa_r+0x38c>)
 800a914:	189b      	adds	r3, r3, r2
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	f7f5 fd9d 	bl	8000458 <__aeabi_dcmplt>
 800a91e:	2800      	cmp	r0, #0
 800a920:	d049      	beq.n	800a9b6 <_dtoa_r+0x21e>
 800a922:	9b02      	ldr	r3, [sp, #8]
 800a924:	3b01      	subs	r3, #1
 800a926:	9302      	str	r3, [sp, #8]
 800a928:	2300      	movs	r3, #0
 800a92a:	9316      	str	r3, [sp, #88]	; 0x58
 800a92c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a92e:	1b9e      	subs	r6, r3, r6
 800a930:	2300      	movs	r3, #0
 800a932:	930a      	str	r3, [sp, #40]	; 0x28
 800a934:	0033      	movs	r3, r6
 800a936:	3b01      	subs	r3, #1
 800a938:	930d      	str	r3, [sp, #52]	; 0x34
 800a93a:	d504      	bpl.n	800a946 <_dtoa_r+0x1ae>
 800a93c:	2301      	movs	r3, #1
 800a93e:	1b9b      	subs	r3, r3, r6
 800a940:	930a      	str	r3, [sp, #40]	; 0x28
 800a942:	2300      	movs	r3, #0
 800a944:	930d      	str	r3, [sp, #52]	; 0x34
 800a946:	9b02      	ldr	r3, [sp, #8]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	db36      	blt.n	800a9ba <_dtoa_r+0x222>
 800a94c:	9a02      	ldr	r2, [sp, #8]
 800a94e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a950:	4694      	mov	ip, r2
 800a952:	4463      	add	r3, ip
 800a954:	930d      	str	r3, [sp, #52]	; 0x34
 800a956:	2300      	movs	r3, #0
 800a958:	9215      	str	r2, [sp, #84]	; 0x54
 800a95a:	930e      	str	r3, [sp, #56]	; 0x38
 800a95c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a95e:	2401      	movs	r4, #1
 800a960:	2b09      	cmp	r3, #9
 800a962:	d864      	bhi.n	800aa2e <_dtoa_r+0x296>
 800a964:	2b05      	cmp	r3, #5
 800a966:	dd02      	ble.n	800a96e <_dtoa_r+0x1d6>
 800a968:	2400      	movs	r4, #0
 800a96a:	3b04      	subs	r3, #4
 800a96c:	9322      	str	r3, [sp, #136]	; 0x88
 800a96e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a970:	1e98      	subs	r0, r3, #2
 800a972:	2803      	cmp	r0, #3
 800a974:	d864      	bhi.n	800aa40 <_dtoa_r+0x2a8>
 800a976:	f7f5 fbcf 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a97a:	3829      	.short	0x3829
 800a97c:	5836      	.short	0x5836
 800a97e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a980:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a982:	189e      	adds	r6, r3, r2
 800a984:	4b68      	ldr	r3, [pc, #416]	; (800ab28 <_dtoa_r+0x390>)
 800a986:	18f2      	adds	r2, r6, r3
 800a988:	2a20      	cmp	r2, #32
 800a98a:	dd0f      	ble.n	800a9ac <_dtoa_r+0x214>
 800a98c:	2340      	movs	r3, #64	; 0x40
 800a98e:	1a9b      	subs	r3, r3, r2
 800a990:	409d      	lsls	r5, r3
 800a992:	4b66      	ldr	r3, [pc, #408]	; (800ab2c <_dtoa_r+0x394>)
 800a994:	9802      	ldr	r0, [sp, #8]
 800a996:	18f3      	adds	r3, r6, r3
 800a998:	40d8      	lsrs	r0, r3
 800a99a:	4328      	orrs	r0, r5
 800a99c:	f7f7 fc52 	bl	8002244 <__aeabi_ui2d>
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	4c63      	ldr	r4, [pc, #396]	; (800ab30 <_dtoa_r+0x398>)
 800a9a4:	3e01      	subs	r6, #1
 800a9a6:	1909      	adds	r1, r1, r4
 800a9a8:	9318      	str	r3, [sp, #96]	; 0x60
 800a9aa:	e776      	b.n	800a89a <_dtoa_r+0x102>
 800a9ac:	2320      	movs	r3, #32
 800a9ae:	9802      	ldr	r0, [sp, #8]
 800a9b0:	1a9b      	subs	r3, r3, r2
 800a9b2:	4098      	lsls	r0, r3
 800a9b4:	e7f2      	b.n	800a99c <_dtoa_r+0x204>
 800a9b6:	9016      	str	r0, [sp, #88]	; 0x58
 800a9b8:	e7b8      	b.n	800a92c <_dtoa_r+0x194>
 800a9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9bc:	9a02      	ldr	r2, [sp, #8]
 800a9be:	1a9b      	subs	r3, r3, r2
 800a9c0:	930a      	str	r3, [sp, #40]	; 0x28
 800a9c2:	4253      	negs	r3, r2
 800a9c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9315      	str	r3, [sp, #84]	; 0x54
 800a9ca:	e7c7      	b.n	800a95c <_dtoa_r+0x1c4>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a9d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a9d4:	9307      	str	r3, [sp, #28]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	dc13      	bgt.n	800aa02 <_dtoa_r+0x26a>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	001a      	movs	r2, r3
 800a9de:	930c      	str	r3, [sp, #48]	; 0x30
 800a9e0:	9307      	str	r3, [sp, #28]
 800a9e2:	9223      	str	r2, [sp, #140]	; 0x8c
 800a9e4:	e00d      	b.n	800aa02 <_dtoa_r+0x26a>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e7f1      	b.n	800a9ce <_dtoa_r+0x236>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a9ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9f0:	4694      	mov	ip, r2
 800a9f2:	9b02      	ldr	r3, [sp, #8]
 800a9f4:	4463      	add	r3, ip
 800a9f6:	930c      	str	r3, [sp, #48]	; 0x30
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	9307      	str	r3, [sp, #28]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dc00      	bgt.n	800aa02 <_dtoa_r+0x26a>
 800aa00:	2301      	movs	r3, #1
 800aa02:	2200      	movs	r2, #0
 800aa04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa06:	6042      	str	r2, [r0, #4]
 800aa08:	3204      	adds	r2, #4
 800aa0a:	0015      	movs	r5, r2
 800aa0c:	3514      	adds	r5, #20
 800aa0e:	6841      	ldr	r1, [r0, #4]
 800aa10:	429d      	cmp	r5, r3
 800aa12:	d919      	bls.n	800aa48 <_dtoa_r+0x2b0>
 800aa14:	0038      	movs	r0, r7
 800aa16:	f7fe fe6d 	bl	80096f4 <_Balloc>
 800aa1a:	9006      	str	r0, [sp, #24]
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d117      	bne.n	800aa50 <_dtoa_r+0x2b8>
 800aa20:	21d5      	movs	r1, #213	; 0xd5
 800aa22:	0002      	movs	r2, r0
 800aa24:	4b43      	ldr	r3, [pc, #268]	; (800ab34 <_dtoa_r+0x39c>)
 800aa26:	0049      	lsls	r1, r1, #1
 800aa28:	e6cb      	b.n	800a7c2 <_dtoa_r+0x2a>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e7de      	b.n	800a9ec <_dtoa_r+0x254>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	940f      	str	r4, [sp, #60]	; 0x3c
 800aa32:	9322      	str	r3, [sp, #136]	; 0x88
 800aa34:	3b01      	subs	r3, #1
 800aa36:	930c      	str	r3, [sp, #48]	; 0x30
 800aa38:	9307      	str	r3, [sp, #28]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	3313      	adds	r3, #19
 800aa3e:	e7d0      	b.n	800a9e2 <_dtoa_r+0x24a>
 800aa40:	2301      	movs	r3, #1
 800aa42:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa44:	3b02      	subs	r3, #2
 800aa46:	e7f6      	b.n	800aa36 <_dtoa_r+0x29e>
 800aa48:	3101      	adds	r1, #1
 800aa4a:	6041      	str	r1, [r0, #4]
 800aa4c:	0052      	lsls	r2, r2, #1
 800aa4e:	e7dc      	b.n	800aa0a <_dtoa_r+0x272>
 800aa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa52:	9a06      	ldr	r2, [sp, #24]
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	9b07      	ldr	r3, [sp, #28]
 800aa58:	2b0e      	cmp	r3, #14
 800aa5a:	d900      	bls.n	800aa5e <_dtoa_r+0x2c6>
 800aa5c:	e0eb      	b.n	800ac36 <_dtoa_r+0x49e>
 800aa5e:	2c00      	cmp	r4, #0
 800aa60:	d100      	bne.n	800aa64 <_dtoa_r+0x2cc>
 800aa62:	e0e8      	b.n	800ac36 <_dtoa_r+0x49e>
 800aa64:	9b02      	ldr	r3, [sp, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dd68      	ble.n	800ab3c <_dtoa_r+0x3a4>
 800aa6a:	001a      	movs	r2, r3
 800aa6c:	210f      	movs	r1, #15
 800aa6e:	4b2d      	ldr	r3, [pc, #180]	; (800ab24 <_dtoa_r+0x38c>)
 800aa70:	400a      	ands	r2, r1
 800aa72:	00d2      	lsls	r2, r2, #3
 800aa74:	189b      	adds	r3, r3, r2
 800aa76:	681d      	ldr	r5, [r3, #0]
 800aa78:	685e      	ldr	r6, [r3, #4]
 800aa7a:	9b02      	ldr	r3, [sp, #8]
 800aa7c:	111c      	asrs	r4, r3, #4
 800aa7e:	2302      	movs	r3, #2
 800aa80:	9310      	str	r3, [sp, #64]	; 0x40
 800aa82:	9b02      	ldr	r3, [sp, #8]
 800aa84:	05db      	lsls	r3, r3, #23
 800aa86:	d50b      	bpl.n	800aaa0 <_dtoa_r+0x308>
 800aa88:	4b2b      	ldr	r3, [pc, #172]	; (800ab38 <_dtoa_r+0x3a0>)
 800aa8a:	400c      	ands	r4, r1
 800aa8c:	6a1a      	ldr	r2, [r3, #32]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aa92:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aa94:	f7f6 f970 	bl	8000d78 <__aeabi_ddiv>
 800aa98:	2303      	movs	r3, #3
 800aa9a:	9008      	str	r0, [sp, #32]
 800aa9c:	9109      	str	r1, [sp, #36]	; 0x24
 800aa9e:	9310      	str	r3, [sp, #64]	; 0x40
 800aaa0:	4b25      	ldr	r3, [pc, #148]	; (800ab38 <_dtoa_r+0x3a0>)
 800aaa2:	9314      	str	r3, [sp, #80]	; 0x50
 800aaa4:	2c00      	cmp	r4, #0
 800aaa6:	d108      	bne.n	800aaba <_dtoa_r+0x322>
 800aaa8:	9808      	ldr	r0, [sp, #32]
 800aaaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaac:	002a      	movs	r2, r5
 800aaae:	0033      	movs	r3, r6
 800aab0:	f7f6 f962 	bl	8000d78 <__aeabi_ddiv>
 800aab4:	9008      	str	r0, [sp, #32]
 800aab6:	9109      	str	r1, [sp, #36]	; 0x24
 800aab8:	e05c      	b.n	800ab74 <_dtoa_r+0x3dc>
 800aaba:	2301      	movs	r3, #1
 800aabc:	421c      	tst	r4, r3
 800aabe:	d00b      	beq.n	800aad8 <_dtoa_r+0x340>
 800aac0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aac2:	0028      	movs	r0, r5
 800aac4:	3301      	adds	r3, #1
 800aac6:	9310      	str	r3, [sp, #64]	; 0x40
 800aac8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aaca:	0031      	movs	r1, r6
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	f7f6 fd54 	bl	800157c <__aeabi_dmul>
 800aad4:	0005      	movs	r5, r0
 800aad6:	000e      	movs	r6, r1
 800aad8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aada:	1064      	asrs	r4, r4, #1
 800aadc:	3308      	adds	r3, #8
 800aade:	e7e0      	b.n	800aaa2 <_dtoa_r+0x30a>
 800aae0:	0800c361 	.word	0x0800c361
 800aae4:	0800c562 	.word	0x0800c562
 800aae8:	7ff00000 	.word	0x7ff00000
 800aaec:	0000270f 	.word	0x0000270f
 800aaf0:	0800c55c 	.word	0x0800c55c
 800aaf4:	0800c55f 	.word	0x0800c55f
 800aaf8:	0800c560 	.word	0x0800c560
 800aafc:	0800c561 	.word	0x0800c561
 800ab00:	3ff00000 	.word	0x3ff00000
 800ab04:	fffffc01 	.word	0xfffffc01
 800ab08:	3ff80000 	.word	0x3ff80000
 800ab0c:	636f4361 	.word	0x636f4361
 800ab10:	3fd287a7 	.word	0x3fd287a7
 800ab14:	8b60c8b3 	.word	0x8b60c8b3
 800ab18:	3fc68a28 	.word	0x3fc68a28
 800ab1c:	509f79fb 	.word	0x509f79fb
 800ab20:	3fd34413 	.word	0x3fd34413
 800ab24:	0800c410 	.word	0x0800c410
 800ab28:	00000432 	.word	0x00000432
 800ab2c:	00000412 	.word	0x00000412
 800ab30:	fe100000 	.word	0xfe100000
 800ab34:	0800c3d4 	.word	0x0800c3d4
 800ab38:	0800c3e8 	.word	0x0800c3e8
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	9310      	str	r3, [sp, #64]	; 0x40
 800ab40:	9b02      	ldr	r3, [sp, #8]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d016      	beq.n	800ab74 <_dtoa_r+0x3dc>
 800ab46:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ab48:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ab4a:	425c      	negs	r4, r3
 800ab4c:	230f      	movs	r3, #15
 800ab4e:	4ab6      	ldr	r2, [pc, #728]	; (800ae28 <_dtoa_r+0x690>)
 800ab50:	4023      	ands	r3, r4
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	18d3      	adds	r3, r2, r3
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	f7f6 fd0f 	bl	800157c <__aeabi_dmul>
 800ab5e:	2601      	movs	r6, #1
 800ab60:	2300      	movs	r3, #0
 800ab62:	9008      	str	r0, [sp, #32]
 800ab64:	9109      	str	r1, [sp, #36]	; 0x24
 800ab66:	4db1      	ldr	r5, [pc, #708]	; (800ae2c <_dtoa_r+0x694>)
 800ab68:	1124      	asrs	r4, r4, #4
 800ab6a:	2c00      	cmp	r4, #0
 800ab6c:	d000      	beq.n	800ab70 <_dtoa_r+0x3d8>
 800ab6e:	e094      	b.n	800ac9a <_dtoa_r+0x502>
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d19f      	bne.n	800aab4 <_dtoa_r+0x31c>
 800ab74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d100      	bne.n	800ab7c <_dtoa_r+0x3e4>
 800ab7a:	e09b      	b.n	800acb4 <_dtoa_r+0x51c>
 800ab7c:	9c08      	ldr	r4, [sp, #32]
 800ab7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab80:	2200      	movs	r2, #0
 800ab82:	0020      	movs	r0, r4
 800ab84:	0029      	movs	r1, r5
 800ab86:	4baa      	ldr	r3, [pc, #680]	; (800ae30 <_dtoa_r+0x698>)
 800ab88:	f7f5 fc66 	bl	8000458 <__aeabi_dcmplt>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	d100      	bne.n	800ab92 <_dtoa_r+0x3fa>
 800ab90:	e090      	b.n	800acb4 <_dtoa_r+0x51c>
 800ab92:	9b07      	ldr	r3, [sp, #28]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d100      	bne.n	800ab9a <_dtoa_r+0x402>
 800ab98:	e08c      	b.n	800acb4 <_dtoa_r+0x51c>
 800ab9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	dd46      	ble.n	800ac2e <_dtoa_r+0x496>
 800aba0:	9b02      	ldr	r3, [sp, #8]
 800aba2:	2200      	movs	r2, #0
 800aba4:	0020      	movs	r0, r4
 800aba6:	0029      	movs	r1, r5
 800aba8:	1e5e      	subs	r6, r3, #1
 800abaa:	4ba2      	ldr	r3, [pc, #648]	; (800ae34 <_dtoa_r+0x69c>)
 800abac:	f7f6 fce6 	bl	800157c <__aeabi_dmul>
 800abb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abb2:	9008      	str	r0, [sp, #32]
 800abb4:	9109      	str	r1, [sp, #36]	; 0x24
 800abb6:	3301      	adds	r3, #1
 800abb8:	9310      	str	r3, [sp, #64]	; 0x40
 800abba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abbc:	9810      	ldr	r0, [sp, #64]	; 0x40
 800abbe:	9c08      	ldr	r4, [sp, #32]
 800abc0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800abc2:	9314      	str	r3, [sp, #80]	; 0x50
 800abc4:	f7f7 fb0e 	bl	80021e4 <__aeabi_i2d>
 800abc8:	0022      	movs	r2, r4
 800abca:	002b      	movs	r3, r5
 800abcc:	f7f6 fcd6 	bl	800157c <__aeabi_dmul>
 800abd0:	2200      	movs	r2, #0
 800abd2:	4b99      	ldr	r3, [pc, #612]	; (800ae38 <_dtoa_r+0x6a0>)
 800abd4:	f7f5 fd94 	bl	8000700 <__aeabi_dadd>
 800abd8:	9010      	str	r0, [sp, #64]	; 0x40
 800abda:	9111      	str	r1, [sp, #68]	; 0x44
 800abdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800abde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abe0:	9208      	str	r2, [sp, #32]
 800abe2:	9309      	str	r3, [sp, #36]	; 0x24
 800abe4:	4a95      	ldr	r2, [pc, #596]	; (800ae3c <_dtoa_r+0x6a4>)
 800abe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abe8:	4694      	mov	ip, r2
 800abea:	4463      	add	r3, ip
 800abec:	9317      	str	r3, [sp, #92]	; 0x5c
 800abee:	9309      	str	r3, [sp, #36]	; 0x24
 800abf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d161      	bne.n	800acba <_dtoa_r+0x522>
 800abf6:	2200      	movs	r2, #0
 800abf8:	0020      	movs	r0, r4
 800abfa:	0029      	movs	r1, r5
 800abfc:	4b90      	ldr	r3, [pc, #576]	; (800ae40 <_dtoa_r+0x6a8>)
 800abfe:	f7f6 ff29 	bl	8001a54 <__aeabi_dsub>
 800ac02:	9a08      	ldr	r2, [sp, #32]
 800ac04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac06:	0004      	movs	r4, r0
 800ac08:	000d      	movs	r5, r1
 800ac0a:	f7f5 fc39 	bl	8000480 <__aeabi_dcmpgt>
 800ac0e:	2800      	cmp	r0, #0
 800ac10:	d000      	beq.n	800ac14 <_dtoa_r+0x47c>
 800ac12:	e2af      	b.n	800b174 <_dtoa_r+0x9dc>
 800ac14:	488b      	ldr	r0, [pc, #556]	; (800ae44 <_dtoa_r+0x6ac>)
 800ac16:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ac18:	4684      	mov	ip, r0
 800ac1a:	4461      	add	r1, ip
 800ac1c:	000b      	movs	r3, r1
 800ac1e:	0020      	movs	r0, r4
 800ac20:	0029      	movs	r1, r5
 800ac22:	9a08      	ldr	r2, [sp, #32]
 800ac24:	f7f5 fc18 	bl	8000458 <__aeabi_dcmplt>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d000      	beq.n	800ac2e <_dtoa_r+0x496>
 800ac2c:	e29f      	b.n	800b16e <_dtoa_r+0x9d6>
 800ac2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac30:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ac32:	9308      	str	r3, [sp, #32]
 800ac34:	9409      	str	r4, [sp, #36]	; 0x24
 800ac36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	da00      	bge.n	800ac3e <_dtoa_r+0x4a6>
 800ac3c:	e172      	b.n	800af24 <_dtoa_r+0x78c>
 800ac3e:	9a02      	ldr	r2, [sp, #8]
 800ac40:	2a0e      	cmp	r2, #14
 800ac42:	dd00      	ble.n	800ac46 <_dtoa_r+0x4ae>
 800ac44:	e16e      	b.n	800af24 <_dtoa_r+0x78c>
 800ac46:	4b78      	ldr	r3, [pc, #480]	; (800ae28 <_dtoa_r+0x690>)
 800ac48:	00d2      	lsls	r2, r2, #3
 800ac4a:	189b      	adds	r3, r3, r2
 800ac4c:	685c      	ldr	r4, [r3, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	930a      	str	r3, [sp, #40]	; 0x28
 800ac52:	940b      	str	r4, [sp, #44]	; 0x2c
 800ac54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	db00      	blt.n	800ac5c <_dtoa_r+0x4c4>
 800ac5a:	e0f7      	b.n	800ae4c <_dtoa_r+0x6b4>
 800ac5c:	9b07      	ldr	r3, [sp, #28]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dd00      	ble.n	800ac64 <_dtoa_r+0x4cc>
 800ac62:	e0f3      	b.n	800ae4c <_dtoa_r+0x6b4>
 800ac64:	d000      	beq.n	800ac68 <_dtoa_r+0x4d0>
 800ac66:	e282      	b.n	800b16e <_dtoa_r+0x9d6>
 800ac68:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ac6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	4b74      	ldr	r3, [pc, #464]	; (800ae40 <_dtoa_r+0x6a8>)
 800ac70:	f7f6 fc84 	bl	800157c <__aeabi_dmul>
 800ac74:	9a08      	ldr	r2, [sp, #32]
 800ac76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac78:	f7f5 fc0c 	bl	8000494 <__aeabi_dcmpge>
 800ac7c:	9e07      	ldr	r6, [sp, #28]
 800ac7e:	0035      	movs	r5, r6
 800ac80:	2800      	cmp	r0, #0
 800ac82:	d000      	beq.n	800ac86 <_dtoa_r+0x4ee>
 800ac84:	e259      	b.n	800b13a <_dtoa_r+0x9a2>
 800ac86:	9b06      	ldr	r3, [sp, #24]
 800ac88:	9a06      	ldr	r2, [sp, #24]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	9308      	str	r3, [sp, #32]
 800ac8e:	2331      	movs	r3, #49	; 0x31
 800ac90:	7013      	strb	r3, [r2, #0]
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	3301      	adds	r3, #1
 800ac96:	9302      	str	r3, [sp, #8]
 800ac98:	e254      	b.n	800b144 <_dtoa_r+0x9ac>
 800ac9a:	4234      	tst	r4, r6
 800ac9c:	d007      	beq.n	800acae <_dtoa_r+0x516>
 800ac9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aca0:	3301      	adds	r3, #1
 800aca2:	9310      	str	r3, [sp, #64]	; 0x40
 800aca4:	682a      	ldr	r2, [r5, #0]
 800aca6:	686b      	ldr	r3, [r5, #4]
 800aca8:	f7f6 fc68 	bl	800157c <__aeabi_dmul>
 800acac:	0033      	movs	r3, r6
 800acae:	1064      	asrs	r4, r4, #1
 800acb0:	3508      	adds	r5, #8
 800acb2:	e75a      	b.n	800ab6a <_dtoa_r+0x3d2>
 800acb4:	9e02      	ldr	r6, [sp, #8]
 800acb6:	9b07      	ldr	r3, [sp, #28]
 800acb8:	e780      	b.n	800abbc <_dtoa_r+0x424>
 800acba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800acbe:	1e5a      	subs	r2, r3, #1
 800acc0:	4b59      	ldr	r3, [pc, #356]	; (800ae28 <_dtoa_r+0x690>)
 800acc2:	00d2      	lsls	r2, r2, #3
 800acc4:	189b      	adds	r3, r3, r2
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	2900      	cmp	r1, #0
 800accc:	d051      	beq.n	800ad72 <_dtoa_r+0x5da>
 800acce:	2000      	movs	r0, #0
 800acd0:	495d      	ldr	r1, [pc, #372]	; (800ae48 <_dtoa_r+0x6b0>)
 800acd2:	f7f6 f851 	bl	8000d78 <__aeabi_ddiv>
 800acd6:	9a08      	ldr	r2, [sp, #32]
 800acd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acda:	f7f6 febb 	bl	8001a54 <__aeabi_dsub>
 800acde:	9a06      	ldr	r2, [sp, #24]
 800ace0:	9b06      	ldr	r3, [sp, #24]
 800ace2:	4694      	mov	ip, r2
 800ace4:	9317      	str	r3, [sp, #92]	; 0x5c
 800ace6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ace8:	9010      	str	r0, [sp, #64]	; 0x40
 800acea:	9111      	str	r1, [sp, #68]	; 0x44
 800acec:	4463      	add	r3, ip
 800acee:	9319      	str	r3, [sp, #100]	; 0x64
 800acf0:	0029      	movs	r1, r5
 800acf2:	0020      	movs	r0, r4
 800acf4:	f7f7 fa40 	bl	8002178 <__aeabi_d2iz>
 800acf8:	9014      	str	r0, [sp, #80]	; 0x50
 800acfa:	f7f7 fa73 	bl	80021e4 <__aeabi_i2d>
 800acfe:	0002      	movs	r2, r0
 800ad00:	000b      	movs	r3, r1
 800ad02:	0020      	movs	r0, r4
 800ad04:	0029      	movs	r1, r5
 800ad06:	f7f6 fea5 	bl	8001a54 <__aeabi_dsub>
 800ad0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad0e:	3301      	adds	r3, #1
 800ad10:	9308      	str	r3, [sp, #32]
 800ad12:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad14:	0004      	movs	r4, r0
 800ad16:	3330      	adds	r3, #48	; 0x30
 800ad18:	7013      	strb	r3, [r2, #0]
 800ad1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad1e:	000d      	movs	r5, r1
 800ad20:	f7f5 fb9a 	bl	8000458 <__aeabi_dcmplt>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d175      	bne.n	800ae14 <_dtoa_r+0x67c>
 800ad28:	0022      	movs	r2, r4
 800ad2a:	002b      	movs	r3, r5
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	4940      	ldr	r1, [pc, #256]	; (800ae30 <_dtoa_r+0x698>)
 800ad30:	f7f6 fe90 	bl	8001a54 <__aeabi_dsub>
 800ad34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad38:	f7f5 fb8e 	bl	8000458 <__aeabi_dcmplt>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d000      	beq.n	800ad42 <_dtoa_r+0x5aa>
 800ad40:	e0d2      	b.n	800aee8 <_dtoa_r+0x750>
 800ad42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad44:	9a08      	ldr	r2, [sp, #32]
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d100      	bne.n	800ad4c <_dtoa_r+0x5b4>
 800ad4a:	e770      	b.n	800ac2e <_dtoa_r+0x496>
 800ad4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ad4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ad50:	2200      	movs	r2, #0
 800ad52:	4b38      	ldr	r3, [pc, #224]	; (800ae34 <_dtoa_r+0x69c>)
 800ad54:	f7f6 fc12 	bl	800157c <__aeabi_dmul>
 800ad58:	4b36      	ldr	r3, [pc, #216]	; (800ae34 <_dtoa_r+0x69c>)
 800ad5a:	9010      	str	r0, [sp, #64]	; 0x40
 800ad5c:	9111      	str	r1, [sp, #68]	; 0x44
 800ad5e:	2200      	movs	r2, #0
 800ad60:	0020      	movs	r0, r4
 800ad62:	0029      	movs	r1, r5
 800ad64:	f7f6 fc0a 	bl	800157c <__aeabi_dmul>
 800ad68:	9b08      	ldr	r3, [sp, #32]
 800ad6a:	0004      	movs	r4, r0
 800ad6c:	000d      	movs	r5, r1
 800ad6e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad70:	e7be      	b.n	800acf0 <_dtoa_r+0x558>
 800ad72:	9808      	ldr	r0, [sp, #32]
 800ad74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad76:	f7f6 fc01 	bl	800157c <__aeabi_dmul>
 800ad7a:	9a06      	ldr	r2, [sp, #24]
 800ad7c:	9b06      	ldr	r3, [sp, #24]
 800ad7e:	4694      	mov	ip, r2
 800ad80:	9308      	str	r3, [sp, #32]
 800ad82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad84:	9010      	str	r0, [sp, #64]	; 0x40
 800ad86:	9111      	str	r1, [sp, #68]	; 0x44
 800ad88:	4463      	add	r3, ip
 800ad8a:	9319      	str	r3, [sp, #100]	; 0x64
 800ad8c:	0029      	movs	r1, r5
 800ad8e:	0020      	movs	r0, r4
 800ad90:	f7f7 f9f2 	bl	8002178 <__aeabi_d2iz>
 800ad94:	9017      	str	r0, [sp, #92]	; 0x5c
 800ad96:	f7f7 fa25 	bl	80021e4 <__aeabi_i2d>
 800ad9a:	0002      	movs	r2, r0
 800ad9c:	000b      	movs	r3, r1
 800ad9e:	0020      	movs	r0, r4
 800ada0:	0029      	movs	r1, r5
 800ada2:	f7f6 fe57 	bl	8001a54 <__aeabi_dsub>
 800ada6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ada8:	9a08      	ldr	r2, [sp, #32]
 800adaa:	3330      	adds	r3, #48	; 0x30
 800adac:	7013      	strb	r3, [r2, #0]
 800adae:	0013      	movs	r3, r2
 800adb0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adb2:	3301      	adds	r3, #1
 800adb4:	0004      	movs	r4, r0
 800adb6:	000d      	movs	r5, r1
 800adb8:	9308      	str	r3, [sp, #32]
 800adba:	4293      	cmp	r3, r2
 800adbc:	d12c      	bne.n	800ae18 <_dtoa_r+0x680>
 800adbe:	9810      	ldr	r0, [sp, #64]	; 0x40
 800adc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800adc2:	9a06      	ldr	r2, [sp, #24]
 800adc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800adc6:	4694      	mov	ip, r2
 800adc8:	4463      	add	r3, ip
 800adca:	2200      	movs	r2, #0
 800adcc:	9308      	str	r3, [sp, #32]
 800adce:	4b1e      	ldr	r3, [pc, #120]	; (800ae48 <_dtoa_r+0x6b0>)
 800add0:	f7f5 fc96 	bl	8000700 <__aeabi_dadd>
 800add4:	0002      	movs	r2, r0
 800add6:	000b      	movs	r3, r1
 800add8:	0020      	movs	r0, r4
 800adda:	0029      	movs	r1, r5
 800addc:	f7f5 fb50 	bl	8000480 <__aeabi_dcmpgt>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d000      	beq.n	800ade6 <_dtoa_r+0x64e>
 800ade4:	e080      	b.n	800aee8 <_dtoa_r+0x750>
 800ade6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ade8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adea:	2000      	movs	r0, #0
 800adec:	4916      	ldr	r1, [pc, #88]	; (800ae48 <_dtoa_r+0x6b0>)
 800adee:	f7f6 fe31 	bl	8001a54 <__aeabi_dsub>
 800adf2:	0002      	movs	r2, r0
 800adf4:	000b      	movs	r3, r1
 800adf6:	0020      	movs	r0, r4
 800adf8:	0029      	movs	r1, r5
 800adfa:	f7f5 fb2d 	bl	8000458 <__aeabi_dcmplt>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d100      	bne.n	800ae04 <_dtoa_r+0x66c>
 800ae02:	e714      	b.n	800ac2e <_dtoa_r+0x496>
 800ae04:	9b08      	ldr	r3, [sp, #32]
 800ae06:	001a      	movs	r2, r3
 800ae08:	3a01      	subs	r2, #1
 800ae0a:	9208      	str	r2, [sp, #32]
 800ae0c:	7812      	ldrb	r2, [r2, #0]
 800ae0e:	2a30      	cmp	r2, #48	; 0x30
 800ae10:	d0f8      	beq.n	800ae04 <_dtoa_r+0x66c>
 800ae12:	9308      	str	r3, [sp, #32]
 800ae14:	9602      	str	r6, [sp, #8]
 800ae16:	e055      	b.n	800aec4 <_dtoa_r+0x72c>
 800ae18:	2200      	movs	r2, #0
 800ae1a:	4b06      	ldr	r3, [pc, #24]	; (800ae34 <_dtoa_r+0x69c>)
 800ae1c:	f7f6 fbae 	bl	800157c <__aeabi_dmul>
 800ae20:	0004      	movs	r4, r0
 800ae22:	000d      	movs	r5, r1
 800ae24:	e7b2      	b.n	800ad8c <_dtoa_r+0x5f4>
 800ae26:	46c0      	nop			; (mov r8, r8)
 800ae28:	0800c410 	.word	0x0800c410
 800ae2c:	0800c3e8 	.word	0x0800c3e8
 800ae30:	3ff00000 	.word	0x3ff00000
 800ae34:	40240000 	.word	0x40240000
 800ae38:	401c0000 	.word	0x401c0000
 800ae3c:	fcc00000 	.word	0xfcc00000
 800ae40:	40140000 	.word	0x40140000
 800ae44:	7cc00000 	.word	0x7cc00000
 800ae48:	3fe00000 	.word	0x3fe00000
 800ae4c:	9b07      	ldr	r3, [sp, #28]
 800ae4e:	9e06      	ldr	r6, [sp, #24]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	199b      	adds	r3, r3, r6
 800ae54:	930c      	str	r3, [sp, #48]	; 0x30
 800ae56:	9c08      	ldr	r4, [sp, #32]
 800ae58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ae5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae5e:	0020      	movs	r0, r4
 800ae60:	0029      	movs	r1, r5
 800ae62:	f7f5 ff89 	bl	8000d78 <__aeabi_ddiv>
 800ae66:	f7f7 f987 	bl	8002178 <__aeabi_d2iz>
 800ae6a:	9007      	str	r0, [sp, #28]
 800ae6c:	f7f7 f9ba 	bl	80021e4 <__aeabi_i2d>
 800ae70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae74:	f7f6 fb82 	bl	800157c <__aeabi_dmul>
 800ae78:	0002      	movs	r2, r0
 800ae7a:	000b      	movs	r3, r1
 800ae7c:	0020      	movs	r0, r4
 800ae7e:	0029      	movs	r1, r5
 800ae80:	f7f6 fde8 	bl	8001a54 <__aeabi_dsub>
 800ae84:	0033      	movs	r3, r6
 800ae86:	9a07      	ldr	r2, [sp, #28]
 800ae88:	3601      	adds	r6, #1
 800ae8a:	3230      	adds	r2, #48	; 0x30
 800ae8c:	701a      	strb	r2, [r3, #0]
 800ae8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ae90:	9608      	str	r6, [sp, #32]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d139      	bne.n	800af0a <_dtoa_r+0x772>
 800ae96:	0002      	movs	r2, r0
 800ae98:	000b      	movs	r3, r1
 800ae9a:	f7f5 fc31 	bl	8000700 <__aeabi_dadd>
 800ae9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea2:	0004      	movs	r4, r0
 800aea4:	000d      	movs	r5, r1
 800aea6:	f7f5 faeb 	bl	8000480 <__aeabi_dcmpgt>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d11b      	bne.n	800aee6 <_dtoa_r+0x74e>
 800aeae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb2:	0020      	movs	r0, r4
 800aeb4:	0029      	movs	r1, r5
 800aeb6:	f7f5 fac9 	bl	800044c <__aeabi_dcmpeq>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	d002      	beq.n	800aec4 <_dtoa_r+0x72c>
 800aebe:	9b07      	ldr	r3, [sp, #28]
 800aec0:	07db      	lsls	r3, r3, #31
 800aec2:	d410      	bmi.n	800aee6 <_dtoa_r+0x74e>
 800aec4:	0038      	movs	r0, r7
 800aec6:	9905      	ldr	r1, [sp, #20]
 800aec8:	f7fe fc58 	bl	800977c <_Bfree>
 800aecc:	2300      	movs	r3, #0
 800aece:	9a08      	ldr	r2, [sp, #32]
 800aed0:	9802      	ldr	r0, [sp, #8]
 800aed2:	7013      	strb	r3, [r2, #0]
 800aed4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aed6:	3001      	adds	r0, #1
 800aed8:	6018      	str	r0, [r3, #0]
 800aeda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d100      	bne.n	800aee2 <_dtoa_r+0x74a>
 800aee0:	e4a6      	b.n	800a830 <_dtoa_r+0x98>
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	e4a4      	b.n	800a830 <_dtoa_r+0x98>
 800aee6:	9e02      	ldr	r6, [sp, #8]
 800aee8:	9b08      	ldr	r3, [sp, #32]
 800aeea:	9308      	str	r3, [sp, #32]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	781a      	ldrb	r2, [r3, #0]
 800aef0:	2a39      	cmp	r2, #57	; 0x39
 800aef2:	d106      	bne.n	800af02 <_dtoa_r+0x76a>
 800aef4:	9a06      	ldr	r2, [sp, #24]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d1f7      	bne.n	800aeea <_dtoa_r+0x752>
 800aefa:	2230      	movs	r2, #48	; 0x30
 800aefc:	9906      	ldr	r1, [sp, #24]
 800aefe:	3601      	adds	r6, #1
 800af00:	700a      	strb	r2, [r1, #0]
 800af02:	781a      	ldrb	r2, [r3, #0]
 800af04:	3201      	adds	r2, #1
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	e784      	b.n	800ae14 <_dtoa_r+0x67c>
 800af0a:	2200      	movs	r2, #0
 800af0c:	4baa      	ldr	r3, [pc, #680]	; (800b1b8 <_dtoa_r+0xa20>)
 800af0e:	f7f6 fb35 	bl	800157c <__aeabi_dmul>
 800af12:	2200      	movs	r2, #0
 800af14:	2300      	movs	r3, #0
 800af16:	0004      	movs	r4, r0
 800af18:	000d      	movs	r5, r1
 800af1a:	f7f5 fa97 	bl	800044c <__aeabi_dcmpeq>
 800af1e:	2800      	cmp	r0, #0
 800af20:	d09b      	beq.n	800ae5a <_dtoa_r+0x6c2>
 800af22:	e7cf      	b.n	800aec4 <_dtoa_r+0x72c>
 800af24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af26:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800af28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800af2a:	2d00      	cmp	r5, #0
 800af2c:	d012      	beq.n	800af54 <_dtoa_r+0x7bc>
 800af2e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af30:	2a01      	cmp	r2, #1
 800af32:	dc66      	bgt.n	800b002 <_dtoa_r+0x86a>
 800af34:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800af36:	2a00      	cmp	r2, #0
 800af38:	d05d      	beq.n	800aff6 <_dtoa_r+0x85e>
 800af3a:	4aa0      	ldr	r2, [pc, #640]	; (800b1bc <_dtoa_r+0xa24>)
 800af3c:	189b      	adds	r3, r3, r2
 800af3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af40:	2101      	movs	r1, #1
 800af42:	18d2      	adds	r2, r2, r3
 800af44:	920a      	str	r2, [sp, #40]	; 0x28
 800af46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af48:	0038      	movs	r0, r7
 800af4a:	18d3      	adds	r3, r2, r3
 800af4c:	930d      	str	r3, [sp, #52]	; 0x34
 800af4e:	f7fe fcc5 	bl	80098dc <__i2b>
 800af52:	0005      	movs	r5, r0
 800af54:	2c00      	cmp	r4, #0
 800af56:	dd0e      	ble.n	800af76 <_dtoa_r+0x7de>
 800af58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	dd0b      	ble.n	800af76 <_dtoa_r+0x7de>
 800af5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af60:	0023      	movs	r3, r4
 800af62:	4294      	cmp	r4, r2
 800af64:	dd00      	ble.n	800af68 <_dtoa_r+0x7d0>
 800af66:	0013      	movs	r3, r2
 800af68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af6a:	1ae4      	subs	r4, r4, r3
 800af6c:	1ad2      	subs	r2, r2, r3
 800af6e:	920a      	str	r2, [sp, #40]	; 0x28
 800af70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	930d      	str	r3, [sp, #52]	; 0x34
 800af76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01f      	beq.n	800afbc <_dtoa_r+0x824>
 800af7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d054      	beq.n	800b02c <_dtoa_r+0x894>
 800af82:	2e00      	cmp	r6, #0
 800af84:	dd11      	ble.n	800afaa <_dtoa_r+0x812>
 800af86:	0029      	movs	r1, r5
 800af88:	0032      	movs	r2, r6
 800af8a:	0038      	movs	r0, r7
 800af8c:	f7fe fd6c 	bl	8009a68 <__pow5mult>
 800af90:	9a05      	ldr	r2, [sp, #20]
 800af92:	0001      	movs	r1, r0
 800af94:	0005      	movs	r5, r0
 800af96:	0038      	movs	r0, r7
 800af98:	f7fe fcb6 	bl	8009908 <__multiply>
 800af9c:	9905      	ldr	r1, [sp, #20]
 800af9e:	9014      	str	r0, [sp, #80]	; 0x50
 800afa0:	0038      	movs	r0, r7
 800afa2:	f7fe fbeb 	bl	800977c <_Bfree>
 800afa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afa8:	9305      	str	r3, [sp, #20]
 800afaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afac:	1b9a      	subs	r2, r3, r6
 800afae:	42b3      	cmp	r3, r6
 800afb0:	d004      	beq.n	800afbc <_dtoa_r+0x824>
 800afb2:	0038      	movs	r0, r7
 800afb4:	9905      	ldr	r1, [sp, #20]
 800afb6:	f7fe fd57 	bl	8009a68 <__pow5mult>
 800afba:	9005      	str	r0, [sp, #20]
 800afbc:	2101      	movs	r1, #1
 800afbe:	0038      	movs	r0, r7
 800afc0:	f7fe fc8c 	bl	80098dc <__i2b>
 800afc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afc6:	0006      	movs	r6, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dd31      	ble.n	800b030 <_dtoa_r+0x898>
 800afcc:	001a      	movs	r2, r3
 800afce:	0001      	movs	r1, r0
 800afd0:	0038      	movs	r0, r7
 800afd2:	f7fe fd49 	bl	8009a68 <__pow5mult>
 800afd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afd8:	0006      	movs	r6, r0
 800afda:	2b01      	cmp	r3, #1
 800afdc:	dd2d      	ble.n	800b03a <_dtoa_r+0x8a2>
 800afde:	2300      	movs	r3, #0
 800afe0:	930e      	str	r3, [sp, #56]	; 0x38
 800afe2:	6933      	ldr	r3, [r6, #16]
 800afe4:	3303      	adds	r3, #3
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	18f3      	adds	r3, r6, r3
 800afea:	6858      	ldr	r0, [r3, #4]
 800afec:	f7fe fc2e 	bl	800984c <__hi0bits>
 800aff0:	2320      	movs	r3, #32
 800aff2:	1a18      	subs	r0, r3, r0
 800aff4:	e039      	b.n	800b06a <_dtoa_r+0x8d2>
 800aff6:	2336      	movs	r3, #54	; 0x36
 800aff8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800affa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800affc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800affe:	1a9b      	subs	r3, r3, r2
 800b000:	e79d      	b.n	800af3e <_dtoa_r+0x7a6>
 800b002:	9b07      	ldr	r3, [sp, #28]
 800b004:	1e5e      	subs	r6, r3, #1
 800b006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b008:	42b3      	cmp	r3, r6
 800b00a:	db07      	blt.n	800b01c <_dtoa_r+0x884>
 800b00c:	1b9e      	subs	r6, r3, r6
 800b00e:	9b07      	ldr	r3, [sp, #28]
 800b010:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b012:	2b00      	cmp	r3, #0
 800b014:	da93      	bge.n	800af3e <_dtoa_r+0x7a6>
 800b016:	1ae4      	subs	r4, r4, r3
 800b018:	2300      	movs	r3, #0
 800b01a:	e790      	b.n	800af3e <_dtoa_r+0x7a6>
 800b01c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b01e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b020:	1af3      	subs	r3, r6, r3
 800b022:	18d3      	adds	r3, r2, r3
 800b024:	960e      	str	r6, [sp, #56]	; 0x38
 800b026:	9315      	str	r3, [sp, #84]	; 0x54
 800b028:	2600      	movs	r6, #0
 800b02a:	e7f0      	b.n	800b00e <_dtoa_r+0x876>
 800b02c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b02e:	e7c0      	b.n	800afb2 <_dtoa_r+0x81a>
 800b030:	2300      	movs	r3, #0
 800b032:	930e      	str	r3, [sp, #56]	; 0x38
 800b034:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b036:	2b01      	cmp	r3, #1
 800b038:	dc13      	bgt.n	800b062 <_dtoa_r+0x8ca>
 800b03a:	2300      	movs	r3, #0
 800b03c:	930e      	str	r3, [sp, #56]	; 0x38
 800b03e:	9b08      	ldr	r3, [sp, #32]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10e      	bne.n	800b062 <_dtoa_r+0x8ca>
 800b044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b046:	031b      	lsls	r3, r3, #12
 800b048:	d10b      	bne.n	800b062 <_dtoa_r+0x8ca>
 800b04a:	4b5d      	ldr	r3, [pc, #372]	; (800b1c0 <_dtoa_r+0xa28>)
 800b04c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b04e:	4213      	tst	r3, r2
 800b050:	d007      	beq.n	800b062 <_dtoa_r+0x8ca>
 800b052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b054:	3301      	adds	r3, #1
 800b056:	930a      	str	r3, [sp, #40]	; 0x28
 800b058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b05a:	3301      	adds	r3, #1
 800b05c:	930d      	str	r3, [sp, #52]	; 0x34
 800b05e:	2301      	movs	r3, #1
 800b060:	930e      	str	r3, [sp, #56]	; 0x38
 800b062:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b064:	2001      	movs	r0, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1bb      	bne.n	800afe2 <_dtoa_r+0x84a>
 800b06a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b06c:	221f      	movs	r2, #31
 800b06e:	1818      	adds	r0, r3, r0
 800b070:	0003      	movs	r3, r0
 800b072:	4013      	ands	r3, r2
 800b074:	4210      	tst	r0, r2
 800b076:	d046      	beq.n	800b106 <_dtoa_r+0x96e>
 800b078:	3201      	adds	r2, #1
 800b07a:	1ad2      	subs	r2, r2, r3
 800b07c:	2a04      	cmp	r2, #4
 800b07e:	dd3f      	ble.n	800b100 <_dtoa_r+0x968>
 800b080:	221c      	movs	r2, #28
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b086:	18e4      	adds	r4, r4, r3
 800b088:	18d2      	adds	r2, r2, r3
 800b08a:	920a      	str	r2, [sp, #40]	; 0x28
 800b08c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b08e:	18d3      	adds	r3, r2, r3
 800b090:	930d      	str	r3, [sp, #52]	; 0x34
 800b092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b094:	2b00      	cmp	r3, #0
 800b096:	dd05      	ble.n	800b0a4 <_dtoa_r+0x90c>
 800b098:	001a      	movs	r2, r3
 800b09a:	0038      	movs	r0, r7
 800b09c:	9905      	ldr	r1, [sp, #20]
 800b09e:	f7fe fd3f 	bl	8009b20 <__lshift>
 800b0a2:	9005      	str	r0, [sp, #20]
 800b0a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dd05      	ble.n	800b0b6 <_dtoa_r+0x91e>
 800b0aa:	0031      	movs	r1, r6
 800b0ac:	001a      	movs	r2, r3
 800b0ae:	0038      	movs	r0, r7
 800b0b0:	f7fe fd36 	bl	8009b20 <__lshift>
 800b0b4:	0006      	movs	r6, r0
 800b0b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d026      	beq.n	800b10a <_dtoa_r+0x972>
 800b0bc:	0031      	movs	r1, r6
 800b0be:	9805      	ldr	r0, [sp, #20]
 800b0c0:	f7fe fd9c 	bl	8009bfc <__mcmp>
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	da20      	bge.n	800b10a <_dtoa_r+0x972>
 800b0c8:	9b02      	ldr	r3, [sp, #8]
 800b0ca:	220a      	movs	r2, #10
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	9302      	str	r3, [sp, #8]
 800b0d0:	0038      	movs	r0, r7
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	9905      	ldr	r1, [sp, #20]
 800b0d6:	f7fe fb75 	bl	80097c4 <__multadd>
 800b0da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b0dc:	9005      	str	r0, [sp, #20]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d100      	bne.n	800b0e4 <_dtoa_r+0x94c>
 800b0e2:	e166      	b.n	800b3b2 <_dtoa_r+0xc1a>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	0029      	movs	r1, r5
 800b0e8:	220a      	movs	r2, #10
 800b0ea:	0038      	movs	r0, r7
 800b0ec:	f7fe fb6a 	bl	80097c4 <__multadd>
 800b0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0f2:	0005      	movs	r5, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	dc47      	bgt.n	800b188 <_dtoa_r+0x9f0>
 800b0f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	dc0d      	bgt.n	800b11a <_dtoa_r+0x982>
 800b0fe:	e043      	b.n	800b188 <_dtoa_r+0x9f0>
 800b100:	2a04      	cmp	r2, #4
 800b102:	d0c6      	beq.n	800b092 <_dtoa_r+0x8fa>
 800b104:	0013      	movs	r3, r2
 800b106:	331c      	adds	r3, #28
 800b108:	e7bc      	b.n	800b084 <_dtoa_r+0x8ec>
 800b10a:	9b07      	ldr	r3, [sp, #28]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	dc35      	bgt.n	800b17c <_dtoa_r+0x9e4>
 800b110:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b112:	2b02      	cmp	r3, #2
 800b114:	dd32      	ble.n	800b17c <_dtoa_r+0x9e4>
 800b116:	9b07      	ldr	r3, [sp, #28]
 800b118:	930c      	str	r3, [sp, #48]	; 0x30
 800b11a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10c      	bne.n	800b13a <_dtoa_r+0x9a2>
 800b120:	0031      	movs	r1, r6
 800b122:	2205      	movs	r2, #5
 800b124:	0038      	movs	r0, r7
 800b126:	f7fe fb4d 	bl	80097c4 <__multadd>
 800b12a:	0006      	movs	r6, r0
 800b12c:	0001      	movs	r1, r0
 800b12e:	9805      	ldr	r0, [sp, #20]
 800b130:	f7fe fd64 	bl	8009bfc <__mcmp>
 800b134:	2800      	cmp	r0, #0
 800b136:	dd00      	ble.n	800b13a <_dtoa_r+0x9a2>
 800b138:	e5a5      	b.n	800ac86 <_dtoa_r+0x4ee>
 800b13a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b13c:	43db      	mvns	r3, r3
 800b13e:	9302      	str	r3, [sp, #8]
 800b140:	9b06      	ldr	r3, [sp, #24]
 800b142:	9308      	str	r3, [sp, #32]
 800b144:	2400      	movs	r4, #0
 800b146:	0031      	movs	r1, r6
 800b148:	0038      	movs	r0, r7
 800b14a:	f7fe fb17 	bl	800977c <_Bfree>
 800b14e:	2d00      	cmp	r5, #0
 800b150:	d100      	bne.n	800b154 <_dtoa_r+0x9bc>
 800b152:	e6b7      	b.n	800aec4 <_dtoa_r+0x72c>
 800b154:	2c00      	cmp	r4, #0
 800b156:	d005      	beq.n	800b164 <_dtoa_r+0x9cc>
 800b158:	42ac      	cmp	r4, r5
 800b15a:	d003      	beq.n	800b164 <_dtoa_r+0x9cc>
 800b15c:	0021      	movs	r1, r4
 800b15e:	0038      	movs	r0, r7
 800b160:	f7fe fb0c 	bl	800977c <_Bfree>
 800b164:	0029      	movs	r1, r5
 800b166:	0038      	movs	r0, r7
 800b168:	f7fe fb08 	bl	800977c <_Bfree>
 800b16c:	e6aa      	b.n	800aec4 <_dtoa_r+0x72c>
 800b16e:	2600      	movs	r6, #0
 800b170:	0035      	movs	r5, r6
 800b172:	e7e2      	b.n	800b13a <_dtoa_r+0x9a2>
 800b174:	9602      	str	r6, [sp, #8]
 800b176:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800b178:	0035      	movs	r5, r6
 800b17a:	e584      	b.n	800ac86 <_dtoa_r+0x4ee>
 800b17c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d100      	bne.n	800b184 <_dtoa_r+0x9ec>
 800b182:	e0ce      	b.n	800b322 <_dtoa_r+0xb8a>
 800b184:	9b07      	ldr	r3, [sp, #28]
 800b186:	930c      	str	r3, [sp, #48]	; 0x30
 800b188:	2c00      	cmp	r4, #0
 800b18a:	dd05      	ble.n	800b198 <_dtoa_r+0xa00>
 800b18c:	0029      	movs	r1, r5
 800b18e:	0022      	movs	r2, r4
 800b190:	0038      	movs	r0, r7
 800b192:	f7fe fcc5 	bl	8009b20 <__lshift>
 800b196:	0005      	movs	r5, r0
 800b198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b19a:	0028      	movs	r0, r5
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d022      	beq.n	800b1e6 <_dtoa_r+0xa4e>
 800b1a0:	0038      	movs	r0, r7
 800b1a2:	6869      	ldr	r1, [r5, #4]
 800b1a4:	f7fe faa6 	bl	80096f4 <_Balloc>
 800b1a8:	1e04      	subs	r4, r0, #0
 800b1aa:	d10f      	bne.n	800b1cc <_dtoa_r+0xa34>
 800b1ac:	0002      	movs	r2, r0
 800b1ae:	4b05      	ldr	r3, [pc, #20]	; (800b1c4 <_dtoa_r+0xa2c>)
 800b1b0:	4905      	ldr	r1, [pc, #20]	; (800b1c8 <_dtoa_r+0xa30>)
 800b1b2:	f7ff fb06 	bl	800a7c2 <_dtoa_r+0x2a>
 800b1b6:	46c0      	nop			; (mov r8, r8)
 800b1b8:	40240000 	.word	0x40240000
 800b1bc:	00000433 	.word	0x00000433
 800b1c0:	7ff00000 	.word	0x7ff00000
 800b1c4:	0800c3d4 	.word	0x0800c3d4
 800b1c8:	000002ea 	.word	0x000002ea
 800b1cc:	0029      	movs	r1, r5
 800b1ce:	692b      	ldr	r3, [r5, #16]
 800b1d0:	310c      	adds	r1, #12
 800b1d2:	1c9a      	adds	r2, r3, #2
 800b1d4:	0092      	lsls	r2, r2, #2
 800b1d6:	300c      	adds	r0, #12
 800b1d8:	f7fe f82c 	bl	8009234 <memcpy>
 800b1dc:	2201      	movs	r2, #1
 800b1de:	0021      	movs	r1, r4
 800b1e0:	0038      	movs	r0, r7
 800b1e2:	f7fe fc9d 	bl	8009b20 <__lshift>
 800b1e6:	9b06      	ldr	r3, [sp, #24]
 800b1e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1ea:	930a      	str	r3, [sp, #40]	; 0x28
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	189b      	adds	r3, r3, r2
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	002c      	movs	r4, r5
 800b1f4:	0005      	movs	r5, r0
 800b1f6:	9314      	str	r3, [sp, #80]	; 0x50
 800b1f8:	9b08      	ldr	r3, [sp, #32]
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1fe:	0031      	movs	r1, r6
 800b200:	9805      	ldr	r0, [sp, #20]
 800b202:	f7ff fa3d 	bl	800a680 <quorem>
 800b206:	0003      	movs	r3, r0
 800b208:	0021      	movs	r1, r4
 800b20a:	3330      	adds	r3, #48	; 0x30
 800b20c:	900d      	str	r0, [sp, #52]	; 0x34
 800b20e:	9805      	ldr	r0, [sp, #20]
 800b210:	9307      	str	r3, [sp, #28]
 800b212:	f7fe fcf3 	bl	8009bfc <__mcmp>
 800b216:	002a      	movs	r2, r5
 800b218:	900e      	str	r0, [sp, #56]	; 0x38
 800b21a:	0031      	movs	r1, r6
 800b21c:	0038      	movs	r0, r7
 800b21e:	f7fe fd09 	bl	8009c34 <__mdiff>
 800b222:	68c3      	ldr	r3, [r0, #12]
 800b224:	9008      	str	r0, [sp, #32]
 800b226:	9310      	str	r3, [sp, #64]	; 0x40
 800b228:	2301      	movs	r3, #1
 800b22a:	930c      	str	r3, [sp, #48]	; 0x30
 800b22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d104      	bne.n	800b23c <_dtoa_r+0xaa4>
 800b232:	0001      	movs	r1, r0
 800b234:	9805      	ldr	r0, [sp, #20]
 800b236:	f7fe fce1 	bl	8009bfc <__mcmp>
 800b23a:	900c      	str	r0, [sp, #48]	; 0x30
 800b23c:	0038      	movs	r0, r7
 800b23e:	9908      	ldr	r1, [sp, #32]
 800b240:	f7fe fa9c 	bl	800977c <_Bfree>
 800b244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b248:	3301      	adds	r3, #1
 800b24a:	9308      	str	r3, [sp, #32]
 800b24c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b24e:	4313      	orrs	r3, r2
 800b250:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b252:	4313      	orrs	r3, r2
 800b254:	d10c      	bne.n	800b270 <_dtoa_r+0xad8>
 800b256:	9b07      	ldr	r3, [sp, #28]
 800b258:	2b39      	cmp	r3, #57	; 0x39
 800b25a:	d026      	beq.n	800b2aa <_dtoa_r+0xb12>
 800b25c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b25e:	2b00      	cmp	r3, #0
 800b260:	dd02      	ble.n	800b268 <_dtoa_r+0xad0>
 800b262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b264:	3331      	adds	r3, #49	; 0x31
 800b266:	9307      	str	r3, [sp, #28]
 800b268:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b26a:	9a07      	ldr	r2, [sp, #28]
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	e76a      	b.n	800b146 <_dtoa_r+0x9ae>
 800b270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b272:	2b00      	cmp	r3, #0
 800b274:	db04      	blt.n	800b280 <_dtoa_r+0xae8>
 800b276:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b278:	4313      	orrs	r3, r2
 800b27a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b27c:	4313      	orrs	r3, r2
 800b27e:	d11f      	bne.n	800b2c0 <_dtoa_r+0xb28>
 800b280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b282:	2b00      	cmp	r3, #0
 800b284:	ddf0      	ble.n	800b268 <_dtoa_r+0xad0>
 800b286:	9905      	ldr	r1, [sp, #20]
 800b288:	2201      	movs	r2, #1
 800b28a:	0038      	movs	r0, r7
 800b28c:	f7fe fc48 	bl	8009b20 <__lshift>
 800b290:	0031      	movs	r1, r6
 800b292:	9005      	str	r0, [sp, #20]
 800b294:	f7fe fcb2 	bl	8009bfc <__mcmp>
 800b298:	2800      	cmp	r0, #0
 800b29a:	dc03      	bgt.n	800b2a4 <_dtoa_r+0xb0c>
 800b29c:	d1e4      	bne.n	800b268 <_dtoa_r+0xad0>
 800b29e:	9b07      	ldr	r3, [sp, #28]
 800b2a0:	07db      	lsls	r3, r3, #31
 800b2a2:	d5e1      	bpl.n	800b268 <_dtoa_r+0xad0>
 800b2a4:	9b07      	ldr	r3, [sp, #28]
 800b2a6:	2b39      	cmp	r3, #57	; 0x39
 800b2a8:	d1db      	bne.n	800b262 <_dtoa_r+0xaca>
 800b2aa:	2339      	movs	r3, #57	; 0x39
 800b2ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2ae:	7013      	strb	r3, [r2, #0]
 800b2b0:	9b08      	ldr	r3, [sp, #32]
 800b2b2:	9308      	str	r3, [sp, #32]
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	781a      	ldrb	r2, [r3, #0]
 800b2b8:	2a39      	cmp	r2, #57	; 0x39
 800b2ba:	d068      	beq.n	800b38e <_dtoa_r+0xbf6>
 800b2bc:	3201      	adds	r2, #1
 800b2be:	e7d5      	b.n	800b26c <_dtoa_r+0xad4>
 800b2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	dd07      	ble.n	800b2d6 <_dtoa_r+0xb3e>
 800b2c6:	9b07      	ldr	r3, [sp, #28]
 800b2c8:	2b39      	cmp	r3, #57	; 0x39
 800b2ca:	d0ee      	beq.n	800b2aa <_dtoa_r+0xb12>
 800b2cc:	9b07      	ldr	r3, [sp, #28]
 800b2ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	7013      	strb	r3, [r2, #0]
 800b2d4:	e737      	b.n	800b146 <_dtoa_r+0x9ae>
 800b2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d8:	9a07      	ldr	r2, [sp, #28]
 800b2da:	701a      	strb	r2, [r3, #0]
 800b2dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d03e      	beq.n	800b362 <_dtoa_r+0xbca>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	220a      	movs	r2, #10
 800b2e8:	9905      	ldr	r1, [sp, #20]
 800b2ea:	0038      	movs	r0, r7
 800b2ec:	f7fe fa6a 	bl	80097c4 <__multadd>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	9005      	str	r0, [sp, #20]
 800b2f4:	220a      	movs	r2, #10
 800b2f6:	0021      	movs	r1, r4
 800b2f8:	0038      	movs	r0, r7
 800b2fa:	42ac      	cmp	r4, r5
 800b2fc:	d106      	bne.n	800b30c <_dtoa_r+0xb74>
 800b2fe:	f7fe fa61 	bl	80097c4 <__multadd>
 800b302:	0004      	movs	r4, r0
 800b304:	0005      	movs	r5, r0
 800b306:	9b08      	ldr	r3, [sp, #32]
 800b308:	930a      	str	r3, [sp, #40]	; 0x28
 800b30a:	e778      	b.n	800b1fe <_dtoa_r+0xa66>
 800b30c:	f7fe fa5a 	bl	80097c4 <__multadd>
 800b310:	0029      	movs	r1, r5
 800b312:	0004      	movs	r4, r0
 800b314:	2300      	movs	r3, #0
 800b316:	220a      	movs	r2, #10
 800b318:	0038      	movs	r0, r7
 800b31a:	f7fe fa53 	bl	80097c4 <__multadd>
 800b31e:	0005      	movs	r5, r0
 800b320:	e7f1      	b.n	800b306 <_dtoa_r+0xb6e>
 800b322:	9b07      	ldr	r3, [sp, #28]
 800b324:	930c      	str	r3, [sp, #48]	; 0x30
 800b326:	2400      	movs	r4, #0
 800b328:	0031      	movs	r1, r6
 800b32a:	9805      	ldr	r0, [sp, #20]
 800b32c:	f7ff f9a8 	bl	800a680 <quorem>
 800b330:	9b06      	ldr	r3, [sp, #24]
 800b332:	3030      	adds	r0, #48	; 0x30
 800b334:	5518      	strb	r0, [r3, r4]
 800b336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b338:	3401      	adds	r4, #1
 800b33a:	9007      	str	r0, [sp, #28]
 800b33c:	42a3      	cmp	r3, r4
 800b33e:	dd07      	ble.n	800b350 <_dtoa_r+0xbb8>
 800b340:	2300      	movs	r3, #0
 800b342:	220a      	movs	r2, #10
 800b344:	0038      	movs	r0, r7
 800b346:	9905      	ldr	r1, [sp, #20]
 800b348:	f7fe fa3c 	bl	80097c4 <__multadd>
 800b34c:	9005      	str	r0, [sp, #20]
 800b34e:	e7eb      	b.n	800b328 <_dtoa_r+0xb90>
 800b350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b352:	2001      	movs	r0, #1
 800b354:	2b00      	cmp	r3, #0
 800b356:	dd00      	ble.n	800b35a <_dtoa_r+0xbc2>
 800b358:	0018      	movs	r0, r3
 800b35a:	2400      	movs	r4, #0
 800b35c:	9b06      	ldr	r3, [sp, #24]
 800b35e:	181b      	adds	r3, r3, r0
 800b360:	9308      	str	r3, [sp, #32]
 800b362:	9905      	ldr	r1, [sp, #20]
 800b364:	2201      	movs	r2, #1
 800b366:	0038      	movs	r0, r7
 800b368:	f7fe fbda 	bl	8009b20 <__lshift>
 800b36c:	0031      	movs	r1, r6
 800b36e:	9005      	str	r0, [sp, #20]
 800b370:	f7fe fc44 	bl	8009bfc <__mcmp>
 800b374:	2800      	cmp	r0, #0
 800b376:	dc9b      	bgt.n	800b2b0 <_dtoa_r+0xb18>
 800b378:	d102      	bne.n	800b380 <_dtoa_r+0xbe8>
 800b37a:	9b07      	ldr	r3, [sp, #28]
 800b37c:	07db      	lsls	r3, r3, #31
 800b37e:	d497      	bmi.n	800b2b0 <_dtoa_r+0xb18>
 800b380:	9b08      	ldr	r3, [sp, #32]
 800b382:	9308      	str	r3, [sp, #32]
 800b384:	3b01      	subs	r3, #1
 800b386:	781a      	ldrb	r2, [r3, #0]
 800b388:	2a30      	cmp	r2, #48	; 0x30
 800b38a:	d0fa      	beq.n	800b382 <_dtoa_r+0xbea>
 800b38c:	e6db      	b.n	800b146 <_dtoa_r+0x9ae>
 800b38e:	9a06      	ldr	r2, [sp, #24]
 800b390:	429a      	cmp	r2, r3
 800b392:	d18e      	bne.n	800b2b2 <_dtoa_r+0xb1a>
 800b394:	9b02      	ldr	r3, [sp, #8]
 800b396:	3301      	adds	r3, #1
 800b398:	9302      	str	r3, [sp, #8]
 800b39a:	2331      	movs	r3, #49	; 0x31
 800b39c:	e799      	b.n	800b2d2 <_dtoa_r+0xb3a>
 800b39e:	4b09      	ldr	r3, [pc, #36]	; (800b3c4 <_dtoa_r+0xc2c>)
 800b3a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b3a2:	9306      	str	r3, [sp, #24]
 800b3a4:	4b08      	ldr	r3, [pc, #32]	; (800b3c8 <_dtoa_r+0xc30>)
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	d001      	beq.n	800b3ae <_dtoa_r+0xc16>
 800b3aa:	f7ff fa3f 	bl	800a82c <_dtoa_r+0x94>
 800b3ae:	f7ff fa3f 	bl	800a830 <_dtoa_r+0x98>
 800b3b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dcb6      	bgt.n	800b326 <_dtoa_r+0xb8e>
 800b3b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	dd00      	ble.n	800b3c0 <_dtoa_r+0xc28>
 800b3be:	e6ac      	b.n	800b11a <_dtoa_r+0x982>
 800b3c0:	e7b1      	b.n	800b326 <_dtoa_r+0xb8e>
 800b3c2:	46c0      	nop			; (mov r8, r8)
 800b3c4:	0800c553 	.word	0x0800c553
 800b3c8:	0800c55b 	.word	0x0800c55b

0800b3cc <fiprintf>:
 800b3cc:	b40e      	push	{r1, r2, r3}
 800b3ce:	b503      	push	{r0, r1, lr}
 800b3d0:	0001      	movs	r1, r0
 800b3d2:	ab03      	add	r3, sp, #12
 800b3d4:	4804      	ldr	r0, [pc, #16]	; (800b3e8 <fiprintf+0x1c>)
 800b3d6:	cb04      	ldmia	r3!, {r2}
 800b3d8:	6800      	ldr	r0, [r0, #0]
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	f000 f8b8 	bl	800b550 <_vfiprintf_r>
 800b3e0:	b002      	add	sp, #8
 800b3e2:	bc08      	pop	{r3}
 800b3e4:	b003      	add	sp, #12
 800b3e6:	4718      	bx	r3
 800b3e8:	20000014 	.word	0x20000014

0800b3ec <malloc>:
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	4b03      	ldr	r3, [pc, #12]	; (800b3fc <malloc+0x10>)
 800b3f0:	0001      	movs	r1, r0
 800b3f2:	6818      	ldr	r0, [r3, #0]
 800b3f4:	f7fe fd82 	bl	8009efc <_malloc_r>
 800b3f8:	bd10      	pop	{r4, pc}
 800b3fa:	46c0      	nop			; (mov r8, r8)
 800b3fc:	20000014 	.word	0x20000014

0800b400 <memchr>:
 800b400:	b2c9      	uxtb	r1, r1
 800b402:	1882      	adds	r2, r0, r2
 800b404:	4290      	cmp	r0, r2
 800b406:	d101      	bne.n	800b40c <memchr+0xc>
 800b408:	2000      	movs	r0, #0
 800b40a:	4770      	bx	lr
 800b40c:	7803      	ldrb	r3, [r0, #0]
 800b40e:	428b      	cmp	r3, r1
 800b410:	d0fb      	beq.n	800b40a <memchr+0xa>
 800b412:	3001      	adds	r0, #1
 800b414:	e7f6      	b.n	800b404 <memchr+0x4>

0800b416 <memmove>:
 800b416:	b510      	push	{r4, lr}
 800b418:	4288      	cmp	r0, r1
 800b41a:	d902      	bls.n	800b422 <memmove+0xc>
 800b41c:	188b      	adds	r3, r1, r2
 800b41e:	4298      	cmp	r0, r3
 800b420:	d303      	bcc.n	800b42a <memmove+0x14>
 800b422:	2300      	movs	r3, #0
 800b424:	e007      	b.n	800b436 <memmove+0x20>
 800b426:	5c8b      	ldrb	r3, [r1, r2]
 800b428:	5483      	strb	r3, [r0, r2]
 800b42a:	3a01      	subs	r2, #1
 800b42c:	d2fb      	bcs.n	800b426 <memmove+0x10>
 800b42e:	bd10      	pop	{r4, pc}
 800b430:	5ccc      	ldrb	r4, [r1, r3]
 800b432:	54c4      	strb	r4, [r0, r3]
 800b434:	3301      	adds	r3, #1
 800b436:	429a      	cmp	r2, r3
 800b438:	d1fa      	bne.n	800b430 <memmove+0x1a>
 800b43a:	e7f8      	b.n	800b42e <memmove+0x18>

0800b43c <__malloc_lock>:
 800b43c:	b510      	push	{r4, lr}
 800b43e:	4802      	ldr	r0, [pc, #8]	; (800b448 <__malloc_lock+0xc>)
 800b440:	f000 fc65 	bl	800bd0e <__retarget_lock_acquire_recursive>
 800b444:	bd10      	pop	{r4, pc}
 800b446:	46c0      	nop			; (mov r8, r8)
 800b448:	20000e44 	.word	0x20000e44

0800b44c <__malloc_unlock>:
 800b44c:	b510      	push	{r4, lr}
 800b44e:	4802      	ldr	r0, [pc, #8]	; (800b458 <__malloc_unlock+0xc>)
 800b450:	f000 fc5e 	bl	800bd10 <__retarget_lock_release_recursive>
 800b454:	bd10      	pop	{r4, pc}
 800b456:	46c0      	nop			; (mov r8, r8)
 800b458:	20000e44 	.word	0x20000e44

0800b45c <_free_r>:
 800b45c:	b570      	push	{r4, r5, r6, lr}
 800b45e:	0005      	movs	r5, r0
 800b460:	2900      	cmp	r1, #0
 800b462:	d010      	beq.n	800b486 <_free_r+0x2a>
 800b464:	1f0c      	subs	r4, r1, #4
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	da00      	bge.n	800b46e <_free_r+0x12>
 800b46c:	18e4      	adds	r4, r4, r3
 800b46e:	0028      	movs	r0, r5
 800b470:	f7ff ffe4 	bl	800b43c <__malloc_lock>
 800b474:	4a1d      	ldr	r2, [pc, #116]	; (800b4ec <_free_r+0x90>)
 800b476:	6813      	ldr	r3, [r2, #0]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d105      	bne.n	800b488 <_free_r+0x2c>
 800b47c:	6063      	str	r3, [r4, #4]
 800b47e:	6014      	str	r4, [r2, #0]
 800b480:	0028      	movs	r0, r5
 800b482:	f7ff ffe3 	bl	800b44c <__malloc_unlock>
 800b486:	bd70      	pop	{r4, r5, r6, pc}
 800b488:	42a3      	cmp	r3, r4
 800b48a:	d908      	bls.n	800b49e <_free_r+0x42>
 800b48c:	6821      	ldr	r1, [r4, #0]
 800b48e:	1860      	adds	r0, r4, r1
 800b490:	4283      	cmp	r3, r0
 800b492:	d1f3      	bne.n	800b47c <_free_r+0x20>
 800b494:	6818      	ldr	r0, [r3, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	1841      	adds	r1, r0, r1
 800b49a:	6021      	str	r1, [r4, #0]
 800b49c:	e7ee      	b.n	800b47c <_free_r+0x20>
 800b49e:	001a      	movs	r2, r3
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <_free_r+0x4e>
 800b4a6:	42a3      	cmp	r3, r4
 800b4a8:	d9f9      	bls.n	800b49e <_free_r+0x42>
 800b4aa:	6811      	ldr	r1, [r2, #0]
 800b4ac:	1850      	adds	r0, r2, r1
 800b4ae:	42a0      	cmp	r0, r4
 800b4b0:	d10b      	bne.n	800b4ca <_free_r+0x6e>
 800b4b2:	6820      	ldr	r0, [r4, #0]
 800b4b4:	1809      	adds	r1, r1, r0
 800b4b6:	1850      	adds	r0, r2, r1
 800b4b8:	6011      	str	r1, [r2, #0]
 800b4ba:	4283      	cmp	r3, r0
 800b4bc:	d1e0      	bne.n	800b480 <_free_r+0x24>
 800b4be:	6818      	ldr	r0, [r3, #0]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	1841      	adds	r1, r0, r1
 800b4c4:	6011      	str	r1, [r2, #0]
 800b4c6:	6053      	str	r3, [r2, #4]
 800b4c8:	e7da      	b.n	800b480 <_free_r+0x24>
 800b4ca:	42a0      	cmp	r0, r4
 800b4cc:	d902      	bls.n	800b4d4 <_free_r+0x78>
 800b4ce:	230c      	movs	r3, #12
 800b4d0:	602b      	str	r3, [r5, #0]
 800b4d2:	e7d5      	b.n	800b480 <_free_r+0x24>
 800b4d4:	6821      	ldr	r1, [r4, #0]
 800b4d6:	1860      	adds	r0, r4, r1
 800b4d8:	4283      	cmp	r3, r0
 800b4da:	d103      	bne.n	800b4e4 <_free_r+0x88>
 800b4dc:	6818      	ldr	r0, [r3, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	1841      	adds	r1, r0, r1
 800b4e2:	6021      	str	r1, [r4, #0]
 800b4e4:	6063      	str	r3, [r4, #4]
 800b4e6:	6054      	str	r4, [r2, #4]
 800b4e8:	e7ca      	b.n	800b480 <_free_r+0x24>
 800b4ea:	46c0      	nop			; (mov r8, r8)
 800b4ec:	20000e38 	.word	0x20000e38

0800b4f0 <_malloc_usable_size_r>:
 800b4f0:	1f0b      	subs	r3, r1, #4
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	1f18      	subs	r0, r3, #4
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	da01      	bge.n	800b4fe <_malloc_usable_size_r+0xe>
 800b4fa:	580b      	ldr	r3, [r1, r0]
 800b4fc:	18c0      	adds	r0, r0, r3
 800b4fe:	4770      	bx	lr

0800b500 <__sfputc_r>:
 800b500:	6893      	ldr	r3, [r2, #8]
 800b502:	b510      	push	{r4, lr}
 800b504:	3b01      	subs	r3, #1
 800b506:	6093      	str	r3, [r2, #8]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	da04      	bge.n	800b516 <__sfputc_r+0x16>
 800b50c:	6994      	ldr	r4, [r2, #24]
 800b50e:	42a3      	cmp	r3, r4
 800b510:	db07      	blt.n	800b522 <__sfputc_r+0x22>
 800b512:	290a      	cmp	r1, #10
 800b514:	d005      	beq.n	800b522 <__sfputc_r+0x22>
 800b516:	6813      	ldr	r3, [r2, #0]
 800b518:	1c58      	adds	r0, r3, #1
 800b51a:	6010      	str	r0, [r2, #0]
 800b51c:	7019      	strb	r1, [r3, #0]
 800b51e:	0008      	movs	r0, r1
 800b520:	bd10      	pop	{r4, pc}
 800b522:	f000 f94f 	bl	800b7c4 <__swbuf_r>
 800b526:	0001      	movs	r1, r0
 800b528:	e7f9      	b.n	800b51e <__sfputc_r+0x1e>

0800b52a <__sfputs_r>:
 800b52a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52c:	0006      	movs	r6, r0
 800b52e:	000f      	movs	r7, r1
 800b530:	0014      	movs	r4, r2
 800b532:	18d5      	adds	r5, r2, r3
 800b534:	42ac      	cmp	r4, r5
 800b536:	d101      	bne.n	800b53c <__sfputs_r+0x12>
 800b538:	2000      	movs	r0, #0
 800b53a:	e007      	b.n	800b54c <__sfputs_r+0x22>
 800b53c:	7821      	ldrb	r1, [r4, #0]
 800b53e:	003a      	movs	r2, r7
 800b540:	0030      	movs	r0, r6
 800b542:	f7ff ffdd 	bl	800b500 <__sfputc_r>
 800b546:	3401      	adds	r4, #1
 800b548:	1c43      	adds	r3, r0, #1
 800b54a:	d1f3      	bne.n	800b534 <__sfputs_r+0xa>
 800b54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b550 <_vfiprintf_r>:
 800b550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b552:	b0a1      	sub	sp, #132	; 0x84
 800b554:	0006      	movs	r6, r0
 800b556:	000c      	movs	r4, r1
 800b558:	001f      	movs	r7, r3
 800b55a:	9203      	str	r2, [sp, #12]
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d004      	beq.n	800b56a <_vfiprintf_r+0x1a>
 800b560:	6983      	ldr	r3, [r0, #24]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d101      	bne.n	800b56a <_vfiprintf_r+0x1a>
 800b566:	f000 fb31 	bl	800bbcc <__sinit>
 800b56a:	4b8e      	ldr	r3, [pc, #568]	; (800b7a4 <_vfiprintf_r+0x254>)
 800b56c:	429c      	cmp	r4, r3
 800b56e:	d11c      	bne.n	800b5aa <_vfiprintf_r+0x5a>
 800b570:	6874      	ldr	r4, [r6, #4]
 800b572:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b574:	07db      	lsls	r3, r3, #31
 800b576:	d405      	bmi.n	800b584 <_vfiprintf_r+0x34>
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	059b      	lsls	r3, r3, #22
 800b57c:	d402      	bmi.n	800b584 <_vfiprintf_r+0x34>
 800b57e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b580:	f000 fbc5 	bl	800bd0e <__retarget_lock_acquire_recursive>
 800b584:	89a3      	ldrh	r3, [r4, #12]
 800b586:	071b      	lsls	r3, r3, #28
 800b588:	d502      	bpl.n	800b590 <_vfiprintf_r+0x40>
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d11d      	bne.n	800b5cc <_vfiprintf_r+0x7c>
 800b590:	0021      	movs	r1, r4
 800b592:	0030      	movs	r0, r6
 800b594:	f000 f96c 	bl	800b870 <__swsetup_r>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d017      	beq.n	800b5cc <_vfiprintf_r+0x7c>
 800b59c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b59e:	07db      	lsls	r3, r3, #31
 800b5a0:	d50d      	bpl.n	800b5be <_vfiprintf_r+0x6e>
 800b5a2:	2001      	movs	r0, #1
 800b5a4:	4240      	negs	r0, r0
 800b5a6:	b021      	add	sp, #132	; 0x84
 800b5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5aa:	4b7f      	ldr	r3, [pc, #508]	; (800b7a8 <_vfiprintf_r+0x258>)
 800b5ac:	429c      	cmp	r4, r3
 800b5ae:	d101      	bne.n	800b5b4 <_vfiprintf_r+0x64>
 800b5b0:	68b4      	ldr	r4, [r6, #8]
 800b5b2:	e7de      	b.n	800b572 <_vfiprintf_r+0x22>
 800b5b4:	4b7d      	ldr	r3, [pc, #500]	; (800b7ac <_vfiprintf_r+0x25c>)
 800b5b6:	429c      	cmp	r4, r3
 800b5b8:	d1db      	bne.n	800b572 <_vfiprintf_r+0x22>
 800b5ba:	68f4      	ldr	r4, [r6, #12]
 800b5bc:	e7d9      	b.n	800b572 <_vfiprintf_r+0x22>
 800b5be:	89a3      	ldrh	r3, [r4, #12]
 800b5c0:	059b      	lsls	r3, r3, #22
 800b5c2:	d4ee      	bmi.n	800b5a2 <_vfiprintf_r+0x52>
 800b5c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5c6:	f000 fba3 	bl	800bd10 <__retarget_lock_release_recursive>
 800b5ca:	e7ea      	b.n	800b5a2 <_vfiprintf_r+0x52>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	ad08      	add	r5, sp, #32
 800b5d0:	616b      	str	r3, [r5, #20]
 800b5d2:	3320      	adds	r3, #32
 800b5d4:	766b      	strb	r3, [r5, #25]
 800b5d6:	3310      	adds	r3, #16
 800b5d8:	76ab      	strb	r3, [r5, #26]
 800b5da:	9707      	str	r7, [sp, #28]
 800b5dc:	9f03      	ldr	r7, [sp, #12]
 800b5de:	783b      	ldrb	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d001      	beq.n	800b5e8 <_vfiprintf_r+0x98>
 800b5e4:	2b25      	cmp	r3, #37	; 0x25
 800b5e6:	d14e      	bne.n	800b686 <_vfiprintf_r+0x136>
 800b5e8:	9b03      	ldr	r3, [sp, #12]
 800b5ea:	1afb      	subs	r3, r7, r3
 800b5ec:	9305      	str	r3, [sp, #20]
 800b5ee:	9b03      	ldr	r3, [sp, #12]
 800b5f0:	429f      	cmp	r7, r3
 800b5f2:	d00d      	beq.n	800b610 <_vfiprintf_r+0xc0>
 800b5f4:	9b05      	ldr	r3, [sp, #20]
 800b5f6:	0021      	movs	r1, r4
 800b5f8:	0030      	movs	r0, r6
 800b5fa:	9a03      	ldr	r2, [sp, #12]
 800b5fc:	f7ff ff95 	bl	800b52a <__sfputs_r>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d100      	bne.n	800b606 <_vfiprintf_r+0xb6>
 800b604:	e0b5      	b.n	800b772 <_vfiprintf_r+0x222>
 800b606:	696a      	ldr	r2, [r5, #20]
 800b608:	9b05      	ldr	r3, [sp, #20]
 800b60a:	4694      	mov	ip, r2
 800b60c:	4463      	add	r3, ip
 800b60e:	616b      	str	r3, [r5, #20]
 800b610:	783b      	ldrb	r3, [r7, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d100      	bne.n	800b618 <_vfiprintf_r+0xc8>
 800b616:	e0ac      	b.n	800b772 <_vfiprintf_r+0x222>
 800b618:	2201      	movs	r2, #1
 800b61a:	1c7b      	adds	r3, r7, #1
 800b61c:	9303      	str	r3, [sp, #12]
 800b61e:	2300      	movs	r3, #0
 800b620:	4252      	negs	r2, r2
 800b622:	606a      	str	r2, [r5, #4]
 800b624:	a904      	add	r1, sp, #16
 800b626:	3254      	adds	r2, #84	; 0x54
 800b628:	1852      	adds	r2, r2, r1
 800b62a:	602b      	str	r3, [r5, #0]
 800b62c:	60eb      	str	r3, [r5, #12]
 800b62e:	60ab      	str	r3, [r5, #8]
 800b630:	7013      	strb	r3, [r2, #0]
 800b632:	65ab      	str	r3, [r5, #88]	; 0x58
 800b634:	9b03      	ldr	r3, [sp, #12]
 800b636:	2205      	movs	r2, #5
 800b638:	7819      	ldrb	r1, [r3, #0]
 800b63a:	485d      	ldr	r0, [pc, #372]	; (800b7b0 <_vfiprintf_r+0x260>)
 800b63c:	f7ff fee0 	bl	800b400 <memchr>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	1c5f      	adds	r7, r3, #1
 800b644:	2800      	cmp	r0, #0
 800b646:	d120      	bne.n	800b68a <_vfiprintf_r+0x13a>
 800b648:	682a      	ldr	r2, [r5, #0]
 800b64a:	06d3      	lsls	r3, r2, #27
 800b64c:	d504      	bpl.n	800b658 <_vfiprintf_r+0x108>
 800b64e:	2353      	movs	r3, #83	; 0x53
 800b650:	a904      	add	r1, sp, #16
 800b652:	185b      	adds	r3, r3, r1
 800b654:	2120      	movs	r1, #32
 800b656:	7019      	strb	r1, [r3, #0]
 800b658:	0713      	lsls	r3, r2, #28
 800b65a:	d504      	bpl.n	800b666 <_vfiprintf_r+0x116>
 800b65c:	2353      	movs	r3, #83	; 0x53
 800b65e:	a904      	add	r1, sp, #16
 800b660:	185b      	adds	r3, r3, r1
 800b662:	212b      	movs	r1, #43	; 0x2b
 800b664:	7019      	strb	r1, [r3, #0]
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	2b2a      	cmp	r3, #42	; 0x2a
 800b66c:	d016      	beq.n	800b69c <_vfiprintf_r+0x14c>
 800b66e:	2100      	movs	r1, #0
 800b670:	68eb      	ldr	r3, [r5, #12]
 800b672:	9f03      	ldr	r7, [sp, #12]
 800b674:	783a      	ldrb	r2, [r7, #0]
 800b676:	1c78      	adds	r0, r7, #1
 800b678:	3a30      	subs	r2, #48	; 0x30
 800b67a:	4684      	mov	ip, r0
 800b67c:	2a09      	cmp	r2, #9
 800b67e:	d94f      	bls.n	800b720 <_vfiprintf_r+0x1d0>
 800b680:	2900      	cmp	r1, #0
 800b682:	d111      	bne.n	800b6a8 <_vfiprintf_r+0x158>
 800b684:	e017      	b.n	800b6b6 <_vfiprintf_r+0x166>
 800b686:	3701      	adds	r7, #1
 800b688:	e7a9      	b.n	800b5de <_vfiprintf_r+0x8e>
 800b68a:	4b49      	ldr	r3, [pc, #292]	; (800b7b0 <_vfiprintf_r+0x260>)
 800b68c:	682a      	ldr	r2, [r5, #0]
 800b68e:	1ac0      	subs	r0, r0, r3
 800b690:	2301      	movs	r3, #1
 800b692:	4083      	lsls	r3, r0
 800b694:	4313      	orrs	r3, r2
 800b696:	602b      	str	r3, [r5, #0]
 800b698:	9703      	str	r7, [sp, #12]
 800b69a:	e7cb      	b.n	800b634 <_vfiprintf_r+0xe4>
 800b69c:	9b07      	ldr	r3, [sp, #28]
 800b69e:	1d19      	adds	r1, r3, #4
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	9107      	str	r1, [sp, #28]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	db01      	blt.n	800b6ac <_vfiprintf_r+0x15c>
 800b6a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6aa:	e004      	b.n	800b6b6 <_vfiprintf_r+0x166>
 800b6ac:	425b      	negs	r3, r3
 800b6ae:	60eb      	str	r3, [r5, #12]
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	602b      	str	r3, [r5, #0]
 800b6b6:	783b      	ldrb	r3, [r7, #0]
 800b6b8:	2b2e      	cmp	r3, #46	; 0x2e
 800b6ba:	d10a      	bne.n	800b6d2 <_vfiprintf_r+0x182>
 800b6bc:	787b      	ldrb	r3, [r7, #1]
 800b6be:	2b2a      	cmp	r3, #42	; 0x2a
 800b6c0:	d137      	bne.n	800b732 <_vfiprintf_r+0x1e2>
 800b6c2:	9b07      	ldr	r3, [sp, #28]
 800b6c4:	3702      	adds	r7, #2
 800b6c6:	1d1a      	adds	r2, r3, #4
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	9207      	str	r2, [sp, #28]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	db2d      	blt.n	800b72c <_vfiprintf_r+0x1dc>
 800b6d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d2:	2203      	movs	r2, #3
 800b6d4:	7839      	ldrb	r1, [r7, #0]
 800b6d6:	4837      	ldr	r0, [pc, #220]	; (800b7b4 <_vfiprintf_r+0x264>)
 800b6d8:	f7ff fe92 	bl	800b400 <memchr>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d007      	beq.n	800b6f0 <_vfiprintf_r+0x1a0>
 800b6e0:	4b34      	ldr	r3, [pc, #208]	; (800b7b4 <_vfiprintf_r+0x264>)
 800b6e2:	682a      	ldr	r2, [r5, #0]
 800b6e4:	1ac0      	subs	r0, r0, r3
 800b6e6:	2340      	movs	r3, #64	; 0x40
 800b6e8:	4083      	lsls	r3, r0
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	3701      	adds	r7, #1
 800b6ee:	602b      	str	r3, [r5, #0]
 800b6f0:	7839      	ldrb	r1, [r7, #0]
 800b6f2:	1c7b      	adds	r3, r7, #1
 800b6f4:	2206      	movs	r2, #6
 800b6f6:	4830      	ldr	r0, [pc, #192]	; (800b7b8 <_vfiprintf_r+0x268>)
 800b6f8:	9303      	str	r3, [sp, #12]
 800b6fa:	7629      	strb	r1, [r5, #24]
 800b6fc:	f7ff fe80 	bl	800b400 <memchr>
 800b700:	2800      	cmp	r0, #0
 800b702:	d045      	beq.n	800b790 <_vfiprintf_r+0x240>
 800b704:	4b2d      	ldr	r3, [pc, #180]	; (800b7bc <_vfiprintf_r+0x26c>)
 800b706:	2b00      	cmp	r3, #0
 800b708:	d127      	bne.n	800b75a <_vfiprintf_r+0x20a>
 800b70a:	2207      	movs	r2, #7
 800b70c:	9b07      	ldr	r3, [sp, #28]
 800b70e:	3307      	adds	r3, #7
 800b710:	4393      	bics	r3, r2
 800b712:	3308      	adds	r3, #8
 800b714:	9307      	str	r3, [sp, #28]
 800b716:	696b      	ldr	r3, [r5, #20]
 800b718:	9a04      	ldr	r2, [sp, #16]
 800b71a:	189b      	adds	r3, r3, r2
 800b71c:	616b      	str	r3, [r5, #20]
 800b71e:	e75d      	b.n	800b5dc <_vfiprintf_r+0x8c>
 800b720:	210a      	movs	r1, #10
 800b722:	434b      	muls	r3, r1
 800b724:	4667      	mov	r7, ip
 800b726:	189b      	adds	r3, r3, r2
 800b728:	3909      	subs	r1, #9
 800b72a:	e7a3      	b.n	800b674 <_vfiprintf_r+0x124>
 800b72c:	2301      	movs	r3, #1
 800b72e:	425b      	negs	r3, r3
 800b730:	e7ce      	b.n	800b6d0 <_vfiprintf_r+0x180>
 800b732:	2300      	movs	r3, #0
 800b734:	001a      	movs	r2, r3
 800b736:	3701      	adds	r7, #1
 800b738:	606b      	str	r3, [r5, #4]
 800b73a:	7839      	ldrb	r1, [r7, #0]
 800b73c:	1c78      	adds	r0, r7, #1
 800b73e:	3930      	subs	r1, #48	; 0x30
 800b740:	4684      	mov	ip, r0
 800b742:	2909      	cmp	r1, #9
 800b744:	d903      	bls.n	800b74e <_vfiprintf_r+0x1fe>
 800b746:	2b00      	cmp	r3, #0
 800b748:	d0c3      	beq.n	800b6d2 <_vfiprintf_r+0x182>
 800b74a:	9209      	str	r2, [sp, #36]	; 0x24
 800b74c:	e7c1      	b.n	800b6d2 <_vfiprintf_r+0x182>
 800b74e:	230a      	movs	r3, #10
 800b750:	435a      	muls	r2, r3
 800b752:	4667      	mov	r7, ip
 800b754:	1852      	adds	r2, r2, r1
 800b756:	3b09      	subs	r3, #9
 800b758:	e7ef      	b.n	800b73a <_vfiprintf_r+0x1ea>
 800b75a:	ab07      	add	r3, sp, #28
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	0022      	movs	r2, r4
 800b760:	0029      	movs	r1, r5
 800b762:	0030      	movs	r0, r6
 800b764:	4b16      	ldr	r3, [pc, #88]	; (800b7c0 <_vfiprintf_r+0x270>)
 800b766:	e000      	b.n	800b76a <_vfiprintf_r+0x21a>
 800b768:	bf00      	nop
 800b76a:	9004      	str	r0, [sp, #16]
 800b76c:	9b04      	ldr	r3, [sp, #16]
 800b76e:	3301      	adds	r3, #1
 800b770:	d1d1      	bne.n	800b716 <_vfiprintf_r+0x1c6>
 800b772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b774:	07db      	lsls	r3, r3, #31
 800b776:	d405      	bmi.n	800b784 <_vfiprintf_r+0x234>
 800b778:	89a3      	ldrh	r3, [r4, #12]
 800b77a:	059b      	lsls	r3, r3, #22
 800b77c:	d402      	bmi.n	800b784 <_vfiprintf_r+0x234>
 800b77e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b780:	f000 fac6 	bl	800bd10 <__retarget_lock_release_recursive>
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	065b      	lsls	r3, r3, #25
 800b788:	d500      	bpl.n	800b78c <_vfiprintf_r+0x23c>
 800b78a:	e70a      	b.n	800b5a2 <_vfiprintf_r+0x52>
 800b78c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b78e:	e70a      	b.n	800b5a6 <_vfiprintf_r+0x56>
 800b790:	ab07      	add	r3, sp, #28
 800b792:	9300      	str	r3, [sp, #0]
 800b794:	0022      	movs	r2, r4
 800b796:	0029      	movs	r1, r5
 800b798:	0030      	movs	r0, r6
 800b79a:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <_vfiprintf_r+0x270>)
 800b79c:	f7fe fe26 	bl	800a3ec <_printf_i>
 800b7a0:	e7e3      	b.n	800b76a <_vfiprintf_r+0x21a>
 800b7a2:	46c0      	nop			; (mov r8, r8)
 800b7a4:	0800c5e0 	.word	0x0800c5e0
 800b7a8:	0800c600 	.word	0x0800c600
 800b7ac:	0800c5c0 	.word	0x0800c5c0
 800b7b0:	0800c4e4 	.word	0x0800c4e4
 800b7b4:	0800c4ea 	.word	0x0800c4ea
 800b7b8:	0800c4ee 	.word	0x0800c4ee
 800b7bc:	00000000 	.word	0x00000000
 800b7c0:	0800b52b 	.word	0x0800b52b

0800b7c4 <__swbuf_r>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	0005      	movs	r5, r0
 800b7c8:	000e      	movs	r6, r1
 800b7ca:	0014      	movs	r4, r2
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d004      	beq.n	800b7da <__swbuf_r+0x16>
 800b7d0:	6983      	ldr	r3, [r0, #24]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <__swbuf_r+0x16>
 800b7d6:	f000 f9f9 	bl	800bbcc <__sinit>
 800b7da:	4b22      	ldr	r3, [pc, #136]	; (800b864 <__swbuf_r+0xa0>)
 800b7dc:	429c      	cmp	r4, r3
 800b7de:	d12e      	bne.n	800b83e <__swbuf_r+0x7a>
 800b7e0:	686c      	ldr	r4, [r5, #4]
 800b7e2:	69a3      	ldr	r3, [r4, #24]
 800b7e4:	60a3      	str	r3, [r4, #8]
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	071b      	lsls	r3, r3, #28
 800b7ea:	d532      	bpl.n	800b852 <__swbuf_r+0x8e>
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d02f      	beq.n	800b852 <__swbuf_r+0x8e>
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	6922      	ldr	r2, [r4, #16]
 800b7f6:	b2f7      	uxtb	r7, r6
 800b7f8:	1a98      	subs	r0, r3, r2
 800b7fa:	6963      	ldr	r3, [r4, #20]
 800b7fc:	b2f6      	uxtb	r6, r6
 800b7fe:	4283      	cmp	r3, r0
 800b800:	dc05      	bgt.n	800b80e <__swbuf_r+0x4a>
 800b802:	0021      	movs	r1, r4
 800b804:	0028      	movs	r0, r5
 800b806:	f000 f93f 	bl	800ba88 <_fflush_r>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d127      	bne.n	800b85e <__swbuf_r+0x9a>
 800b80e:	68a3      	ldr	r3, [r4, #8]
 800b810:	3001      	adds	r0, #1
 800b812:	3b01      	subs	r3, #1
 800b814:	60a3      	str	r3, [r4, #8]
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	1c5a      	adds	r2, r3, #1
 800b81a:	6022      	str	r2, [r4, #0]
 800b81c:	701f      	strb	r7, [r3, #0]
 800b81e:	6963      	ldr	r3, [r4, #20]
 800b820:	4283      	cmp	r3, r0
 800b822:	d004      	beq.n	800b82e <__swbuf_r+0x6a>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	07db      	lsls	r3, r3, #31
 800b828:	d507      	bpl.n	800b83a <__swbuf_r+0x76>
 800b82a:	2e0a      	cmp	r6, #10
 800b82c:	d105      	bne.n	800b83a <__swbuf_r+0x76>
 800b82e:	0021      	movs	r1, r4
 800b830:	0028      	movs	r0, r5
 800b832:	f000 f929 	bl	800ba88 <_fflush_r>
 800b836:	2800      	cmp	r0, #0
 800b838:	d111      	bne.n	800b85e <__swbuf_r+0x9a>
 800b83a:	0030      	movs	r0, r6
 800b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b83e:	4b0a      	ldr	r3, [pc, #40]	; (800b868 <__swbuf_r+0xa4>)
 800b840:	429c      	cmp	r4, r3
 800b842:	d101      	bne.n	800b848 <__swbuf_r+0x84>
 800b844:	68ac      	ldr	r4, [r5, #8]
 800b846:	e7cc      	b.n	800b7e2 <__swbuf_r+0x1e>
 800b848:	4b08      	ldr	r3, [pc, #32]	; (800b86c <__swbuf_r+0xa8>)
 800b84a:	429c      	cmp	r4, r3
 800b84c:	d1c9      	bne.n	800b7e2 <__swbuf_r+0x1e>
 800b84e:	68ec      	ldr	r4, [r5, #12]
 800b850:	e7c7      	b.n	800b7e2 <__swbuf_r+0x1e>
 800b852:	0021      	movs	r1, r4
 800b854:	0028      	movs	r0, r5
 800b856:	f000 f80b 	bl	800b870 <__swsetup_r>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d0c9      	beq.n	800b7f2 <__swbuf_r+0x2e>
 800b85e:	2601      	movs	r6, #1
 800b860:	4276      	negs	r6, r6
 800b862:	e7ea      	b.n	800b83a <__swbuf_r+0x76>
 800b864:	0800c5e0 	.word	0x0800c5e0
 800b868:	0800c600 	.word	0x0800c600
 800b86c:	0800c5c0 	.word	0x0800c5c0

0800b870 <__swsetup_r>:
 800b870:	4b37      	ldr	r3, [pc, #220]	; (800b950 <__swsetup_r+0xe0>)
 800b872:	b570      	push	{r4, r5, r6, lr}
 800b874:	681d      	ldr	r5, [r3, #0]
 800b876:	0006      	movs	r6, r0
 800b878:	000c      	movs	r4, r1
 800b87a:	2d00      	cmp	r5, #0
 800b87c:	d005      	beq.n	800b88a <__swsetup_r+0x1a>
 800b87e:	69ab      	ldr	r3, [r5, #24]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d102      	bne.n	800b88a <__swsetup_r+0x1a>
 800b884:	0028      	movs	r0, r5
 800b886:	f000 f9a1 	bl	800bbcc <__sinit>
 800b88a:	4b32      	ldr	r3, [pc, #200]	; (800b954 <__swsetup_r+0xe4>)
 800b88c:	429c      	cmp	r4, r3
 800b88e:	d10f      	bne.n	800b8b0 <__swsetup_r+0x40>
 800b890:	686c      	ldr	r4, [r5, #4]
 800b892:	230c      	movs	r3, #12
 800b894:	5ee2      	ldrsh	r2, [r4, r3]
 800b896:	b293      	uxth	r3, r2
 800b898:	0711      	lsls	r1, r2, #28
 800b89a:	d42d      	bmi.n	800b8f8 <__swsetup_r+0x88>
 800b89c:	06d9      	lsls	r1, r3, #27
 800b89e:	d411      	bmi.n	800b8c4 <__swsetup_r+0x54>
 800b8a0:	2309      	movs	r3, #9
 800b8a2:	2001      	movs	r0, #1
 800b8a4:	6033      	str	r3, [r6, #0]
 800b8a6:	3337      	adds	r3, #55	; 0x37
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	81a3      	strh	r3, [r4, #12]
 800b8ac:	4240      	negs	r0, r0
 800b8ae:	bd70      	pop	{r4, r5, r6, pc}
 800b8b0:	4b29      	ldr	r3, [pc, #164]	; (800b958 <__swsetup_r+0xe8>)
 800b8b2:	429c      	cmp	r4, r3
 800b8b4:	d101      	bne.n	800b8ba <__swsetup_r+0x4a>
 800b8b6:	68ac      	ldr	r4, [r5, #8]
 800b8b8:	e7eb      	b.n	800b892 <__swsetup_r+0x22>
 800b8ba:	4b28      	ldr	r3, [pc, #160]	; (800b95c <__swsetup_r+0xec>)
 800b8bc:	429c      	cmp	r4, r3
 800b8be:	d1e8      	bne.n	800b892 <__swsetup_r+0x22>
 800b8c0:	68ec      	ldr	r4, [r5, #12]
 800b8c2:	e7e6      	b.n	800b892 <__swsetup_r+0x22>
 800b8c4:	075b      	lsls	r3, r3, #29
 800b8c6:	d513      	bpl.n	800b8f0 <__swsetup_r+0x80>
 800b8c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8ca:	2900      	cmp	r1, #0
 800b8cc:	d008      	beq.n	800b8e0 <__swsetup_r+0x70>
 800b8ce:	0023      	movs	r3, r4
 800b8d0:	3344      	adds	r3, #68	; 0x44
 800b8d2:	4299      	cmp	r1, r3
 800b8d4:	d002      	beq.n	800b8dc <__swsetup_r+0x6c>
 800b8d6:	0030      	movs	r0, r6
 800b8d8:	f7ff fdc0 	bl	800b45c <_free_r>
 800b8dc:	2300      	movs	r3, #0
 800b8de:	6363      	str	r3, [r4, #52]	; 0x34
 800b8e0:	2224      	movs	r2, #36	; 0x24
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	4393      	bics	r3, r2
 800b8e6:	81a3      	strh	r3, [r4, #12]
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	6063      	str	r3, [r4, #4]
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	2308      	movs	r3, #8
 800b8f2:	89a2      	ldrh	r2, [r4, #12]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	6923      	ldr	r3, [r4, #16]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10b      	bne.n	800b916 <__swsetup_r+0xa6>
 800b8fe:	21a0      	movs	r1, #160	; 0xa0
 800b900:	2280      	movs	r2, #128	; 0x80
 800b902:	89a3      	ldrh	r3, [r4, #12]
 800b904:	0089      	lsls	r1, r1, #2
 800b906:	0092      	lsls	r2, r2, #2
 800b908:	400b      	ands	r3, r1
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d003      	beq.n	800b916 <__swsetup_r+0xa6>
 800b90e:	0021      	movs	r1, r4
 800b910:	0030      	movs	r0, r6
 800b912:	f000 fa27 	bl	800bd64 <__smakebuf_r>
 800b916:	220c      	movs	r2, #12
 800b918:	5ea3      	ldrsh	r3, [r4, r2]
 800b91a:	2001      	movs	r0, #1
 800b91c:	001a      	movs	r2, r3
 800b91e:	b299      	uxth	r1, r3
 800b920:	4002      	ands	r2, r0
 800b922:	4203      	tst	r3, r0
 800b924:	d00f      	beq.n	800b946 <__swsetup_r+0xd6>
 800b926:	2200      	movs	r2, #0
 800b928:	60a2      	str	r2, [r4, #8]
 800b92a:	6962      	ldr	r2, [r4, #20]
 800b92c:	4252      	negs	r2, r2
 800b92e:	61a2      	str	r2, [r4, #24]
 800b930:	2000      	movs	r0, #0
 800b932:	6922      	ldr	r2, [r4, #16]
 800b934:	4282      	cmp	r2, r0
 800b936:	d1ba      	bne.n	800b8ae <__swsetup_r+0x3e>
 800b938:	060a      	lsls	r2, r1, #24
 800b93a:	d5b8      	bpl.n	800b8ae <__swsetup_r+0x3e>
 800b93c:	2240      	movs	r2, #64	; 0x40
 800b93e:	4313      	orrs	r3, r2
 800b940:	81a3      	strh	r3, [r4, #12]
 800b942:	3801      	subs	r0, #1
 800b944:	e7b3      	b.n	800b8ae <__swsetup_r+0x3e>
 800b946:	0788      	lsls	r0, r1, #30
 800b948:	d400      	bmi.n	800b94c <__swsetup_r+0xdc>
 800b94a:	6962      	ldr	r2, [r4, #20]
 800b94c:	60a2      	str	r2, [r4, #8]
 800b94e:	e7ef      	b.n	800b930 <__swsetup_r+0xc0>
 800b950:	20000014 	.word	0x20000014
 800b954:	0800c5e0 	.word	0x0800c5e0
 800b958:	0800c600 	.word	0x0800c600
 800b95c:	0800c5c0 	.word	0x0800c5c0

0800b960 <abort>:
 800b960:	2006      	movs	r0, #6
 800b962:	b510      	push	{r4, lr}
 800b964:	f000 fa6c 	bl	800be40 <raise>
 800b968:	2001      	movs	r0, #1
 800b96a:	f7f8 fad3 	bl	8003f14 <_exit>
	...

0800b970 <__sflush_r>:
 800b970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b972:	898b      	ldrh	r3, [r1, #12]
 800b974:	0005      	movs	r5, r0
 800b976:	000c      	movs	r4, r1
 800b978:	071a      	lsls	r2, r3, #28
 800b97a:	d45f      	bmi.n	800ba3c <__sflush_r+0xcc>
 800b97c:	684a      	ldr	r2, [r1, #4]
 800b97e:	2a00      	cmp	r2, #0
 800b980:	dc04      	bgt.n	800b98c <__sflush_r+0x1c>
 800b982:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b984:	2a00      	cmp	r2, #0
 800b986:	dc01      	bgt.n	800b98c <__sflush_r+0x1c>
 800b988:	2000      	movs	r0, #0
 800b98a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b98c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b98e:	2f00      	cmp	r7, #0
 800b990:	d0fa      	beq.n	800b988 <__sflush_r+0x18>
 800b992:	2200      	movs	r2, #0
 800b994:	2180      	movs	r1, #128	; 0x80
 800b996:	682e      	ldr	r6, [r5, #0]
 800b998:	602a      	str	r2, [r5, #0]
 800b99a:	001a      	movs	r2, r3
 800b99c:	0149      	lsls	r1, r1, #5
 800b99e:	400a      	ands	r2, r1
 800b9a0:	420b      	tst	r3, r1
 800b9a2:	d034      	beq.n	800ba0e <__sflush_r+0x9e>
 800b9a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9a6:	89a3      	ldrh	r3, [r4, #12]
 800b9a8:	075b      	lsls	r3, r3, #29
 800b9aa:	d506      	bpl.n	800b9ba <__sflush_r+0x4a>
 800b9ac:	6863      	ldr	r3, [r4, #4]
 800b9ae:	1ac0      	subs	r0, r0, r3
 800b9b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <__sflush_r+0x4a>
 800b9b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9b8:	1ac0      	subs	r0, r0, r3
 800b9ba:	0002      	movs	r2, r0
 800b9bc:	6a21      	ldr	r1, [r4, #32]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	0028      	movs	r0, r5
 800b9c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b9c4:	47b8      	blx	r7
 800b9c6:	89a1      	ldrh	r1, [r4, #12]
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d106      	bne.n	800b9da <__sflush_r+0x6a>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	2b1d      	cmp	r3, #29
 800b9d0:	d831      	bhi.n	800ba36 <__sflush_r+0xc6>
 800b9d2:	4a2c      	ldr	r2, [pc, #176]	; (800ba84 <__sflush_r+0x114>)
 800b9d4:	40da      	lsrs	r2, r3
 800b9d6:	07d3      	lsls	r3, r2, #31
 800b9d8:	d52d      	bpl.n	800ba36 <__sflush_r+0xc6>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	6063      	str	r3, [r4, #4]
 800b9de:	6923      	ldr	r3, [r4, #16]
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	04cb      	lsls	r3, r1, #19
 800b9e4:	d505      	bpl.n	800b9f2 <__sflush_r+0x82>
 800b9e6:	1c43      	adds	r3, r0, #1
 800b9e8:	d102      	bne.n	800b9f0 <__sflush_r+0x80>
 800b9ea:	682b      	ldr	r3, [r5, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d100      	bne.n	800b9f2 <__sflush_r+0x82>
 800b9f0:	6560      	str	r0, [r4, #84]	; 0x54
 800b9f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9f4:	602e      	str	r6, [r5, #0]
 800b9f6:	2900      	cmp	r1, #0
 800b9f8:	d0c6      	beq.n	800b988 <__sflush_r+0x18>
 800b9fa:	0023      	movs	r3, r4
 800b9fc:	3344      	adds	r3, #68	; 0x44
 800b9fe:	4299      	cmp	r1, r3
 800ba00:	d002      	beq.n	800ba08 <__sflush_r+0x98>
 800ba02:	0028      	movs	r0, r5
 800ba04:	f7ff fd2a 	bl	800b45c <_free_r>
 800ba08:	2000      	movs	r0, #0
 800ba0a:	6360      	str	r0, [r4, #52]	; 0x34
 800ba0c:	e7bd      	b.n	800b98a <__sflush_r+0x1a>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	0028      	movs	r0, r5
 800ba12:	6a21      	ldr	r1, [r4, #32]
 800ba14:	47b8      	blx	r7
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d1c5      	bne.n	800b9a6 <__sflush_r+0x36>
 800ba1a:	682b      	ldr	r3, [r5, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0c2      	beq.n	800b9a6 <__sflush_r+0x36>
 800ba20:	2b1d      	cmp	r3, #29
 800ba22:	d001      	beq.n	800ba28 <__sflush_r+0xb8>
 800ba24:	2b16      	cmp	r3, #22
 800ba26:	d101      	bne.n	800ba2c <__sflush_r+0xbc>
 800ba28:	602e      	str	r6, [r5, #0]
 800ba2a:	e7ad      	b.n	800b988 <__sflush_r+0x18>
 800ba2c:	2340      	movs	r3, #64	; 0x40
 800ba2e:	89a2      	ldrh	r2, [r4, #12]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	e7a9      	b.n	800b98a <__sflush_r+0x1a>
 800ba36:	2340      	movs	r3, #64	; 0x40
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	e7fa      	b.n	800ba32 <__sflush_r+0xc2>
 800ba3c:	690f      	ldr	r7, [r1, #16]
 800ba3e:	2f00      	cmp	r7, #0
 800ba40:	d0a2      	beq.n	800b988 <__sflush_r+0x18>
 800ba42:	680a      	ldr	r2, [r1, #0]
 800ba44:	600f      	str	r7, [r1, #0]
 800ba46:	1bd2      	subs	r2, r2, r7
 800ba48:	9201      	str	r2, [sp, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	079b      	lsls	r3, r3, #30
 800ba4e:	d100      	bne.n	800ba52 <__sflush_r+0xe2>
 800ba50:	694a      	ldr	r2, [r1, #20]
 800ba52:	60a2      	str	r2, [r4, #8]
 800ba54:	9b01      	ldr	r3, [sp, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	dc00      	bgt.n	800ba5c <__sflush_r+0xec>
 800ba5a:	e795      	b.n	800b988 <__sflush_r+0x18>
 800ba5c:	003a      	movs	r2, r7
 800ba5e:	0028      	movs	r0, r5
 800ba60:	9b01      	ldr	r3, [sp, #4]
 800ba62:	6a21      	ldr	r1, [r4, #32]
 800ba64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba66:	47b0      	blx	r6
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	dc06      	bgt.n	800ba7a <__sflush_r+0x10a>
 800ba6c:	2340      	movs	r3, #64	; 0x40
 800ba6e:	2001      	movs	r0, #1
 800ba70:	89a2      	ldrh	r2, [r4, #12]
 800ba72:	4240      	negs	r0, r0
 800ba74:	4313      	orrs	r3, r2
 800ba76:	81a3      	strh	r3, [r4, #12]
 800ba78:	e787      	b.n	800b98a <__sflush_r+0x1a>
 800ba7a:	9b01      	ldr	r3, [sp, #4]
 800ba7c:	183f      	adds	r7, r7, r0
 800ba7e:	1a1b      	subs	r3, r3, r0
 800ba80:	9301      	str	r3, [sp, #4]
 800ba82:	e7e7      	b.n	800ba54 <__sflush_r+0xe4>
 800ba84:	20400001 	.word	0x20400001

0800ba88 <_fflush_r>:
 800ba88:	690b      	ldr	r3, [r1, #16]
 800ba8a:	b570      	push	{r4, r5, r6, lr}
 800ba8c:	0005      	movs	r5, r0
 800ba8e:	000c      	movs	r4, r1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d102      	bne.n	800ba9a <_fflush_r+0x12>
 800ba94:	2500      	movs	r5, #0
 800ba96:	0028      	movs	r0, r5
 800ba98:	bd70      	pop	{r4, r5, r6, pc}
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d004      	beq.n	800baa8 <_fflush_r+0x20>
 800ba9e:	6983      	ldr	r3, [r0, #24]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <_fflush_r+0x20>
 800baa4:	f000 f892 	bl	800bbcc <__sinit>
 800baa8:	4b14      	ldr	r3, [pc, #80]	; (800bafc <_fflush_r+0x74>)
 800baaa:	429c      	cmp	r4, r3
 800baac:	d11b      	bne.n	800bae6 <_fflush_r+0x5e>
 800baae:	686c      	ldr	r4, [r5, #4]
 800bab0:	220c      	movs	r2, #12
 800bab2:	5ea3      	ldrsh	r3, [r4, r2]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d0ed      	beq.n	800ba94 <_fflush_r+0xc>
 800bab8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800baba:	07d2      	lsls	r2, r2, #31
 800babc:	d404      	bmi.n	800bac8 <_fflush_r+0x40>
 800babe:	059b      	lsls	r3, r3, #22
 800bac0:	d402      	bmi.n	800bac8 <_fflush_r+0x40>
 800bac2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bac4:	f000 f923 	bl	800bd0e <__retarget_lock_acquire_recursive>
 800bac8:	0028      	movs	r0, r5
 800baca:	0021      	movs	r1, r4
 800bacc:	f7ff ff50 	bl	800b970 <__sflush_r>
 800bad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bad2:	0005      	movs	r5, r0
 800bad4:	07db      	lsls	r3, r3, #31
 800bad6:	d4de      	bmi.n	800ba96 <_fflush_r+0xe>
 800bad8:	89a3      	ldrh	r3, [r4, #12]
 800bada:	059b      	lsls	r3, r3, #22
 800badc:	d4db      	bmi.n	800ba96 <_fflush_r+0xe>
 800bade:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bae0:	f000 f916 	bl	800bd10 <__retarget_lock_release_recursive>
 800bae4:	e7d7      	b.n	800ba96 <_fflush_r+0xe>
 800bae6:	4b06      	ldr	r3, [pc, #24]	; (800bb00 <_fflush_r+0x78>)
 800bae8:	429c      	cmp	r4, r3
 800baea:	d101      	bne.n	800baf0 <_fflush_r+0x68>
 800baec:	68ac      	ldr	r4, [r5, #8]
 800baee:	e7df      	b.n	800bab0 <_fflush_r+0x28>
 800baf0:	4b04      	ldr	r3, [pc, #16]	; (800bb04 <_fflush_r+0x7c>)
 800baf2:	429c      	cmp	r4, r3
 800baf4:	d1dc      	bne.n	800bab0 <_fflush_r+0x28>
 800baf6:	68ec      	ldr	r4, [r5, #12]
 800baf8:	e7da      	b.n	800bab0 <_fflush_r+0x28>
 800bafa:	46c0      	nop			; (mov r8, r8)
 800bafc:	0800c5e0 	.word	0x0800c5e0
 800bb00:	0800c600 	.word	0x0800c600
 800bb04:	0800c5c0 	.word	0x0800c5c0

0800bb08 <std>:
 800bb08:	2300      	movs	r3, #0
 800bb0a:	b510      	push	{r4, lr}
 800bb0c:	0004      	movs	r4, r0
 800bb0e:	6003      	str	r3, [r0, #0]
 800bb10:	6043      	str	r3, [r0, #4]
 800bb12:	6083      	str	r3, [r0, #8]
 800bb14:	8181      	strh	r1, [r0, #12]
 800bb16:	6643      	str	r3, [r0, #100]	; 0x64
 800bb18:	0019      	movs	r1, r3
 800bb1a:	81c2      	strh	r2, [r0, #14]
 800bb1c:	6103      	str	r3, [r0, #16]
 800bb1e:	6143      	str	r3, [r0, #20]
 800bb20:	6183      	str	r3, [r0, #24]
 800bb22:	2208      	movs	r2, #8
 800bb24:	305c      	adds	r0, #92	; 0x5c
 800bb26:	f7fd fb8e 	bl	8009246 <memset>
 800bb2a:	4b05      	ldr	r3, [pc, #20]	; (800bb40 <std+0x38>)
 800bb2c:	6224      	str	r4, [r4, #32]
 800bb2e:	6263      	str	r3, [r4, #36]	; 0x24
 800bb30:	4b04      	ldr	r3, [pc, #16]	; (800bb44 <std+0x3c>)
 800bb32:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb34:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <std+0x40>)
 800bb36:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb38:	4b04      	ldr	r3, [pc, #16]	; (800bb4c <std+0x44>)
 800bb3a:	6323      	str	r3, [r4, #48]	; 0x30
 800bb3c:	bd10      	pop	{r4, pc}
 800bb3e:	46c0      	nop			; (mov r8, r8)
 800bb40:	0800be81 	.word	0x0800be81
 800bb44:	0800bea9 	.word	0x0800bea9
 800bb48:	0800bee1 	.word	0x0800bee1
 800bb4c:	0800bf0d 	.word	0x0800bf0d

0800bb50 <_cleanup_r>:
 800bb50:	b510      	push	{r4, lr}
 800bb52:	4902      	ldr	r1, [pc, #8]	; (800bb5c <_cleanup_r+0xc>)
 800bb54:	f000 f8ba 	bl	800bccc <_fwalk_reent>
 800bb58:	bd10      	pop	{r4, pc}
 800bb5a:	46c0      	nop			; (mov r8, r8)
 800bb5c:	0800ba89 	.word	0x0800ba89

0800bb60 <__sfmoreglue>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	2568      	movs	r5, #104	; 0x68
 800bb64:	1e4a      	subs	r2, r1, #1
 800bb66:	4355      	muls	r5, r2
 800bb68:	000e      	movs	r6, r1
 800bb6a:	0029      	movs	r1, r5
 800bb6c:	3174      	adds	r1, #116	; 0x74
 800bb6e:	f7fe f9c5 	bl	8009efc <_malloc_r>
 800bb72:	1e04      	subs	r4, r0, #0
 800bb74:	d008      	beq.n	800bb88 <__sfmoreglue+0x28>
 800bb76:	2100      	movs	r1, #0
 800bb78:	002a      	movs	r2, r5
 800bb7a:	6001      	str	r1, [r0, #0]
 800bb7c:	6046      	str	r6, [r0, #4]
 800bb7e:	300c      	adds	r0, #12
 800bb80:	60a0      	str	r0, [r4, #8]
 800bb82:	3268      	adds	r2, #104	; 0x68
 800bb84:	f7fd fb5f 	bl	8009246 <memset>
 800bb88:	0020      	movs	r0, r4
 800bb8a:	bd70      	pop	{r4, r5, r6, pc}

0800bb8c <__sfp_lock_acquire>:
 800bb8c:	b510      	push	{r4, lr}
 800bb8e:	4802      	ldr	r0, [pc, #8]	; (800bb98 <__sfp_lock_acquire+0xc>)
 800bb90:	f000 f8bd 	bl	800bd0e <__retarget_lock_acquire_recursive>
 800bb94:	bd10      	pop	{r4, pc}
 800bb96:	46c0      	nop			; (mov r8, r8)
 800bb98:	20000e45 	.word	0x20000e45

0800bb9c <__sfp_lock_release>:
 800bb9c:	b510      	push	{r4, lr}
 800bb9e:	4802      	ldr	r0, [pc, #8]	; (800bba8 <__sfp_lock_release+0xc>)
 800bba0:	f000 f8b6 	bl	800bd10 <__retarget_lock_release_recursive>
 800bba4:	bd10      	pop	{r4, pc}
 800bba6:	46c0      	nop			; (mov r8, r8)
 800bba8:	20000e45 	.word	0x20000e45

0800bbac <__sinit_lock_acquire>:
 800bbac:	b510      	push	{r4, lr}
 800bbae:	4802      	ldr	r0, [pc, #8]	; (800bbb8 <__sinit_lock_acquire+0xc>)
 800bbb0:	f000 f8ad 	bl	800bd0e <__retarget_lock_acquire_recursive>
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	46c0      	nop			; (mov r8, r8)
 800bbb8:	20000e46 	.word	0x20000e46

0800bbbc <__sinit_lock_release>:
 800bbbc:	b510      	push	{r4, lr}
 800bbbe:	4802      	ldr	r0, [pc, #8]	; (800bbc8 <__sinit_lock_release+0xc>)
 800bbc0:	f000 f8a6 	bl	800bd10 <__retarget_lock_release_recursive>
 800bbc4:	bd10      	pop	{r4, pc}
 800bbc6:	46c0      	nop			; (mov r8, r8)
 800bbc8:	20000e46 	.word	0x20000e46

0800bbcc <__sinit>:
 800bbcc:	b513      	push	{r0, r1, r4, lr}
 800bbce:	0004      	movs	r4, r0
 800bbd0:	f7ff ffec 	bl	800bbac <__sinit_lock_acquire>
 800bbd4:	69a3      	ldr	r3, [r4, #24]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d002      	beq.n	800bbe0 <__sinit+0x14>
 800bbda:	f7ff ffef 	bl	800bbbc <__sinit_lock_release>
 800bbde:	bd13      	pop	{r0, r1, r4, pc}
 800bbe0:	64a3      	str	r3, [r4, #72]	; 0x48
 800bbe2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800bbe4:	6523      	str	r3, [r4, #80]	; 0x50
 800bbe6:	4b13      	ldr	r3, [pc, #76]	; (800bc34 <__sinit+0x68>)
 800bbe8:	4a13      	ldr	r2, [pc, #76]	; (800bc38 <__sinit+0x6c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbee:	9301      	str	r3, [sp, #4]
 800bbf0:	42a3      	cmp	r3, r4
 800bbf2:	d101      	bne.n	800bbf8 <__sinit+0x2c>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	61a3      	str	r3, [r4, #24]
 800bbf8:	0020      	movs	r0, r4
 800bbfa:	f000 f81f 	bl	800bc3c <__sfp>
 800bbfe:	6060      	str	r0, [r4, #4]
 800bc00:	0020      	movs	r0, r4
 800bc02:	f000 f81b 	bl	800bc3c <__sfp>
 800bc06:	60a0      	str	r0, [r4, #8]
 800bc08:	0020      	movs	r0, r4
 800bc0a:	f000 f817 	bl	800bc3c <__sfp>
 800bc0e:	2200      	movs	r2, #0
 800bc10:	2104      	movs	r1, #4
 800bc12:	60e0      	str	r0, [r4, #12]
 800bc14:	6860      	ldr	r0, [r4, #4]
 800bc16:	f7ff ff77 	bl	800bb08 <std>
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	2109      	movs	r1, #9
 800bc1e:	68a0      	ldr	r0, [r4, #8]
 800bc20:	f7ff ff72 	bl	800bb08 <std>
 800bc24:	2202      	movs	r2, #2
 800bc26:	2112      	movs	r1, #18
 800bc28:	68e0      	ldr	r0, [r4, #12]
 800bc2a:	f7ff ff6d 	bl	800bb08 <std>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	61a3      	str	r3, [r4, #24]
 800bc32:	e7d2      	b.n	800bbda <__sinit+0xe>
 800bc34:	0800c25c 	.word	0x0800c25c
 800bc38:	0800bb51 	.word	0x0800bb51

0800bc3c <__sfp>:
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3e:	0007      	movs	r7, r0
 800bc40:	f7ff ffa4 	bl	800bb8c <__sfp_lock_acquire>
 800bc44:	4b1f      	ldr	r3, [pc, #124]	; (800bcc4 <__sfp+0x88>)
 800bc46:	681e      	ldr	r6, [r3, #0]
 800bc48:	69b3      	ldr	r3, [r6, #24]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d102      	bne.n	800bc54 <__sfp+0x18>
 800bc4e:	0030      	movs	r0, r6
 800bc50:	f7ff ffbc 	bl	800bbcc <__sinit>
 800bc54:	3648      	adds	r6, #72	; 0x48
 800bc56:	68b4      	ldr	r4, [r6, #8]
 800bc58:	6873      	ldr	r3, [r6, #4]
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	d504      	bpl.n	800bc68 <__sfp+0x2c>
 800bc5e:	6833      	ldr	r3, [r6, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d022      	beq.n	800bcaa <__sfp+0x6e>
 800bc64:	6836      	ldr	r6, [r6, #0]
 800bc66:	e7f6      	b.n	800bc56 <__sfp+0x1a>
 800bc68:	220c      	movs	r2, #12
 800bc6a:	5ea5      	ldrsh	r5, [r4, r2]
 800bc6c:	2d00      	cmp	r5, #0
 800bc6e:	d11a      	bne.n	800bca6 <__sfp+0x6a>
 800bc70:	0020      	movs	r0, r4
 800bc72:	4b15      	ldr	r3, [pc, #84]	; (800bcc8 <__sfp+0x8c>)
 800bc74:	3058      	adds	r0, #88	; 0x58
 800bc76:	60e3      	str	r3, [r4, #12]
 800bc78:	6665      	str	r5, [r4, #100]	; 0x64
 800bc7a:	f000 f847 	bl	800bd0c <__retarget_lock_init_recursive>
 800bc7e:	f7ff ff8d 	bl	800bb9c <__sfp_lock_release>
 800bc82:	0020      	movs	r0, r4
 800bc84:	2208      	movs	r2, #8
 800bc86:	0029      	movs	r1, r5
 800bc88:	6025      	str	r5, [r4, #0]
 800bc8a:	60a5      	str	r5, [r4, #8]
 800bc8c:	6065      	str	r5, [r4, #4]
 800bc8e:	6125      	str	r5, [r4, #16]
 800bc90:	6165      	str	r5, [r4, #20]
 800bc92:	61a5      	str	r5, [r4, #24]
 800bc94:	305c      	adds	r0, #92	; 0x5c
 800bc96:	f7fd fad6 	bl	8009246 <memset>
 800bc9a:	6365      	str	r5, [r4, #52]	; 0x34
 800bc9c:	63a5      	str	r5, [r4, #56]	; 0x38
 800bc9e:	64a5      	str	r5, [r4, #72]	; 0x48
 800bca0:	64e5      	str	r5, [r4, #76]	; 0x4c
 800bca2:	0020      	movs	r0, r4
 800bca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bca6:	3468      	adds	r4, #104	; 0x68
 800bca8:	e7d7      	b.n	800bc5a <__sfp+0x1e>
 800bcaa:	2104      	movs	r1, #4
 800bcac:	0038      	movs	r0, r7
 800bcae:	f7ff ff57 	bl	800bb60 <__sfmoreglue>
 800bcb2:	1e04      	subs	r4, r0, #0
 800bcb4:	6030      	str	r0, [r6, #0]
 800bcb6:	d1d5      	bne.n	800bc64 <__sfp+0x28>
 800bcb8:	f7ff ff70 	bl	800bb9c <__sfp_lock_release>
 800bcbc:	230c      	movs	r3, #12
 800bcbe:	603b      	str	r3, [r7, #0]
 800bcc0:	e7ef      	b.n	800bca2 <__sfp+0x66>
 800bcc2:	46c0      	nop			; (mov r8, r8)
 800bcc4:	0800c25c 	.word	0x0800c25c
 800bcc8:	ffff0001 	.word	0xffff0001

0800bccc <_fwalk_reent>:
 800bccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcce:	0004      	movs	r4, r0
 800bcd0:	0006      	movs	r6, r0
 800bcd2:	2700      	movs	r7, #0
 800bcd4:	9101      	str	r1, [sp, #4]
 800bcd6:	3448      	adds	r4, #72	; 0x48
 800bcd8:	6863      	ldr	r3, [r4, #4]
 800bcda:	68a5      	ldr	r5, [r4, #8]
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	9b00      	ldr	r3, [sp, #0]
 800bce0:	3b01      	subs	r3, #1
 800bce2:	9300      	str	r3, [sp, #0]
 800bce4:	d504      	bpl.n	800bcf0 <_fwalk_reent+0x24>
 800bce6:	6824      	ldr	r4, [r4, #0]
 800bce8:	2c00      	cmp	r4, #0
 800bcea:	d1f5      	bne.n	800bcd8 <_fwalk_reent+0xc>
 800bcec:	0038      	movs	r0, r7
 800bcee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bcf0:	89ab      	ldrh	r3, [r5, #12]
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d908      	bls.n	800bd08 <_fwalk_reent+0x3c>
 800bcf6:	220e      	movs	r2, #14
 800bcf8:	5eab      	ldrsh	r3, [r5, r2]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	d004      	beq.n	800bd08 <_fwalk_reent+0x3c>
 800bcfe:	0029      	movs	r1, r5
 800bd00:	0030      	movs	r0, r6
 800bd02:	9b01      	ldr	r3, [sp, #4]
 800bd04:	4798      	blx	r3
 800bd06:	4307      	orrs	r7, r0
 800bd08:	3568      	adds	r5, #104	; 0x68
 800bd0a:	e7e8      	b.n	800bcde <_fwalk_reent+0x12>

0800bd0c <__retarget_lock_init_recursive>:
 800bd0c:	4770      	bx	lr

0800bd0e <__retarget_lock_acquire_recursive>:
 800bd0e:	4770      	bx	lr

0800bd10 <__retarget_lock_release_recursive>:
 800bd10:	4770      	bx	lr
	...

0800bd14 <__swhatbuf_r>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	000e      	movs	r6, r1
 800bd18:	001d      	movs	r5, r3
 800bd1a:	230e      	movs	r3, #14
 800bd1c:	5ec9      	ldrsh	r1, [r1, r3]
 800bd1e:	0014      	movs	r4, r2
 800bd20:	b096      	sub	sp, #88	; 0x58
 800bd22:	2900      	cmp	r1, #0
 800bd24:	da08      	bge.n	800bd38 <__swhatbuf_r+0x24>
 800bd26:	220c      	movs	r2, #12
 800bd28:	5eb3      	ldrsh	r3, [r6, r2]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	602a      	str	r2, [r5, #0]
 800bd2e:	061b      	lsls	r3, r3, #24
 800bd30:	d411      	bmi.n	800bd56 <__swhatbuf_r+0x42>
 800bd32:	2380      	movs	r3, #128	; 0x80
 800bd34:	00db      	lsls	r3, r3, #3
 800bd36:	e00f      	b.n	800bd58 <__swhatbuf_r+0x44>
 800bd38:	466a      	mov	r2, sp
 800bd3a:	f000 f913 	bl	800bf64 <_fstat_r>
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	dbf1      	blt.n	800bd26 <__swhatbuf_r+0x12>
 800bd42:	23f0      	movs	r3, #240	; 0xf0
 800bd44:	9901      	ldr	r1, [sp, #4]
 800bd46:	021b      	lsls	r3, r3, #8
 800bd48:	4019      	ands	r1, r3
 800bd4a:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <__swhatbuf_r+0x4c>)
 800bd4c:	18c9      	adds	r1, r1, r3
 800bd4e:	424b      	negs	r3, r1
 800bd50:	4159      	adcs	r1, r3
 800bd52:	6029      	str	r1, [r5, #0]
 800bd54:	e7ed      	b.n	800bd32 <__swhatbuf_r+0x1e>
 800bd56:	2340      	movs	r3, #64	; 0x40
 800bd58:	2000      	movs	r0, #0
 800bd5a:	6023      	str	r3, [r4, #0]
 800bd5c:	b016      	add	sp, #88	; 0x58
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
 800bd60:	ffffe000 	.word	0xffffe000

0800bd64 <__smakebuf_r>:
 800bd64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd66:	2602      	movs	r6, #2
 800bd68:	898b      	ldrh	r3, [r1, #12]
 800bd6a:	0005      	movs	r5, r0
 800bd6c:	000c      	movs	r4, r1
 800bd6e:	4233      	tst	r3, r6
 800bd70:	d006      	beq.n	800bd80 <__smakebuf_r+0x1c>
 800bd72:	0023      	movs	r3, r4
 800bd74:	3347      	adds	r3, #71	; 0x47
 800bd76:	6023      	str	r3, [r4, #0]
 800bd78:	6123      	str	r3, [r4, #16]
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	6163      	str	r3, [r4, #20]
 800bd7e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bd80:	466a      	mov	r2, sp
 800bd82:	ab01      	add	r3, sp, #4
 800bd84:	f7ff ffc6 	bl	800bd14 <__swhatbuf_r>
 800bd88:	9900      	ldr	r1, [sp, #0]
 800bd8a:	0007      	movs	r7, r0
 800bd8c:	0028      	movs	r0, r5
 800bd8e:	f7fe f8b5 	bl	8009efc <_malloc_r>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d108      	bne.n	800bda8 <__smakebuf_r+0x44>
 800bd96:	220c      	movs	r2, #12
 800bd98:	5ea3      	ldrsh	r3, [r4, r2]
 800bd9a:	059a      	lsls	r2, r3, #22
 800bd9c:	d4ef      	bmi.n	800bd7e <__smakebuf_r+0x1a>
 800bd9e:	2203      	movs	r2, #3
 800bda0:	4393      	bics	r3, r2
 800bda2:	431e      	orrs	r6, r3
 800bda4:	81a6      	strh	r6, [r4, #12]
 800bda6:	e7e4      	b.n	800bd72 <__smakebuf_r+0xe>
 800bda8:	4b0f      	ldr	r3, [pc, #60]	; (800bde8 <__smakebuf_r+0x84>)
 800bdaa:	62ab      	str	r3, [r5, #40]	; 0x28
 800bdac:	2380      	movs	r3, #128	; 0x80
 800bdae:	89a2      	ldrh	r2, [r4, #12]
 800bdb0:	6020      	str	r0, [r4, #0]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	9b00      	ldr	r3, [sp, #0]
 800bdb8:	6120      	str	r0, [r4, #16]
 800bdba:	6163      	str	r3, [r4, #20]
 800bdbc:	9b01      	ldr	r3, [sp, #4]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00d      	beq.n	800bdde <__smakebuf_r+0x7a>
 800bdc2:	0028      	movs	r0, r5
 800bdc4:	230e      	movs	r3, #14
 800bdc6:	5ee1      	ldrsh	r1, [r4, r3]
 800bdc8:	f000 f8de 	bl	800bf88 <_isatty_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	d006      	beq.n	800bdde <__smakebuf_r+0x7a>
 800bdd0:	2203      	movs	r2, #3
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	4393      	bics	r3, r2
 800bdd6:	001a      	movs	r2, r3
 800bdd8:	2301      	movs	r3, #1
 800bdda:	4313      	orrs	r3, r2
 800bddc:	81a3      	strh	r3, [r4, #12]
 800bdde:	89a0      	ldrh	r0, [r4, #12]
 800bde0:	4307      	orrs	r7, r0
 800bde2:	81a7      	strh	r7, [r4, #12]
 800bde4:	e7cb      	b.n	800bd7e <__smakebuf_r+0x1a>
 800bde6:	46c0      	nop			; (mov r8, r8)
 800bde8:	0800bb51 	.word	0x0800bb51

0800bdec <_raise_r>:
 800bdec:	b570      	push	{r4, r5, r6, lr}
 800bdee:	0004      	movs	r4, r0
 800bdf0:	000d      	movs	r5, r1
 800bdf2:	291f      	cmp	r1, #31
 800bdf4:	d904      	bls.n	800be00 <_raise_r+0x14>
 800bdf6:	2316      	movs	r3, #22
 800bdf8:	6003      	str	r3, [r0, #0]
 800bdfa:	2001      	movs	r0, #1
 800bdfc:	4240      	negs	r0, r0
 800bdfe:	bd70      	pop	{r4, r5, r6, pc}
 800be00:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800be02:	2b00      	cmp	r3, #0
 800be04:	d004      	beq.n	800be10 <_raise_r+0x24>
 800be06:	008a      	lsls	r2, r1, #2
 800be08:	189b      	adds	r3, r3, r2
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	2a00      	cmp	r2, #0
 800be0e:	d108      	bne.n	800be22 <_raise_r+0x36>
 800be10:	0020      	movs	r0, r4
 800be12:	f000 f831 	bl	800be78 <_getpid_r>
 800be16:	002a      	movs	r2, r5
 800be18:	0001      	movs	r1, r0
 800be1a:	0020      	movs	r0, r4
 800be1c:	f000 f81a 	bl	800be54 <_kill_r>
 800be20:	e7ed      	b.n	800bdfe <_raise_r+0x12>
 800be22:	2000      	movs	r0, #0
 800be24:	2a01      	cmp	r2, #1
 800be26:	d0ea      	beq.n	800bdfe <_raise_r+0x12>
 800be28:	1c51      	adds	r1, r2, #1
 800be2a:	d103      	bne.n	800be34 <_raise_r+0x48>
 800be2c:	2316      	movs	r3, #22
 800be2e:	3001      	adds	r0, #1
 800be30:	6023      	str	r3, [r4, #0]
 800be32:	e7e4      	b.n	800bdfe <_raise_r+0x12>
 800be34:	2400      	movs	r4, #0
 800be36:	0028      	movs	r0, r5
 800be38:	601c      	str	r4, [r3, #0]
 800be3a:	4790      	blx	r2
 800be3c:	0020      	movs	r0, r4
 800be3e:	e7de      	b.n	800bdfe <_raise_r+0x12>

0800be40 <raise>:
 800be40:	b510      	push	{r4, lr}
 800be42:	4b03      	ldr	r3, [pc, #12]	; (800be50 <raise+0x10>)
 800be44:	0001      	movs	r1, r0
 800be46:	6818      	ldr	r0, [r3, #0]
 800be48:	f7ff ffd0 	bl	800bdec <_raise_r>
 800be4c:	bd10      	pop	{r4, pc}
 800be4e:	46c0      	nop			; (mov r8, r8)
 800be50:	20000014 	.word	0x20000014

0800be54 <_kill_r>:
 800be54:	2300      	movs	r3, #0
 800be56:	b570      	push	{r4, r5, r6, lr}
 800be58:	4d06      	ldr	r5, [pc, #24]	; (800be74 <_kill_r+0x20>)
 800be5a:	0004      	movs	r4, r0
 800be5c:	0008      	movs	r0, r1
 800be5e:	0011      	movs	r1, r2
 800be60:	602b      	str	r3, [r5, #0]
 800be62:	f7f8 f847 	bl	8003ef4 <_kill>
 800be66:	1c43      	adds	r3, r0, #1
 800be68:	d103      	bne.n	800be72 <_kill_r+0x1e>
 800be6a:	682b      	ldr	r3, [r5, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d000      	beq.n	800be72 <_kill_r+0x1e>
 800be70:	6023      	str	r3, [r4, #0]
 800be72:	bd70      	pop	{r4, r5, r6, pc}
 800be74:	20000e40 	.word	0x20000e40

0800be78 <_getpid_r>:
 800be78:	b510      	push	{r4, lr}
 800be7a:	f7f8 f835 	bl	8003ee8 <_getpid>
 800be7e:	bd10      	pop	{r4, pc}

0800be80 <__sread>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	000c      	movs	r4, r1
 800be84:	250e      	movs	r5, #14
 800be86:	5f49      	ldrsh	r1, [r1, r5]
 800be88:	f000 f8a4 	bl	800bfd4 <_read_r>
 800be8c:	2800      	cmp	r0, #0
 800be8e:	db03      	blt.n	800be98 <__sread+0x18>
 800be90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800be92:	181b      	adds	r3, r3, r0
 800be94:	6563      	str	r3, [r4, #84]	; 0x54
 800be96:	bd70      	pop	{r4, r5, r6, pc}
 800be98:	89a3      	ldrh	r3, [r4, #12]
 800be9a:	4a02      	ldr	r2, [pc, #8]	; (800bea4 <__sread+0x24>)
 800be9c:	4013      	ands	r3, r2
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	e7f9      	b.n	800be96 <__sread+0x16>
 800bea2:	46c0      	nop			; (mov r8, r8)
 800bea4:	ffffefff 	.word	0xffffefff

0800bea8 <__swrite>:
 800bea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beaa:	001f      	movs	r7, r3
 800beac:	898b      	ldrh	r3, [r1, #12]
 800beae:	0005      	movs	r5, r0
 800beb0:	000c      	movs	r4, r1
 800beb2:	0016      	movs	r6, r2
 800beb4:	05db      	lsls	r3, r3, #23
 800beb6:	d505      	bpl.n	800bec4 <__swrite+0x1c>
 800beb8:	230e      	movs	r3, #14
 800beba:	5ec9      	ldrsh	r1, [r1, r3]
 800bebc:	2200      	movs	r2, #0
 800bebe:	2302      	movs	r3, #2
 800bec0:	f000 f874 	bl	800bfac <_lseek_r>
 800bec4:	89a3      	ldrh	r3, [r4, #12]
 800bec6:	4a05      	ldr	r2, [pc, #20]	; (800bedc <__swrite+0x34>)
 800bec8:	0028      	movs	r0, r5
 800beca:	4013      	ands	r3, r2
 800becc:	81a3      	strh	r3, [r4, #12]
 800bece:	0032      	movs	r2, r6
 800bed0:	230e      	movs	r3, #14
 800bed2:	5ee1      	ldrsh	r1, [r4, r3]
 800bed4:	003b      	movs	r3, r7
 800bed6:	f000 f81f 	bl	800bf18 <_write_r>
 800beda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bedc:	ffffefff 	.word	0xffffefff

0800bee0 <__sseek>:
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	000c      	movs	r4, r1
 800bee4:	250e      	movs	r5, #14
 800bee6:	5f49      	ldrsh	r1, [r1, r5]
 800bee8:	f000 f860 	bl	800bfac <_lseek_r>
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	1c42      	adds	r2, r0, #1
 800bef0:	d103      	bne.n	800befa <__sseek+0x1a>
 800bef2:	4a05      	ldr	r2, [pc, #20]	; (800bf08 <__sseek+0x28>)
 800bef4:	4013      	ands	r3, r2
 800bef6:	81a3      	strh	r3, [r4, #12]
 800bef8:	bd70      	pop	{r4, r5, r6, pc}
 800befa:	2280      	movs	r2, #128	; 0x80
 800befc:	0152      	lsls	r2, r2, #5
 800befe:	4313      	orrs	r3, r2
 800bf00:	81a3      	strh	r3, [r4, #12]
 800bf02:	6560      	str	r0, [r4, #84]	; 0x54
 800bf04:	e7f8      	b.n	800bef8 <__sseek+0x18>
 800bf06:	46c0      	nop			; (mov r8, r8)
 800bf08:	ffffefff 	.word	0xffffefff

0800bf0c <__sclose>:
 800bf0c:	b510      	push	{r4, lr}
 800bf0e:	230e      	movs	r3, #14
 800bf10:	5ec9      	ldrsh	r1, [r1, r3]
 800bf12:	f000 f815 	bl	800bf40 <_close_r>
 800bf16:	bd10      	pop	{r4, pc}

0800bf18 <_write_r>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	0004      	movs	r4, r0
 800bf1c:	0008      	movs	r0, r1
 800bf1e:	0011      	movs	r1, r2
 800bf20:	001a      	movs	r2, r3
 800bf22:	2300      	movs	r3, #0
 800bf24:	4d05      	ldr	r5, [pc, #20]	; (800bf3c <_write_r+0x24>)
 800bf26:	602b      	str	r3, [r5, #0]
 800bf28:	f7f8 f81d 	bl	8003f66 <_write>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d103      	bne.n	800bf38 <_write_r+0x20>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d000      	beq.n	800bf38 <_write_r+0x20>
 800bf36:	6023      	str	r3, [r4, #0]
 800bf38:	bd70      	pop	{r4, r5, r6, pc}
 800bf3a:	46c0      	nop			; (mov r8, r8)
 800bf3c:	20000e40 	.word	0x20000e40

0800bf40 <_close_r>:
 800bf40:	2300      	movs	r3, #0
 800bf42:	b570      	push	{r4, r5, r6, lr}
 800bf44:	4d06      	ldr	r5, [pc, #24]	; (800bf60 <_close_r+0x20>)
 800bf46:	0004      	movs	r4, r0
 800bf48:	0008      	movs	r0, r1
 800bf4a:	602b      	str	r3, [r5, #0]
 800bf4c:	f7f8 f827 	bl	8003f9e <_close>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d103      	bne.n	800bf5c <_close_r+0x1c>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d000      	beq.n	800bf5c <_close_r+0x1c>
 800bf5a:	6023      	str	r3, [r4, #0]
 800bf5c:	bd70      	pop	{r4, r5, r6, pc}
 800bf5e:	46c0      	nop			; (mov r8, r8)
 800bf60:	20000e40 	.word	0x20000e40

0800bf64 <_fstat_r>:
 800bf64:	2300      	movs	r3, #0
 800bf66:	b570      	push	{r4, r5, r6, lr}
 800bf68:	4d06      	ldr	r5, [pc, #24]	; (800bf84 <_fstat_r+0x20>)
 800bf6a:	0004      	movs	r4, r0
 800bf6c:	0008      	movs	r0, r1
 800bf6e:	0011      	movs	r1, r2
 800bf70:	602b      	str	r3, [r5, #0]
 800bf72:	f7f8 f81e 	bl	8003fb2 <_fstat>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	d103      	bne.n	800bf82 <_fstat_r+0x1e>
 800bf7a:	682b      	ldr	r3, [r5, #0]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d000      	beq.n	800bf82 <_fstat_r+0x1e>
 800bf80:	6023      	str	r3, [r4, #0]
 800bf82:	bd70      	pop	{r4, r5, r6, pc}
 800bf84:	20000e40 	.word	0x20000e40

0800bf88 <_isatty_r>:
 800bf88:	2300      	movs	r3, #0
 800bf8a:	b570      	push	{r4, r5, r6, lr}
 800bf8c:	4d06      	ldr	r5, [pc, #24]	; (800bfa8 <_isatty_r+0x20>)
 800bf8e:	0004      	movs	r4, r0
 800bf90:	0008      	movs	r0, r1
 800bf92:	602b      	str	r3, [r5, #0]
 800bf94:	f7f8 f81b 	bl	8003fce <_isatty>
 800bf98:	1c43      	adds	r3, r0, #1
 800bf9a:	d103      	bne.n	800bfa4 <_isatty_r+0x1c>
 800bf9c:	682b      	ldr	r3, [r5, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d000      	beq.n	800bfa4 <_isatty_r+0x1c>
 800bfa2:	6023      	str	r3, [r4, #0]
 800bfa4:	bd70      	pop	{r4, r5, r6, pc}
 800bfa6:	46c0      	nop			; (mov r8, r8)
 800bfa8:	20000e40 	.word	0x20000e40

0800bfac <_lseek_r>:
 800bfac:	b570      	push	{r4, r5, r6, lr}
 800bfae:	0004      	movs	r4, r0
 800bfb0:	0008      	movs	r0, r1
 800bfb2:	0011      	movs	r1, r2
 800bfb4:	001a      	movs	r2, r3
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	4d05      	ldr	r5, [pc, #20]	; (800bfd0 <_lseek_r+0x24>)
 800bfba:	602b      	str	r3, [r5, #0]
 800bfbc:	f7f8 f810 	bl	8003fe0 <_lseek>
 800bfc0:	1c43      	adds	r3, r0, #1
 800bfc2:	d103      	bne.n	800bfcc <_lseek_r+0x20>
 800bfc4:	682b      	ldr	r3, [r5, #0]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d000      	beq.n	800bfcc <_lseek_r+0x20>
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	bd70      	pop	{r4, r5, r6, pc}
 800bfce:	46c0      	nop			; (mov r8, r8)
 800bfd0:	20000e40 	.word	0x20000e40

0800bfd4 <_read_r>:
 800bfd4:	b570      	push	{r4, r5, r6, lr}
 800bfd6:	0004      	movs	r4, r0
 800bfd8:	0008      	movs	r0, r1
 800bfda:	0011      	movs	r1, r2
 800bfdc:	001a      	movs	r2, r3
 800bfde:	2300      	movs	r3, #0
 800bfe0:	4d05      	ldr	r5, [pc, #20]	; (800bff8 <_read_r+0x24>)
 800bfe2:	602b      	str	r3, [r5, #0]
 800bfe4:	f7f7 ffa2 	bl	8003f2c <_read>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d103      	bne.n	800bff4 <_read_r+0x20>
 800bfec:	682b      	ldr	r3, [r5, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d000      	beq.n	800bff4 <_read_r+0x20>
 800bff2:	6023      	str	r3, [r4, #0]
 800bff4:	bd70      	pop	{r4, r5, r6, pc}
 800bff6:	46c0      	nop			; (mov r8, r8)
 800bff8:	20000e40 	.word	0x20000e40

0800bffc <_init>:
 800bffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffe:	46c0      	nop			; (mov r8, r8)
 800c000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c002:	bc08      	pop	{r3}
 800c004:	469e      	mov	lr, r3
 800c006:	4770      	bx	lr

0800c008 <_fini>:
 800c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00a:	46c0      	nop			; (mov r8, r8)
 800c00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c00e:	bc08      	pop	{r3}
 800c010:	469e      	mov	lr, r3
 800c012:	4770      	bx	lr
